<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="2021/02/11/css-xue-xi-bi-ji/"/>
      <url>2021/02/11/css-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：这些笔记都是之前学习时写在笔记本上或者记录在markdown文件上的，现在学习搭建了一个自己的个人博客，所以将学习笔记都一点点写在个人博客上，作为自己个人博客的起步内容，同时也正好复习一遍WEB前端的基础学习内容，可能有些不正确的地方，或者有些重点被疏忽了，亦或者学习的时候觉得有的没有记录下来，欢迎大佬补充，小白是需要大佬调教的哈哈哈哈。</p></blockquote><h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><h3 id="一、CSS层叠样式表"><a href="#一、CSS层叠样式表" class="headerlink" title="一、CSS层叠样式表"></a>一、CSS层叠样式表</h3><ul><li><p>作用：美化页面，布局页面，堪称网页的美容师</p></li><li><p><strong>弊端</strong>：HTML比较单纯，只关注内容的语义，可以做简单的样式，但是复杂的就无法实现。</p></li><li><blockquote><p>CSS也是一门标记语言，主要用于设置HTML页面中的<strong>文本内容（字体、大小、对齐方式等）</strong>、<strong>图片的外形（宽高、边框样式、边距等）</strong>以及<strong>版面的布局和外观显示样式</strong>。</p></blockquote></li><li><p><strong>价值</strong>：由HTML专注去做结构呈现，由CSS做样式表现，实现<strong>结构（HTML）</strong>与<strong>样式（CSS）</strong>相分离</p></li><li><p>语法规范：</p><ul><li>选择器 + 样式（一条或多条申明，用<code>{ }</code>包含）<ul><li>选择器：用于指定CSS样式的HTML标签</li><li>样式：属性和属性值以键值对的形式进行声明</li></ul></li><li>示例：<br><code>h1 { color: red; font-size: 16px;}</code><ul><li><strong>以分号结尾</strong></li></ul></li></ul></li></ul><ul><li><p>代码风格（<strong>不是强制规定，而是为符合实际开发的书写方式</strong>）：</p><ul><li><p>样式格式书写：</p><ul><li><p>紧凑型格式 ：</p><ul><li> <code>h1 { color: red; font-size: 16px;}</code></li></ul></li><li><p>展开型格式（<strong>推荐</strong>）：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>样式大小写：推荐使用<strong>小写</strong>输入代码，特殊情况除外</p></li><li><p>空格规范：</p><ul><li>属性值前保留空格<ul><li><code>color: pink</code>(pink前保留)</li></ul></li><li>选择器和大括号中间保留空格<ul><li><code>h1 {##: ###}</code>(h1后面保留)</li></ul></li></ul></li></ul></li></ul><h3 id="二、CSS基础选择器"><a href="#二、CSS基础选择器" class="headerlink" title="二、CSS基础选择器"></a>二、CSS基础选择器</h3><ul><li>选择器的作用：根据不同的需求把不同的标签选出来。</li><li>选择器的分类：基础选择器和复合选择器</li></ul><h4 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h4><ul><li><p>用HTML的标签名作为选择器，为其指定统一的CSS样式。</p></li><li><p>示例：<code>div {}</code> 、<code>span {}</code>、<code>label {}</code>等</p></li><li><blockquote><p><strong>注：</strong>会将某一类的标签全部选择出来，快速但无法实现差异化</p></blockquote></li></ul><h4 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h4><ul><li><p>可以单独选择一个或者几个标签</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">.类名a </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li><li><p>会将所有拥有<code>类名a</code>的HTML元素修改为<code>{ }</code>内的样式</p></li><li><p>结构内用<code>class</code>属性来调用类名</p><ul><li><code>&lt;div class="类名a"&gt; 内容 &lt;/div&gt;</code></li></ul></li></ul></li><li><p>类名的命名要求：</p><ul><li>不要使用纯数字、中文等命名，尽量使用英文字母</li><li>命名要有语义，能让人看明白</li><li><strong>命名约定俗称的规范可查阅</strong>：web前端开发手册</li></ul></li><li><p>多类名的使用方式：</p><ul><li>可以给<code>class</code>的属性值填写多个类名，中间用<strong>空格</strong>隔开<ul><li><code>&lt;div class="类名a 类名b"&gt;</code></li></ul></li><li>可以将相同的样式放入同一个类，方便修改</li></ul></li></ul><h4 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h4><ul><li><p>HTML元素以<code>id</code>属性来设置id选择器，在CSS中用<code>#</code>来定义</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#id</span>名a </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li><li><p>将元素的<code>id</code>属性值设置为id名即可进行修改样式</p><ul><li><code>&lt;div id="id名a"&gt; 内容 &lt;/div&gt;</code></li></ul></li></ul></li><li><p><strong>注：元素的<code>id</code>属性具有唯一性，不可调用多个</strong></p></li></ul><h4 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4 通配符选择器"></a>2.4 通配符选择器</h4><ul><li><p>用<code>*</code>定义，选取页面中所有的元素（标签）</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>注：通配符选择器不需要调用，自动给全部元素修改，仅特殊情况下使用</strong></p></li></ul><h3 id="三、CSS字体属性"><a href="#三、CSS字体属性" class="headerlink" title="三、CSS字体属性"></a>三、CSS字体属性</h3><ul><li>用于定义<strong>字体系列</strong>、<strong>大小</strong>、<strong>粗细</strong>和<strong>文字样式</strong>（如加粗、斜体等）</li></ul><h4 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h4><ul><li>用<code>font-family</code>属性定义字体系列<ul><li><code>p { font-family: "Microsoft YaHei";}</code></li></ul></li><li>条件允许下才能使用特殊字体，尽量使用系统默认的字体。</li><li>各种字体之间用英文逗号<code>,</code>隔开。<ul><li><code>p { font-family: Courier, monospace;}</code></li></ul></li><li>一般情况下，若有空格隔开的多字节字体，用引号包裹<ul><li><code>p { font-family: "Microsoft YaHei"}</code></li></ul></li><li>定义多个字体系列时，计算机优先选择前面的，从前向后</li><li>常见的字体：<ul><li><code>"Microsoft YaHei"</code>：微软雅黑，计算机默认</li><li><code>tahoma</code></li><li><code>arial</code></li><li><code>"Hiragino SansGb"</code>：苹果系统中比较好看的字体</li></ul></li></ul><h4 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h4><ul><li>用<code>font-size</code>设置字体的大小<ul><li><code>p { font-size: 16px;}</code></li></ul></li><li><code>px</code>（像素）是网页最常用的单位</li><li>谷歌浏览器默认字体大小为<code>16px</code></li><li>不同的浏览器默认字体大小可能不同，实际开发中尽量给一个固定的大小</li><li>可以在<code>body</code>给整个页面指定字体大小</li></ul><h4 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h4><ul><li>使用<code>font-weight</code>设置字体的粗细</li><li>属性值：<ul><li><code>{font-weight = 100;}</code>~`{font-weight = 900;}`（<strong>不跟单位</strong>）</li><li><code>normal</code>：不加粗，等于数值<code>400</code></li><li><code>bold</code>：加粗，等于数值<code>700</code></li></ul></li></ul><h4 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h4><ul><li>用<code>font-style</code>设置文字的样式</li><li>常用属性值：<ul><li><code>normal</code>：正常</li><li><code>italic</code>：斜体</li></ul></li></ul><h4 id="3-5-字体属性的复合写法"><a href="#3-5-字体属性的复合写法" class="headerlink" title="3.5 字体属性的复合写法"></a>3.5 字体属性的复合写法</h4><ul><li>简写形式，更节省代码</li><li>写法：<ul><li><code>body { font: font-style font-weight font-size font-family;}</code></li><li>顺序不可打乱，否则无法使用</li><li>不需要的属性可以省略，但是简写形式必须保留<code>font-size</code>和<code>font-family</code>这两个属性</li><li>示例：<code>body { font: italic 700 16px "Microsoft YaHei";}</code></li></ul></li></ul><h3 id="四、CSS文本样式"><a href="#四、CSS文本样式" class="headerlink" title="四、CSS文本样式"></a>四、CSS文本样式</h3><ul><li><p>可定义文本的外观，如<strong>颜色</strong>、<strong>对齐方式</strong>、<strong>装饰文本</strong>、<strong>文本缩进</strong>等</p></li><li><p>文本颜色：</p><ul><li><code>div { color: black;}</code></li><li>属性值表示方法：<ol><li>预设颜色，如<code>red</code>、<code>blue</code>等</li><li><strong>十六进制表示法，如<code>#ff0000</code>、<code>#1296db</code></strong></li><li>RBG制，如<code>rgb(255, 0, 0)</code>或<code>rgb(100%, 0% ,0%)</code></li></ol></li></ul></li></ul><ul><li>文本对齐方式：<ul><li><code>text-align</code>用于设置文本内容的<strong>水平对齐</strong></li><li><code>div { text-align: center;}</code></li><li>常用属性值：<ul><li><code>left</code>：左对齐（默认）</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中对齐</li></ul></li></ul></li></ul><ul><li>装饰文本：<ul><li><code>text-decoration</code>用于添加装饰，可以给文本设置下划线、删除线等</li><li><code>div { text-decoration: underline;}</code></li><li>常用属性值：<ul><li><code>none</code>：默认无装饰</li><li><code>underline</code>：下划线</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：删除线</li></ul></li></ul></li></ul><ul><li>文本缩进：<ul><li><code>test-indent</code>用于给文本添加首行缩进，通常为<strong>段落首行</strong></li><li><code>p { text-indent: 10px;}</code></li><li>属性值表示方法：<ol><li><code>10px</code>：精确单位（像素）</li><li><code>2em</code>：em表示法，<code>1em</code>表示当前元素的一个文字大小，根据字体大小改变（常用）</li></ol></li></ul></li></ul><ul><li>行间距：<ul><li><code>line-height</code>用于设置行间距，即<strong>行高</strong></li><li><code>p { line-height: 20px}</code></li><li>属性值表示规范：<ul><li>最低为文字大小的像素，低于文字大小则没有任何变化。</li><li>高于文字大小的像素，会上下均分。</li></ul></li></ul></li></ul><blockquote><p><strong>小技巧：让单行文字垂直居中的方法</strong></p><p>文字的行高 = 边框的高度</p><p>height = 40px;</p><p>line-height = 40px;</p></blockquote><h3 id="五、CSS的引入方式："><a href="#五、CSS的引入方式：" class="headerlink" title="五、CSS的引入方式："></a>五、CSS的引入方式：</h3><ul><li>主要分为三种方式：<ul><li>行内样式表（行内式、内联式）</li><li>内部样式表（内部式、嵌入式）</li><li>外部样式表（外部式）</li></ul></li></ul><h4 id="5-1-行内样式表"><a href="#5-1-行内样式表" class="headerlink" title="5.1 行内样式表"></a>5.1 行内样式表</h4><ul><li>在元素标签内部的<code>style</code>属性中设定CSS样式，便于简单修改</li><li>示例：<code>&lt;div style="color:red; font-size:16px;"&gt; 内容 &lt;/div&gt;</code></li><li><code>style</code>本身就是标签的一个属性</li><li>在双引号中间使用，写法符合<code>CSS规范</code></li><li>仅控制当前标签的样式</li><li>由于书写繁琐，且未实现结构与样式相分离，<strong>不推荐</strong>大量使用，只对某一元素做简单修改时使用</li></ul><h4 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h4><ul><li>写到HTML页面内部，将CSS代码抽取放入<code>&lt;style&gt;&lt;/style&gt;</code>标签中</li><li><code>&lt;style&gt;</code>标签理论上可以放在文档的任何位置，但一般都会放在文档的<code>&lt;head&gt;</code>或者<code>&lt;body&gt;</code>中</li><li>通过此方法，可以方便控制<strong>整个页面</strong>的元素样式</li><li>优点：代码结构清晰，实现结构与样式部分分离</li><li>缺点：并没有完全分离，且整个HTML页面可能会因此而写的很长</li></ul><h4 id="5-3-外部样式表（推荐）"><a href="#5-3-外部样式表（推荐）" class="headerlink" title="5.3 外部样式表（推荐）"></a>5.3 外部样式表（推荐）</h4><ul><li>实际开发中都是使用外部样式表，适用于样式较多时，单独编写<code>.css</code>文件，之后引入到HTML中使用</li><li>步骤：<ol><li>新建一个<code>.css</code>为后缀的样式文件，将CSS样式代码写入</li><li>在HTML页面中，使用<code>&lt;link&gt;</code>标签引入该CSS文件<ul><li><code>&lt;link rel="stylesheet" href=".css文件的路径"&gt;</code></li></ul></li></ol></li></ul><h3 id="六、CSS复合选择器"><a href="#六、CSS复合选择器" class="headerlink" title="六、CSS复合选择器"></a>六、CSS复合选择器</h3><ul><li>建立在基础选择器之上，对基础选择器进行组合形成</li><li>特点：<ul><li>可以更准确、更高效的选择目标元素（标签）</li><li>有两个或多个基础选择器，通过不同方式组合而成</li><li>常用包括：后代选择器、子选择器、并集选择器等</li></ul></li></ul><h4 id="6-1-后代选择器（重要）"><a href="#6-1-后代选择器（重要）" class="headerlink" title="6.1 后代选择器（重要）"></a>6.1 后代选择器（重要）</h4><ul><li>又称包含选择器，可以选择父元素里的子元素</li><li>语法：<ul><li><code>元素1 元素2 {样式声明;}</code></li><li>会选择<code>元素1</code>里的所有<code>元素2</code></li><li><code>元素1</code>和<code>元素2</code>之间用空格隔开</li><li><code>元素1</code>为父级元素，<code>元素2</code>为子级元素，最终选择的为<code>元素2</code></li><li><code>元素2</code>可以为儿子，也可以为孙子，只要是<code>元素1</code>的后代即可</li><li><code>元素1</code>和<code>元素2</code>可以是<strong>任意的基础选择器</strong></li></ul></li></ul><h4 id="6-2-子选择器"><a href="#6-2-子选择器" class="headerlink" title="6.2 子选择器"></a>6.2 子选择器</h4><ul><li>只能选择作为某个元素的最近一级的子元素（<strong>选亲儿子</strong>）</li><li>语法：<ul><li><code>元素1&gt;元素2 {样式声明;}</code></li><li>会选择<code>元素1</code>里的所有直接后代子<code>元素2</code></li><li>用大于号<code>&gt;</code>隔开</li><li><code>元素2</code>必须是亲儿子，否则无法选择</li></ul></li></ul><h4 id="6-3-并集选择器"><a href="#6-3-并集选择器" class="headerlink" title="6.3 并集选择器"></a>6.3 并集选择器</h4><ul><li><p>可以选择多组标签，为他们同时定义相同的样式（集体声明）</p></li><li><p>语法：</p><ul><li><p><code>元素1, 元素2 {集体声明；}</code></p></li><li><p>会选择<code>元素1</code>和<code>元素2</code></p></li><li><p>两个元素用英文逗号<code>,</code>隔开</p></li><li><p>语法规范：并集选择器竖着写</p><ul><li><p>示例：</p></li><li><pre class=" language-css"><code class="language-css"><span class="token selector">元素1,元素2,元素3 </span><span class="token punctuation">{</span>    集体声明<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><h3 id="七、伪类选择器"><a href="#七、伪类选择器" class="headerlink" title="七、伪类选择器"></a>七、伪类选择器</h3><ul><li>向某类选择器添加特殊效果。用冒号<code>:</code>表示</li><li>种类：链接伪类选择器、结构伪类选择器、表单伪类选择器等</li></ul><h4 id="7-1-链接伪类选择器"><a href="#7-1-链接伪类选择器" class="headerlink" title="7.1 链接伪类选择器"></a>7.1 链接伪类选择器</h4><ul><li><code>a: link</code>：选择所有未被访问的链接</li><li><code>a: visited</code>：选择所有已访问过的链接</li><li><code>a: hover</code>：选择鼠标指针位于的链接</li><li><code>a: active</code>：选择活动链接（鼠标按下未弹起）</li><li><strong>注意</strong>：<ul><li>为了确保生效，在使用多个时，请按照<code>link</code>、<code>visited</code>、<code>hover</code>、<code>active</code>（<code>LVHA</code>）的顺序声明</li><li>因为a链接有默认的样式，所以需要单独指定一个</li></ul></li></ul><h4 id="7-2-focus伪类选择器"><a href="#7-2-focus伪类选择器" class="headerlink" title="7.2 :focus伪类选择器"></a>7.2 <code>:focus</code>伪类选择器</h4><ul><li>用于选取获得焦点的表单元素</li><li>一般情况<code>&lt;input&gt;</code>类表单元素才能获取</li><li>语法：<ul><li><code>input:focus { background-color: yellow;}</code></li></ul></li></ul><h3 id="八、CSS元素显示模式"><a href="#八、CSS元素显示模式" class="headerlink" title="八、CSS元素显示模式"></a>八、CSS元素显示模式</h3><ul><li>元素以什么方式进行展示（例如默认状态下，一行只能放置一个<code>&lt;div&gt;</code>，但可以同时存在很多个<code>&lt;span&gt;</code>）</li><li>HTML一般分为块级元素和行内元素</li><li>块级元素：<ul><li><code>&lt;h1&gt;~&lt;h6&gt;、&lt;div&gt;、&lt;p&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等</li><li>特点：<ol><li>独占一行</li><li>高度宽度外边距以及内边距<strong>可控制</strong></li><li>宽度默认时容器(父级元素)的100%</li><li>是一个容器盒子，可以放行内元素或者块元素</li><li>注意：<ul><li>文字类元素不能使用块元素</li><li><code>&lt;div&gt;</code>不能放入<code>&lt;p&gt;</code>中，<code>&lt;p&gt;</code>内部不可以存放块元素</li><li>同理<code>&lt;h1&gt;~&lt;h6&gt;</code>内部也不能</li></ul></li></ol></li></ul></li><li>行内元素<ul><li><code>&lt;a&gt;、&lt;strong&gt;、&lt;u&gt;、&lt;del&gt;、&lt;span&gt;、&lt;ins&gt;、&lt;b&gt;、&lt;i&gt;</code>等</li><li>特点：<ol><li>相邻的会显示在一行上</li><li>高、宽直接设置是无效的</li><li>默认宽度为内容宽度</li><li>行内元素只能存放<strong>文本</strong>和其他<strong>行内元素</strong></li><li>注意：<ul><li>链接里不能放链接</li><li><code>&lt;a&gt;</code>里可以放块元素，但是给<code>&lt;a&gt;</code>转换一下块级模式更安全</li></ul></li></ol></li></ul></li><li>特殊情况：行内块元素<ul><li><code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>等</li><li>同时具有块级元素和行内元素的特点</li><li>特点：<ol><li>相邻行内块元素会展示在同一行上，但它们之间会有一点空白缝隙，一行可以显示多个（行内元素特点）</li><li>默认宽度就是她本身内容的宽度（行内元素特点）</li><li>高度、宽度、内外边距都可以直接修改（块级元素特点）</li></ol></li></ul></li><li>★元素显示模式的转换<ul><li>当一个模式的元素需要另一个模式的特性时，可以进行模式转换</li><li>转换为块元素：<code>display: block;</code></li><li>转换为行内元素：<code>display: inline;</code></li><li>转换为行内块元素：<code>display: inline-block;</code></li></ul></li></ul><h3 id="九、CSS背景样式"><a href="#九、CSS背景样式" class="headerlink" title="九、CSS背景样式"></a>九、CSS背景样式</h3><ul><li>可以给页面元素添加背景样式</li><li>可以设置背景颜色、背景图片、背景图片平铺、背景图片位置等属性</li></ul><h4 id="9-1-背景颜色"><a href="#9-1-背景颜色" class="headerlink" title="9.1 背景颜色"></a>9.1 背景颜色</h4><ul><li><code>background-color: red;</code></li><li>属性值：<ul><li><code>transparent</code>：透明（默认）</li><li>各种颜色</li></ul></li></ul><blockquote><p><strong>背景色半透明：</strong></p><ul><li><code>background: rgba(255, 0, 0, 0.3);</code></li><li>最后一个取值介于<code>0~1</code>之间，表示透明度（<code>alpha</code>）</li><li>习惯可以将<code>0.3</code>的<code>0</code>去掉，写成<code>.3</code>也可以</li><li>只让盒子的背景色半透明，盒子内容不受影响</li><li>为<code>CSS3</code>新增，<code>IE9+</code>版本才能使用</li></ul></blockquote><h4 id="9-2-背景图片"><a href="#9-2-背景图片" class="headerlink" title="9.2 背景图片"></a>9.2 背景图片</h4><ul><li><code>background-image: none;</code></li><li>非常便于控制位置</li><li>属性值：<ul><li><code>none</code>：默认无背景图片</li><li><code>"url"</code>：图片地址</li></ul></li></ul><h4 id="9-3-背景平铺"><a href="#9-3-背景平铺" class="headerlink" title="9.3 背景平铺"></a>9.3 背景平铺</h4><ul><li><code>background-repeat: repeat;</code></li><li>背景色在图片下方</li><li>属性值：<ul><li><code>repeat</code>：平铺（默认）</li><li><code>no-repeat</code>：不平铺</li><li><code>repeat-x</code>：横向平铺</li><li><code>repeat-y</code>：纵向平铺</li></ul></li></ul><h4 id="9-4-背景图片位置"><a href="#9-4-背景图片位置" class="headerlink" title="9.4 背景图片位置"></a>9.4 背景图片位置</h4><ul><li><p><code>background-position: x y;</code></p></li><li><p>用于改变背景图片的相对位置</p></li><li><p>属性值：</p><ul><li>方位名词：<code>top/center/bottom/left/right</code>等</li><li>精确单位：百分数/浮点数和单位组成</li></ul></li><li><p><strong>注意：</strong></p><ol><li>参数时方位名词<ul><li>若指定的两个值都是方位名词，则两个值前后顺序无要求</li><li>若只指定了一个方位名词，另一个省略，则另一个默认为center</li></ul></li><li>参数是精确单位<ul><li>第一个为x坐标，第二个为y坐标，顺序严格要求</li><li>若只设定了一个数值，那么该数值一定是x坐标，y坐标默认居中</li></ul></li><li>参数是混合单位<ul><li>若两个值一个是方位名词，一个是精确坐标，前一个为x，后一个为y</li></ul></li></ol></li></ul><h4 id="9-5-背景图像固定（背景附着）"><a href="#9-5-背景图像固定（背景附着）" class="headerlink" title="9.5 背景图像固定（背景附着）"></a>9.5 背景图像固定（背景附着）</h4><ul><li><code>background-attachment: scroll;</code></li><li>设置背景图像是否固定或者随着页面其他内容滚动（可用于做视差滚动效果）</li><li>常用属性值：<ul><li><code>scroll</code>：滚动（默认）</li><li><code>fixed</code>：固定</li></ul></li></ul><h4 id="9-6-背景设置的复合写法："><a href="#9-6-背景设置的复合写法：" class="headerlink" title="9.6 背景设置的复合写法："></a>9.6 背景设置的复合写法：</h4><ul><li><code>background: background-color background-image background-repeat background-attachment background-position;</code></li><li>以上为约定俗成的顺序，没有硬性规定</li><li>示例：<code>background: red url(xx/xx/xx.img) no-repeat fixed 0 0;</code></li></ul><h3 id="十、CSS三大特性"><a href="#十、CSS三大特性" class="headerlink" title="十、CSS三大特性"></a>十、CSS三大特性</h3><ol><li><p>层叠性：各同一选择器设置相同属性样式，则后一个样式会覆盖另一个冲突的样式。（主要解决样式冲突问题）</p><ul><li>样式冲突，遵循就近原则，那个样式距离结构近就做哪个</li><li>样式不冲突则不会层叠</li></ul></li><li><p>继承性：子标签会继承父标签的某些样式，如文本颜色和字号</p><ul><li>恰当使用继承性可以简化代码</li><li>可继承的样式：<code>text-</code>、<code>font-</code>、<code>line-</code>这些开头的和<code>color</code>元素</li><li>特殊：行高的解成，若行高写的不是具体的像素而实倍数，则继承倍数，<ul><li>行高 = 倍数 × 当前字体像素</li></ul></li></ul></li><li><p>优先级：同一个元素指定多个选择器，就产生优先级</p><ul><li>选择器相同，执行层叠性（都在大的里）</li><li>选择器不同，则根据选择器权重执行</li><li>权重由4种数字组成，但不会有进位</li><li>判断等级为从左到右，永远大于！</li><li><strong>继承</strong>的权重最低，无论父级权重多高，继承永远为0</li></ul></li><li><p>选择器权重表：</p><blockquote><p>↓ 继承或*              (0，0，0，0)</p><p>↓ 标签选择器        (0，0，0，1)</p><p>↓ 类/伪类选择器   (0，0，1，0)</p><p>↓ id选择器            (0，1，0，0)</p><p>↓ 行内样式style     (1，0，0，0)</p><p>↓ <code>!improtant</code>            无限大（写在CSS的属性值里）</p><p>权重优先级的叠加问题：若为复合选择器，则有权重叠加，需要计算(会叠加，但是永不进位)</p><p>示例：</p><p><code>div ul li {}</code> -&gt; (0,0,0,3)</p><p><code>.nav ul li {}</code> -&gt; (0,0,1,2)</p><p><code>a:hover {}</code> -&gt; (0,0,1,1)</p><p><code>.nav a {}</code> -&gt; (0,0,1,1) </p></blockquote></li></ol><h3 id="十一、盒子模型"><a href="#十一、盒子模型" class="headerlink" title="十一、盒子模型"></a>十一、盒子模型</h3><ul><li>看透网页布局的本质：利用CSS摆盒子<ul><li>先准备好相关的网页元素，基本都是Box</li><li>利用CSS设置好样式，摆放到相应位置</li><li>往盒子里装内容</li></ul></li><li>盒子模型（Box-Model）的组成：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、<strong>实际内容</strong></li></ul><h4 id="11-1-Border"><a href="#11-1-Border" class="headerlink" title="11.1 Border"></a>11.1 Border</h4><ul><li>可以设置元素边框的<strong>宽度（粗细）</strong>、<strong>样式</strong>和<strong>颜色</strong></li><li>语法：<code>border: border-width border-style border-color</code></li><li><code>border-width</code>：可设置粗细，单位为<code>px</code></li><li><code>border-style</code>：设置样式<ul><li>属性值：<ul><li><code>none</code>：无边框（默认）</li><li><code>solid</code>：实线边框</li><li><code>dashed</code>：虚线边框</li><li><code>hidden</code>：隐藏边框（IE不可用）</li><li><code>double</code>：双实线边框</li><li><code>dotted</code>：点线边框</li></ul></li></ul></li><li><code>border-color</code>：设置颜色</li><li>border的复合写法（简写）：<code>border: 1px solid red;</code> 没有顺序要求</li><li>border的分开写法：<code>border-top、border-bottom、border-left、border-right</code></li><li><strong>注意：边框会影响盒子的实际大小</strong><ul><li>内容为200*200，边框为10px</li><li>则盒子实际大小为220*220</li><li>所以开发中测量时不测边框，若测量则适当减去</li></ul></li></ul><blockquote><p>表格细线边框：border-collapse控制相邻单元格边框</p><p>语法：<code>border-collapse: collapse; //边框合并</code></p></blockquote><h4 id="11-2-Padding"><a href="#11-2-Padding" class="headerlink" title="11.2 Padding"></a>11.2 Padding</h4><ul><li>设置内边距，即内容与边框的距离（上下左右同样适用）</li><li>语法：<code>padding-top/bottom/left/right = 5px;</code></li><li>padding的复合写法（简写）：<ol><li><code>padding: 5px;</code> 一个值，代表上下左右都5px</li><li><code>padding: 5px 10px;</code>两个值，代表上下5px， 左右10px</li><li><code>padding: 5px 10px 15px;</code>三个值，代表上5px， 左右10px， 下15px</li><li><code>padding: 5px 10px 15px 20px;</code> 四个值，代表上5px， 右10px，下15px，左20px</li></ol></li><li><strong>注意：padding可以实现内容与边框之间有内边距</strong><ul><li>但同时<code>padding</code>也会影响盒子大小（会撑大盒子），所以实际开发中也要做适当减小内容大小</li><li>如果盒子本身没有指定<code>width/height</code>属性，此时<code>padding</code>就不会撑开盒子</li><li>当子级标签没有指定<code>width/height</code>，则添加<code>padding</code>时，不会超过父级标签的宽度</li></ul></li></ul><h4 id="11-3-Margin"><a href="#11-3-Margin" class="headerlink" title="11.3 Margin"></a>11.3 Margin</h4><ul><li>设置外边距，即控制盒子与盒子之间的距离（上下左右同样适用）</li><li>语法：<code>margin-top/right/bottom/left: 30px;</code></li></ul><blockquote><p>典型应用：可以使块级盒子水平居中对齐</p><p>条件：1.盒子必须制定了宽度（<code>width</code>）</p><p>​            2.盒子左右边距外边距设置为<code>auto</code>即可</p><p><strong>注意：以上方法是让块级元素水平居中</strong></p><p>​            <strong>若要行内元素或者行内块元素水平居中，给其父元素添加<code>text-align:center</code>即可</strong></p></blockquote><blockquote><p><strong>嵌套块元素垂直外边距的塌陷问题</strong>：对于两个嵌套关系的块级元素，父元素上有外边距同时子元素上也有外边距，此时父元素会塌陷较大的边距值。（子元素上的外边距大于父元素的，则父元素会产生子元素相同外边距）</p><p>解决方案：1.为父元素定义上边框</p><p>​                    2.为父元素定义上内边距</p><p>​                    3.为父元素添加<code>overflow: hidden;</code>（<strong>不会让盒子变大</strong>）</p></blockquote><blockquote><p><strong>清除内外边距：</strong>网页元素很多都有默认的内外边距，不同浏览器的默认值也不同，因此在布局以前，首先要清除一下</p><p>常用方法：</p><ul><li>{</li></ul><p>​    padding: 0;  /* 清除内边距 */</p><p>​    margin: 0;  /* 清除外边距 */</p><p>}</p><p><strong>这也是我们CSS文件的第一条代码（行内元素尽量只设置左右的内边距！）</strong></p></blockquote><h4 id="11-4-（重点）圆角边框"><a href="#11-4-（重点）圆角边框" class="headerlink" title="11.4 （重点）圆角边框"></a>11.4 （重点）圆角边框</h4><ul><li><code>border-radius: length;</code></li><li>属性值：<ul><li>像素</li><li>百分比</li></ul></li><li>radius半径原理：<ul><li>以length为半径的圆与盒子四个角的重合部分形成圆角边框，像素越大，弧角越大</li></ul></li></ul><blockquote><p><strong>Tips：</strong></p><ol><li>参数值可以为数值或百分比</li><li>如果是正方形，想要个圆，数值修改为hight的一半，或写50%</li><li>如果是个举行，设置为高度的一半</li><li>该数值属性为简写属性，可以跟四个数值，以此为左上、右上、右下、左下顺序</li></ol></blockquote><h4 id="11-5-（重点）盒子阴影"><a href="#11-5-（重点）盒子阴影" class="headerlink" title="11.5 （重点）盒子阴影"></a>11.5 （重点）盒子阴影</h4><ul><li><code>box-shadow: h-shadow v-shadow blur spread color inset;</code></li><li><code>h-shadow</code>：必须写，水平阴影位置，允许负值</li><li><code>v-shadow</code>：必须写，垂直阴影位置，允许负值</li><li><code>blur</code>：可选，模糊距离</li><li><code>spread</code>：可选，阴影尺寸</li><li><code>color</code>：可选，阴影颜色</li><li><code>inset</code>：可选，将外部阴影（<code>outset</code>）改为内部阴影</li><li>其中：阴影默认时外阴影（<code>outset</code>），可以改成内阴影（<code>inset</code>），但绝对不可以写<code>outset</code>，否则阴影失效，阴影不占用空间，不会排挤其他盒子</li></ul><h4 id="11-6-文字阴影"><a href="#11-6-文字阴影" class="headerlink" title="11.6 文字阴影"></a>11.6 文字阴影</h4><ul><li><code>text-shadow: h-shadow v-shadow blur color;</code></li><li>以上属性类似于<code>box-shadow</code></li></ul><h3 id="十二、浮动Float"><a href="#十二、浮动Float" class="headerlink" title="十二、浮动Float"></a>十二、浮动Float</h3><ul><li><p>一个完整的PC网页的布局方式：标准流、浮动、定位</p></li><li><p>结：有许多布局效果，标准流无法实现，可以用浮动实现，浮动可以改变元素标签的默认排列方式。</p></li><li><blockquote><p>so：网页布局第一准则：多个块级元素纵向排列找标准流，横向排列找浮动</p></blockquote></li><li><p>浮动float用于创建浮动框，将其移动到一边，直到左边缘或者右边缘以及包含块或另一个浮动框的边缘。</p><ul><li>语法：<code>选择器 {float: 属性值;}</code></li><li>属性值：<ul><li>none：不动</li><li>left：左浮</li><li>right：右浮</li></ul></li></ul></li><li><p>浮动的特性：</p><ul><li>浮动元素会脱离标准流（脱标）</li><li>浮动元素会在一行内显示并元素顶部对齐（装不下另起一行）</li><li>浮动元素会具有行内块元素的特性</li><li>不再保留原先的位置。（会起飞，下面的位置会有新元素）</li></ul></li><li><p>浮动元素与标准流父级元素搭配使用：</p><ul><li>为了约束浮动元素的位置，采用以下策略：</li><li>先用标准流的父元素排列上下位置，之后用内部的子元素采取浮动排列左右位置，符合网页布局第一准则。</li></ul></li><li><p>浮动布局的注意点：</p><ul><li>浮动和标准流的父盒子搭配（用标准流的父元素排列上下位置，之后用内部的子元素采取浮动排列左右位置）</li><li>一个盒子里面有多个盒子，若其中一个浮动了，其他兄弟也应当浮动，以免发生问题（浮动的盒子只会影响后面的标准流，不影响前面的标准流盒子）</li></ul></li></ul><h3 id="十三、清除浮动"><a href="#十三、清除浮动" class="headerlink" title="十三、清除浮动"></a>十三、清除浮动</h3><blockquote><p><strong>为什么要清楚浮动？</strong></p><p>由于父级盒子很多情况下不方便给高度，但子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子的位置。</p><p><strong>清除浮动的本质！</strong></p><ul><li>清除浮动元素造成的影响</li><li>清除浮动后，父级就会根据浮动的子盒子检测高度自动更改高度。</li></ul></blockquote><ul><li>清除浮动： <code>选择器 {clear: 属性值};</code></li><li>属性值：<ul><li><code>left</code>：清除左侧浮动的影响</li><li><code>right</code>：清除右侧浮动的影响</li><li><code>both</code>：同时清除两侧的浮动</li></ul></li></ul><blockquote><p>实际开发中几乎只用<code>{clear: both;}</code></p><p>tips：清除浮动的策略时闭合浮动（关门让你浮动，不允许到外面去）</p></blockquote><ul><li><p>清除浮动的方法：</p><ul><li><p>额外标签法（隔墙法）：在浮动的子元素后面添加一个新标签，并给该标签设置<code>{clear: both; }</code></p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="tt">内容&lt;/div>&lt;style><span class="token class">.tt</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>或者<code>&lt;div style="clear: both;"&gt;内容&lt;/div&gt;</code></p></li><li><p><strong>注意：添加的标签元素必须是块元素</strong></p></li></ul></li><li><p>父元素添加<code>overflow</code>属性</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tt"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>tt <span class="token punctuation">{</span>    overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p><strong>注意：无法显示溢出部分</strong></p></li></ul></li><li><p>父元素添加<code>:after</code>伪元素（<strong>结构更简单，推荐使用</strong>）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="clearfix">    &lt;div>内容&lt;/div>&lt;/div>&lt;style><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>给需要清除浮动的元素添加<code>.clearfix</code>类</p></li></ul></li><li><p>给父级元素添加双伪元素（<strong>推荐</strong>）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="clearfix">    &lt;div>内容&lt;/div>&lt;/div>&lt;style><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li></ul></li></ul></li><li><p>清除浮动的条件：</p><ul><li>父级没高度</li><li>子盒子浮动了</li><li>影响后面布局了</li></ul></li></ul><blockquote><p><strong>CSS开发小知识：</strong></p><ul><li>CSS属性的书写顺序<ul><li>建议遵循以下顺序（自上而下，不强制规定）：<ul><li>布局定位属性：<code>desplay/position/float/clear/visibility/overflow等</code></li><li>自身属性：<code>width/height/margin/padding/border/background等</code></li><li>文本属性：<code>color/font/text-decoration/text-align/vertical-align等</code></li><li>其他属性：<code>content/cursor/border-radius/box-shadow等</code></li></ul></li></ul></li><li>页面布局整体思路<ol><li>确定页面的版心（可视区），可测量得知（中间一大块的宽度）。</li><li>分析页面中的行模块，以及每个行模块中的列模块（第一准则）。</li><li>一行中的列模块经常用浮动布局，确定列的大小和位置（第二位置）。</li><li>制作HTML结构，现有结构后有样式，结构最重要。</li><li>先理清布局结构，在写代码（经验）。</li></ol></li><li>制作导航栏注意：<ul><li>实际开发中不会直接用<code>&lt;a&gt;</code>标签，而是用<code>li标签包裹a标签</code>的形式(<code>&lt;li&gt;&lt;a href="#"&gt;&lt;/li&gt;</code>)</li><li><code>li+a</code>语义更清晰</li><li><strong>直接用<code>&lt;a&gt;</code>，易被搜索引擎辨别为有堆砌关键字嫌疑，有降权风险，从而影响网页排名。</strong></li></ul></li></ul></blockquote><h3 id="十四、CSS定位"><a href="#十四、CSS定位" class="headerlink" title="十四、CSS定位"></a>十四、CSS定位</h3><ul><li><p>可以让盒子自由的在某个盒子内移动或固定在屏幕上，并且可以压住其他盒子。（将盒子定在某一位置，即摆放盒子，按定位的方式移动盒子）</p></li><li><blockquote><p>定位 = 定位模式 + 边偏移</p></blockquote></li></ul><h4 id="14-1-定位模式"><a href="#14-1-定位模式" class="headerlink" title="14.1 定位模式"></a>14.1 定位模式</h4><ul><li>通过CSS的<code>position</code>属性设置</li><li>属性值：<ul><li><code>static</code>：静态定位</li><li><code>relative</code>：相对定位</li><li><code>absolute</code>：绝对定位</li><li><code>fixed</code>：固定定位</li></ul></li></ul><h5 id="14-1-1-静态定位static"><a href="#14-1-1-静态定位static" class="headerlink" title="14.1.1 静态定位static"></a>14.1.1 静态定位static</h5><ul><li>语法：<code>选择器 {position: static;}</code></li><li>默认定位，即无定位</li><li>static按照标准流特性摆放盒子，没有偏移，很少使用</li></ul><h5 id="14-1-2-相对定位relative"><a href="#14-1-2-相对定位relative" class="headerlink" title="14.1.2 相对定位relative"></a>14.1.2 相对定位relative</h5><ul><li>语法：<code>选择器 {position: relative;}</code></li><li>相对于原位置来移动</li><li>移动时参照自己原来的位置，原来标准流位置继续占有，不脱标</li><li>典型应用：给绝对定位当”爹“</li></ul><h5 id="14-1-3-绝对定位absolute"><a href="#14-1-3-绝对定位absolute" class="headerlink" title="14.1.3 绝对定位absolute"></a>14.1.3 绝对定位absolute</h5><ul><li>语法：<code>选择器 {position: absolute;}</code></li><li>相对于最近的有定位的祖先元素移动位置</li><li>如果没有祖先元素，或者祖先元素没有定位，则以浏览器为准定位</li><li>若祖先元素有定位（相对、绝对、固定），则以最近一级有定位祖先元素为准定位</li><li>绝对定位不在占有原先位置（脱标）</li></ul><blockquote><p>布局口诀：<strong>子绝父相</strong>，即子元素用<code>absolute</code>，父元素用<code>relative</code>（大多数情况适用）</p></blockquote><h5 id="14-1-4-固定定位fixed"><a href="#14-1-4-固定定位fixed" class="headerlink" title="14.1.4 固定定位fixed"></a>14.1.4 固定定位fixed</h5><ul><li>语法：<code>选择器 {position: fixed;}</code></li><li>固定于浏览器可视区的某个位置</li><li>以浏览器可视窗口为参照点移动元素（与父元素无关）</li><li>脱标，不占有原来的标准流位置</li></ul><blockquote><p>Tips：让元素固定定位于版心右侧</p><ul><li>小算法：<ol><li>让盒子（固定定位）<code>left: 50%</code>（走到浏览器版心的一半）</li><li>让该盒子再走<code>margin-left: 版心宽度的一半;</code>即可</li></ol></li></ul></blockquote><h5 id="14-1-5-粘性定位sticky"><a href="#14-1-5-粘性定位sticky" class="headerlink" title="14.1.5 粘性定位sticky"></a>14.1.5 粘性定位sticky</h5><ul><li><p>语法：<code>选择器 {position: sticky;}</code></p></li><li><p>可以认为是相对定位和固定定位的混合</p></li><li><p>以浏览器可视区域作为参照点移动（fixed特点）</p></li><li><p>占有原先的位置，不脱标（relative特点）</p></li><li><p>必须添加<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>中的一个才会有效</p></li></ul><h4 id="14-2-边偏移"><a href="#14-2-边偏移" class="headerlink" title="14.2 边偏移"></a>14.2 边偏移</h4><ul><li>盒子移动的最终位置，分四个属性：<code>top</code>,<code>right</code>,<code>bottom</code>,<code>right</code></li><li><code>top: 80px; </code>-&gt; 顶端偏移量，元素相对于父元素上边线的距离为<code>80px</code></li><li><code>left: 70px;</code>-&gt; 左侧偏移量，元素相对于父元素左边线的距离<code>70px</code></li><li><code>right: 60px;</code>-&gt; 右侧偏移量，元素相对于父元素右边线的距离<code>60px</code></li><li><code>bottom: 50px;</code>-&gt; 底部偏移量，元素相对于父元素下边线的距离<code>50px</code></li></ul><h4 id="14-3-定位的叠放次序"><a href="#14-3-定位的叠放次序" class="headerlink" title="14.3 定位的叠放次序"></a>14.3 定位的叠放次序</h4><ul><li>使用定位布局时，可能出现盒子重叠与理想状态不一致的现象，可以用<code>z-index</code>属性来解决</li><li>语法： <code>选择器 {z-index: 9;}</code></li><li>属性值：<ul><li>可以为正、负、0、auto</li><li>auto为自动默认，值越大越靠外层。</li><li>值相同时按照盒子的先后顺序，后来居上</li><li><strong>数值不可以带单位！</strong></li></ul></li></ul><blockquote><p><strong>定义的拓展知识</strong></p><ol><li><p>绝对定位absolute盒子水平居中：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">-</span><span class="token punctuation">(</span>盒子宽度的一半<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>垂直居中同理</p></li></ul></li><li><p>定位的特殊性质：</p><ul><li>行内元素添加<code>absolute</code>或者<code>fixed</code>后，可以设置宽高</li><li>块级元素添加<code>absolute</code>或者<code>fixed</code>后，默认大小为内容大小（不给宽高的前提下）</li></ul></li><li><p>脱标的盒子不会触发外边距塌陷（浮动，绝对定位，相对定位）</p></li><li><p>绝对定位/相对定位脱标与浮动的脱标有所不同：</p><ul><li>定位的脱标：压住盒子和部分文字内容</li><li>浮动的脱标：指挥完全压住盒子，但不会压住盒子的内容（文字环绕）</li></ul></li></ol></blockquote><h3 id="十五、元素的显示与隐藏"><a href="#十五、元素的显示与隐藏" class="headerlink" title="十五、元素的显示与隐藏"></a>十五、元素的显示与隐藏</h3><ul><li>display属性（<strong>应用广泛，重要</strong>）：<ul><li>用于设置一个元素如何显示，也可以将元素进行隐藏</li><li>语法：<code>选择器 {display: none;}</code></li><li>属性值：<ul><li><code>none</code>：隐藏元素，且不占有原位置（脱标）</li><li><code>block</code>：显示元素，将元素转为块级元素</li></ul></li></ul></li><li>visibility：<ul><li>指定一个元素可见还是隐藏</li><li>语法：<code>选择器 {visibility: visible;}</code></li><li>属性值：<ul><li><code>visible</code>：元素可见</li><li><code>hidden</code>：元素隐藏，保留原位置（不脱标）</li></ul></li></ul></li><li>overflow溢出<ul><li>内容溢出元素框时操作设定</li><li>语法：<code>选择器 {overflow: hidden;}</code></li><li>属性值：<ul><li><code>visible</code>：显示</li><li><code>hidden</code>：隐藏</li><li><code>scroll</code>：滚动条显示</li><li><code>auto</code>：自动选择(在<code>visible</code>和<code>scroll</code>中)</li></ul></li><li><strong>注意：有定位的盒子慎用<code>overflow:hidden;</code>因为会将超出的内容全部隐藏</strong></li></ul></li></ul><h3 id="十六、CSS提高部分"><a href="#十六、CSS提高部分" class="headerlink" title="十六、CSS提高部分"></a>十六、CSS提高部分</h3><h4 id="16-1-CSS精灵技术sprites（精灵图、雪碧图）"><a href="#16-1-CSS精灵技术sprites（精灵图、雪碧图）" class="headerlink" title="16.1 CSS精灵技术sprites（精灵图、雪碧图）"></a>16.1 CSS精灵技术sprites（精灵图、雪碧图）</h4><ul><li>优势：有效减少服务器接收和发送请求的次数，提高页面的加载速度</li><li>核心原理：将网页中的一些小的背景图片整合到一张大图中，这样服务器只需要请求一次即可</li><li>Sprites精灵图的使用：<ul><li>主要针对背景图像</li><li>整合的大图城卫精灵图或者雪碧图（雪碧包装上写的英文就是sprites）</li><li>移动背景图位置，可以用<code>background-position</code></li><li>移动的距离就是图片的x和y坐标（<strong>以左上角为远点，x轴向右为正方向，y轴向下为正方向</strong>）</li><li>一般情况下，图片向左/向上都是负值</li><li><strong>图片的大小和位置需要精确测量</strong></li></ul></li></ul><h4 id="16-2-字体图标"><a href="#16-2-字体图标" class="headerlink" title="16.2 字体图标"></a>16.2 字体图标</h4><ul><li><p>显示网页中的一些通用、常用的小图标（展示的是图标，本质是字体）</p></li><li><p>优势：</p><ul><li>轻量级：本质是字体，小，减少服务器请求数据（字体由浏览器自己渲染，不需要向服务器请求）</li><li>灵活性：因为本质是文字，所以可以通过CSS修改颜色、阴影和透明效果等等</li><li>兼容性：几乎支持所有的浏览器</li></ul></li><li><p><strong>注意</strong>：字体图标只对部分小图片有着提升和优化，无法完全取代<strong>精灵技术</strong></p></li><li><p>字体图标的使用：</p><ul><li><p>字体图标是网页中常见的小图标，可以在网上下载</p><ul><li>字体图标下载<ul><li><a href="https://icomoon.io/">icomoon</a></li><li><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li></ul></li></ul></li><li><p>字体图标下载使用流程（<strong>icomoon为例</strong>）：</p><ol><li><p>将解压出的<code>fonts</code>文件夹复制到<code>HTML根目录</code>下（内涵兼容的4种字体，不可乱动）</p></li><li><p>字体声明：在<code>&lt;style&gt;</code>中复制压缩包里的<code>style.css</code>的第一大段代码，即声明（注意路径问题）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?cjoxil')</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?cjoxil#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.ttf?cjoxil')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.woff?cjoxil')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.svg?cjoxil#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>打开解压出的文件里的demo.html文件，将图片后的”口“小方框复制到要使用的位置（”口“即字体图标）</p></li><li><p>在<code>&lt;style&gt;</code>标签里给引用字体图标的元素指定字体，即第二步中声明代码里的第一条</p><ul><li><code>选择器 {font-family: 'icomoon';}</code></li></ul></li></ol><blockquote><p><strong>字体图标不够用了怎么办？怎么添加新的？</strong></p><ol><li>将旧文件夹中的<code>selected.json</code>文件上传到<code>icomoon主页</code> -&gt; <code>右上角ICOMOONAPP</code> -&gt; <code>左上角Import Icons</code>中去（选Y）</li><li>选择需要增加的字体图标（旧图标仍然存在）</li><li>重新下载下面的压缩包 -&gt; 解压替换原文件夹，并将里面新的fonts文件夹复制到HTML根目录替换即可</li></ol></blockquote></li></ul></li></ul><h4 id="16-3-CSS用户界面样式"><a href="#16-3-CSS用户界面样式" class="headerlink" title="16.3 CSS用户界面样式"></a>16.3 CSS用户界面样式</h4><ul><li>更改用户的鼠标样式</li><li>表单轮廓</li><li>防止表单域拖拽</li></ul><h5 id="16-3-1-鼠标样式"><a href="#16-3-1-鼠标样式" class="headerlink" title="16.3.1 鼠标样式"></a>16.3.1 鼠标样式</h5><ul><li>语法：<code>li {cursor: pointer;}</code></li><li>设置或检索在对象上移动的鼠标指针采用何种光标形状</li><li>属性值：<ul><li><code>default</code>：小白（默认样式）</li><li><code>pointer</code>：小手</li><li><code>move</code>：移动十字架</li><li><code>text</code>：文本框（I）</li><li><code>not-allowed</code>：禁止</li></ul></li></ul><h5 id="16-3-2-轮廓线"><a href="#16-3-2-轮廓线" class="headerlink" title="16.3.2 轮廓线"></a>16.3.2 轮廓线</h5><ul><li>语法：<code>input {outline: none;}</code></li><li>常用属性值：<ul><li><code>none</code>/<code>0</code>：去除轮廓线</li></ul></li></ul><h5 id="16-3-3-表单域防拖拽"><a href="#16-3-3-表单域防拖拽" class="headerlink" title="16.3.3 表单域防拖拽"></a>16.3.3 表单域防拖拽</h5><ul><li>语法：<code>textarea {resize: none;}</code></li></ul><h5 id="16-3-4-vertical-align应用"><a href="#16-3-4-vertical-align应用" class="headerlink" title="16.3.4 vertical-align应用"></a>16.3.4 <code>vertical-align应用</code></h5><ul><li>语法：<code>vertical-align: baseline;</code></li><li>用于设置图片或表单与文字<strong>垂直对齐</strong></li><li>常用属性值：<ul><li><code>baseline</code>：元素放在父元素基线上</li><li><code>top</code>：顶端与行中最高元素顶端对齐</li><li><code>middle</code>：此元素放在父元素中部对齐</li><li><code>bottom</code>：顶端与行中最低元素的顶端对齐</li></ul></li><li><strong>注意：只针对行内元素和行内块元素有效</strong></li></ul><h4 id="16-4-图片底部有空白缝隙解决方法："><a href="#16-4-图片底部有空白缝隙解决方法：" class="headerlink" title="16.4 图片底部有空白缝隙解决方法："></a>16.4 图片底部有空白缝隙解决方法：</h4><ul><li>给图片添加<code>vertical-align: middle/bottom/top;</code>等即可(<strong>推荐方案</strong>)</li><li>把元素转换为块元素：<code>display: block;</code></li></ul><h4 id="16-5-溢出的文字用省略号显示"><a href="#16-5-溢出的文字用省略号显示" class="headerlink" title="16.5 溢出的文字用省略号显示"></a>16.5 溢出的文字用省略号显示</h4><ul><li><p>单行文本溢出省略号显示：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token punctuation">{</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> // 强制一行内显示    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  //超出部分文字隐藏    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  // 隐藏部分省略号代替<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>多行文本溢出省略号显示：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> // 溢出部分隐藏    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> // 用省略号代替    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span> // 弹性伸缩盒子模型显示    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> // 限制一个块元素显示的文本行数为<span class="token number">2</span>行    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span> // 检索伸缩盒子子元素的排列方式<span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>兼容性：适合webkit浏览器或移动端</strong>（尽量让后端人员去写）</p></li></ul><h3 id="十七、CSS常见的布局技巧"><a href="#十七、CSS常见的布局技巧" class="headerlink" title="十七、CSS常见的布局技巧"></a>十七、CSS常见的布局技巧</h3><ul><li><code>margin</code>的负值运用：<ul><li>运用margin负值消除2倍边框的问题</li><li>运用定位解决边框被压住的问题（相对定位）</li><li>若周围盒子都有定位，可用<code>z-index</code>提层</li></ul></li><li>文字围绕浮动元素：<ul><li>浮动元素不会压住文字，巧妙运动可以实现文字围绕浮动元素的效果，布局更轻松</li></ul></li><li>行内块元素巧用：<ul><li>对父元素添加<code>text-align: center;</code> 可以实现水平居中子元素（先转为行内块元素）</li></ul></li></ul><blockquote><p><strong>~最后的叭叭~</strong></p><ul><li>CSS初始化<ul><li>不同浏览器对有些标签的默认值不同，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，需要对CSS初始化，重设浏览器的样式（也称<code>CSS reset</code>）</li></ul></li><li>Unicode编码字体：<ul><li>把中文名称字体用相应的Unicode编码代替，可以有效避免浏览器解释CSS代码时出现乱码的问题</li><li>黑体：\9ED1\4F53</li><li>宋体：\5B8B\4F53</li><li>微软雅黑：\5FAE\8F6F\96C5\9ED1</li></ul></li></ul></blockquote><p>————————————————————无情的分割线——————————————————————-</p><blockquote><p>EagleH有话说：<br>这篇笔记是在学习CSS时记在笔记本上的，花时间将它整理到了博客上，内容上可能有所欠缺，而且本文以及另一篇HTML的笔记里，是不包含HTML5和CSS3的新增部分，H5C3的学习笔记会单独更新出来~~~~~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="2021/02/10/html-xue-xi-bi-ji/"/>
      <url>2021/02/10/html-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：作为一名即将毕业的普通大四学生，面对未来一片迷茫，回想一下大学四年下来，似乎除了享受无边无际的大学生活，随着时间流逝，在最后关头即将毕业才发现自己一无所有。面临毕业即失业的问题，花时间认真思考了一下自己的未来和兴趣，在做毕业设计的过程中，发现自己对所学专业的工作并不是非常喜欢，反而偶然接触到了前端，在学习过程中感觉时间飞快，最终选择了从web前端入手，趁着自己还年轻，还保有学习的热情，以及浓密的头发，开启了一名小白踏足IT的求学之路</p></blockquote><h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-1-什么是计算机语言"><a href="#1-1-什么是计算机语言" class="headerlink" title="1.1 什么是计算机语言"></a>1.1 什么是计算机语言</h4><ul><li>计算机语言是人与计算机进行通讯的语言</li><li>计算机语言分为三大类：<ul><li>机器语言：由“<code>0</code>”和“<code>1</code>”构成的二进制编码，供计算机阅读和识别</li><li>汇编语言：控制计算机的指令，有固定的格式和词汇（英文缩写）</li><li>高级语言：供开发者学习，灵活运用指令控制计算机实现需求的语言（<code>C</code>，<code>C++</code>，<code>JAVA</code>，<code>Python</code>，<code>PHP</code>，<code>JavaScript </code>等）</li></ul></li></ul><h4 id="1-2-什么是Web网页"><a href="#1-2-什么是Web网页" class="headerlink" title="1.2 什么是Web网页"></a>1.2 什么是Web网页</h4><ul><li><p>网页的基本组成：通常由<strong>图片</strong>、<strong>文字</strong>、<strong>音频</strong>等元素构成，常以<code>.html</code>或者<code>.htm</code>文件格式的形式存在</p></li><li><p>HTML：<strong>超文本标记语言</strong>，用于创建网页，可加入多种元素，也可以添加超链接。</p></li><li><p>常用的浏览器：</p><ul><li>IE</li><li>火狐（FireFox）</li><li>谷歌（Chrome）</li><li>Safari</li><li>Opera</li></ul></li></ul><h4 id="1-3-Web标准"><a href="#1-3-Web标准" class="headerlink" title="1.3 Web标准"></a>1.3 Web标准</h4><ul><li>Web标准的三大组成部分：<ul><li><strong>结构</strong>（Structure）：用于对<strong>网页元素</strong>进行整理和分类</li><li><strong>表现</strong>（Presentation）：用于设置网页元素的<strong>版式</strong>、<strong>颜色</strong>、<strong>大小</strong>等外观样式</li><li><strong>行为</strong>（Behavior）：网页模型的<strong>定义</strong>以及<strong>交互</strong>的编写</li></ul></li></ul><h3 id="二、HTML标签"><a href="#二、HTML标签" class="headerlink" title="二、HTML标签"></a>二、HTML标签</h3><h4 id="2-1-书写规范"><a href="#2-1-书写规范" class="headerlink" title="2.1 书写规范"></a>2.1 书写规范</h4><ul><li>所有标签都应当写在 <code>&lt; &gt;</code> 之中，且大部分标签都应当成对出现，成为<strong>双标签</strong>，一些特殊标签单独出现，成为<strong>单标签</strong><br>双标签如：<code>&lt;html&gt;&lt;/html&gt;</code> 、<code>&lt;head&gt;&lt;/head&gt;</code> 等<br>单标签如：<code>&lt;input /&gt;</code>、<code>&lt;br /&gt;</code>等</li></ul><h4 id="2-2-标签关系"><a href="#2-2-标签关系" class="headerlink" title="2.2 标签关系"></a>2.2 标签关系</h4><ul><li><p>包含关系：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>并列关系</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="2-3-基本结构"><a href="#2-3-基本结构" class="headerlink" title="2.3 基本结构"></a>2.3 基本结构</h4><ul><li><code>&lt;html&gt;&lt;/html&gt;</code>HTML标签<br>页面中最大的标签，称为根标签</li><li><code>&lt;head&gt;&lt;/head&gt;</code>文档头部标签<br>注意：在head标签中一定要设置<strong>title</strong>标签</li><li><code>&lt;title&gt;&lt;/title&gt;</code>文档标题标签<br>让页面拥有一个属于自己的标题</li><li><code>&lt;body&gt;&lt;/body&gt;</code>文档主体标签<br>包含文档的所有内容，页面内容都在<strong>body</strong>中</li></ul><h3 id="三、-基本标签"><a href="#三、-基本标签" class="headerlink" title="三、 基本标签"></a>三、 基本标签</h3><h4 id="3-1-标题标签"><a href="#3-1-标题标签" class="headerlink" title="3.1 标题标签"></a>3.1 标题标签</h4><p>HTML提供了六种标签，重要性最强依次下降，都为<strong>双标签</strong></p><ul><li><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre></li><li><p>示例：</p><h1>一级标题</h1><h2>二级标题</h2><h3>三级标题</h3><h4>四级标题</h4><h5>五级标题</h5><h6>六级标题</h6><p><br><br></p></li></ul><h4 id="3-2-段落标签-lt-p-gt-lt-p-gt"><a href="#3-2-段落标签-lt-p-gt-lt-p-gt" class="headerlink" title="3.2 段落标签<p></p>"></a>3.2 <strong>段落标签</strong><code>&lt;p&gt;&lt;/p&gt;</code></h4><ul><li><p>将文字分成段落</p></li><li><p>特点：</p><ul><li><p>双标签</p></li><li><p>文本会根据窗口大小自动换行</p></li><li><p>段落之间保有空隙</p></li></ul></li></ul><h4 id="3-3-换行标签-lt-br-gt"><a href="#3-3-换行标签-lt-br-gt" class="headerlink" title="3.3 换行标签<br />"></a>3.3 <strong>换行标签</strong><code>&lt;br /&gt;</code></h4><ul><li>特点：<ul><li>单标签</li><li>只是另起一行，没有间隙</li></ul></li></ul><h4 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h4><p>  为文本设置<strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>等效果</p><ul><li><strong>加粗</strong><ul><li><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></li></ul></li><li><em>倾斜</em><ul><li><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></li></ul></li><li><u>下划线</u><ul><li><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></li></ul></li><li><s>删除线</s><ul><li><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></li></ul></li><li>注意：都推荐使用前者，<strong>语义</strong>突出更强烈</li></ul><h4 id="3-5-盒子标签"><a href="#3-5-盒子标签" class="headerlink" title="3.5 盒子标签"></a>3.5 盒子标签</h4><ul><li><code>&lt;div&gt;&lt;/div&gt;</code><br>类似于大盒子，独占一行，后面无法跟随内容</li><li><code>&lt;span&gt;&lt;/span&gt;</code><br>小盒子，一行可以放置多个</li><li>没有语义，仅用于装内容</li></ul><h4 id="3-6-图像标签"><a href="#3-6-图像标签" class="headerlink" title="3.6 图像标签"></a>3.6 图像标签</h4><ul><li><code>&lt;img src="URL"&gt; </code></li><li><code>src </code>为图像标签的路径属性<ul><li>相对路径：图片相对于HTML页面文件的位置<ul><li>同一级：位于相同文件夹</li><li>上一级：位于HTML的上一级文件夹</li><li>下一级：位于HTML的下一级文件夹</li></ul></li><li>绝对路径：目录下的绝对位置，可以直接找到</li></ul></li><li>其他属性<ul><li><code>alt</code> 替换文本，当图像无法正常显示时可用文字替换</li><li><code>title </code>提示文本，用于显示文字提示</li><li><code>width/height</code> 图像宽度/高度，仅设置一个可以实现等比例缩放</li><li><code>border </code>图像边框粗细，一般采用CSS修改</li></ul></li><li>注意：其他属性必须写在<code>src</code>后面，采用<strong>键值对</strong>的形式，且每个属性之间必须保留空格</li></ul><h4 id="3-7-超链接标签"><a href="#3-7-超链接标签" class="headerlink" title="3.7 超链接标签"></a>3.7 超链接标签</h4><ul><li><code>&lt;a href="跳转目标URL" target="目标打开方式"&gt;文本或图像\&lt;/a&gt;</code></li><li>属性：<ul><li><code>href</code>：目标地址，<strong>必须属性</strong>，标签应用后可进行超链接动作</li><li><code>target</code>：链接打开方式<ul><li><code>_self </code>为默认值，在同一个网页界面打开</li><li><code>_blank</code>，新窗口打开</li></ul></li></ul></li><li>超链接分类<ul><li>外部链接：用于链接外部网站，<code>href</code>属性值以<code>http://</code>开头</li><li>内部链接：网站内部页面之间的链接，直接链接名称即可</li><li>空链接：没有确定的链接目标时，以空链接形式代替，<code>href="#"</code></li><li>下载链接：<code>href</code>内容为文件或者压缩包时，跳转链接会下载该文件</li><li>网页元素链接：对网页中的各种元素添加超链接</li><li>锚点链接：可以快速定位到页面中的某个位置<ul><li>第一步：在<code>href</code>属性中设置为<code>#</code>名字的形式，如<code>&lt;a href="#two"&gt;第三集&lt;/a&gt;</code></li><li>第二部：给目标位置添加一个<code>id</code>属性，如<code>&lt;h3 id="two"&gt;</code></li></ul></li></ul></li></ul><h4 id="3-8-注释"><a href="#3-8-注释" class="headerlink" title="3.8 注释"></a>3.8 注释</h4><ul><li><code>&lt;!--注释文本--&gt;</code></li><li>内容给程序员看，内容不执行并且不会显示到页面当中</li></ul><h4 id="3-9-特殊字符：一些字符不方便使用，用以下代码代替"><a href="#3-9-特殊字符：一些字符不方便使用，用以下代码代替" class="headerlink" title="3.9 特殊字符：一些字符不方便使用，用以下代码代替"></a>3.9 特殊字符：一些字符不方便使用，用以下代码代替</h4><ul><li>空格（ ）：<code>&amp;nbsp; </code> <strong>常用</strong></li><li>小于号（&lt;）: <code>&amp;lt;</code>  <strong>常用</strong></li><li>大于号（&gt;）: <code>&amp;gt;</code>  <strong>常用</strong></li><li>与号（&amp;）: <code>&amp;amp;</code></li><li>人民币（￥）: <code>&amp;yen;</code></li><li>版权（©）:<code> &amp;copy;</code></li><li>注册商标（®）: <code>&amp;reg;</code></li><li>摄氏度（°）: <code>&amp;deg;</code></li><li>正负号（±）:<code> &amp;plusmn;</code></li><li>乘号（×）: <code>&amp;times;</code></li><li>除号（÷）: <code>&amp;divide;</code></li><li>平方（²）: <code>&amp;sup2;</code></li><li>立方（³）: <code>&amp;sup3;</code></li></ul><h4 id="3-10-表格标签"><a href="#3-10-表格标签" class="headerlink" title="3.10 表格标签"></a>3.10 表格标签</h4><ul><li><p>用于显示和展示数据，使可阅读性更好、更清晰。</p></li><li><p>基本语法：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>                     //用于定义表格的标签  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                    //定义表格中的行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    //定义每行中的每个单元格        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><code>&lt;th&gt;&lt;/th&gt;</code>表示HTML表格的<strong>表头部分</strong>，以显示特殊，会<strong>剧中加粗</strong></p></li><li><p>表格属性（<strong>不常用，以后用css修改</strong>）：</p><ul><li><code>align</code>：表格对齐方式，属性值有：<code>left(靠左对齐)</code>，<code>center(居中对齐)</code>，<code>right(靠右对齐)</code></li><li><code>border</code> ：规定边框有无，属性值有：<code>1</code>或<code> " "</code></li><li><code>cellpadding</code>：单元格沿边与内容之间的空白，默认<strong>1像素</strong></li><li><code>cellspacing</code>：单元格之间的空白，默认<strong>2像素</strong></li><li><code>width</code>：表格宽度（属性值为<strong>百分比</strong>或者<strong>像素</strong>）</li></ul></li><li><p>表格结构标签（<strong>放在<code>&lt;table&gt;&lt;/table&gt;</code>之间</strong>）：</p><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>表头区域</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>表体区域</li></ul></li><li><p>合并单元格：</p><ul><li>方式：<ul><li>跨行合并：<code>rowspan = "合并的个数"</code></li><li>跨列合并：<code>colspan = "合并的个数"</code></li></ul></li><li>目标单元格：<ul><li>跨行：最上面写入合并代码</li><li>跨列：最左面写入合并代码</li></ul></li></ul></li></ul><h4 id="3-11-列表标签"><a href="#3-11-列表标签" class="headerlink" title="3.11 列表标签"></a>3.11 列表标签</h4><ul><li><p>主要用于排列布局，特点：整齐、整洁、有序、使用自由方便</p></li><li><p><strong>无序列表</strong></p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     //表示无序列表，以项目符号呈现列表项，内部只能放置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        // 定义列表项，各列表之间没有顺序之分，内部可放元素    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><ul><li><p>有序列表</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                     //表示有序列表，排列艺术字显示，内部只放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>自定义列表</strong></p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>                    //定义描述列表，内部只放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>定义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>            //定义项目/名字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        //描述该项目/名字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>为并列关系，内部都可以放元素</p></li></ul></li><li><p>注意：</p><ol><li>学会何时使用无序列表、自定义列表（标题+说明 时使用自定义）</li><li>无序列表和自定义列表的代码写法</li><li>布局方式用css操作</li></ol></li></ul><h4 id="3-12-表单标签"><a href="#3-12-表单标签" class="headerlink" title="3.12 表单标签"></a>3.12 表单标签</h4><ul><li><p>用于收集用户信息</p></li><li><p>表单域：包含表单元素的区域，用<code>&lt;form&gt;</code>定义，包含以下属性：</p><ul><li><code>&lt;action&gt;</code>：接收和处理表单的服务器<code>&lt;url&gt;</code></li><li><code>&lt;method&gt;</code>：表单提交方式，分<code>get</code>和<code>post</code></li><li><code>&lt;name&gt;</code>：指定表单名称，区分多个表单</li></ul></li><li><p>表单控件/元素：</p><ul><li><p><code>input</code>输入：<code>&lt;input&gt;</code>为单标签，type属性值指定控件类型</p></li><li><p><code>select</code>下拉：为了节约空间，从多个中选一个</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对select中至少包含一对<code>&lt;option&gt;</code>，且当某个<code>selected = "selected"</code>时即为默认选项</p></li></ul></li><li><p><code>textarea</code>文本域：需要输入大量文本内容时使用</p><ul><li><code>&lt;textarea&gt;内容&lt;/textarea&gt;</code></li></ul></li></ul></li></ul><h4 id="3-13-表单标签拓展"><a href="#3-13-表单标签拓展" class="headerlink" title="3.13 表单标签拓展"></a>3.13 表单标签拓展</h4><ul><li><code>&lt;input&gt;</code>拓展</li></ul><ol><li>input的type属性值：<ul><li><code>text</code>：文本框，输入内容可见</li><li><code>password</code>：密码框，输入内容不可见</li><li><code>radio</code>：单选按钮，可实现单选，需要有<code>name</code>属性</li><li><code>checkbox</code>：多选按钮，可实现多选</li><li><code>submit</code>：提交按钮，将表单提交到服务器</li><li><code>reset</code>：重置表单的所有元素</li><li><code>button</code>：点击按钮，不提交数据，只做动作</li><li><code>file</code>：定义输入字段和浏览器按钮，共文件上传使用</li></ul></li><li><code>name</code>属性值：程序员自起，用于区分数据</li><li><code>value</code>：自定义，规定元素的值</li><li><code>checked</code>：属性值为checked，规定首次加载时自动被选中</li><li><code>maxlength</code>：值为正整数，规定输入的内容最大的长度</li></ol><ul><li>注意：<code>name</code>和<code>value</code>是供内部人员使用，用户无法知晓，所以每个<code>&lt;input&gt;</code>都应当有用这两个属性</li></ul><h4 id="3-14-lt-label-gt-标签"><a href="#3-14-lt-label-gt-标签" class="headerlink" title="3.14 <label>标签"></a>3.14 <code>&lt;label&gt;</code>标签</h4><ul><li><p>input的元素定义标注，改善用户体验</p></li><li><p>绑定一个表单元素，点击到文本时自动定位到元素中</p></li><li><p>语法：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p><code>id</code>和<code>for</code>相对应即可</p></li></ul></li></ul><h3 id="四、查阅文档"><a href="#四、查阅文档" class="headerlink" title="四、查阅文档"></a>四、查阅文档</h3><p>推荐网站：</p><ul><li><p><a href="https://www.baidu.com/">百度</a></p></li><li><p><strong>推荐</strong><a href="https://www.w3school.com.cn/">W3C</a></p></li><li><p><strong>权威</strong><a href="https://developer.mozilla.org/zh-CN/">MDN</a></p><p>对于不懂得相关代码，或者要学习其他的前端知识，都可以在以上网站中进行搜索和查询</p></li></ul><blockquote><p>我是Eagle，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业季我想说的话</title>
      <link href="2021/02/09/gan-kun-wei-ding-ni-wo-jie-shi-hei-ma/"/>
      <url>2021/02/09/gan-kun-wei-ding-ni-wo-jie-shi-hei-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="乾坤未定-你我皆是黑马"><a href="#乾坤未定-你我皆是黑马" class="headerlink" title="乾坤未定 你我皆是黑马"></a>乾坤未定 你我皆是黑马</h1><p>大学生活绚烂纷扰，等到临近毕业终日忙于毕业设计，才知道大学四年没有提前铺垫是多么可惜。大四过半，整日没有课程，却学的比以往更加认真，手头毕业设计是大学的最终考验，却也是就业前的最后希望。</p><p>像我这样的人，高中“应试教育”压迫出来的积极性随着大学生活的“放养”逐渐消磨殆尽，张嘴便是本来以前如何，只是现在怎样。搪塞他人，也是麻醉自己。</p><p>这些天，因为一些原因，开始审视自己，开始抱怨自己，开始自暴自弃。直到最近看到了一段视频，里面有段独白我印象颇深：</p><blockquote><p>“Unless they lead to good actions. Nobody ever had their life change by somebody hoping.</p></blockquote><p>所以在忙毕业设计之余，想写点东西激励自己，想不到好名字，就引用喜欢的一句话来做标题：</p><blockquote><p>乾坤未定，你我皆是黑马。</p></blockquote><p>没有人是生来就所向披靡，优秀的人之所以优秀，因为他们付出了配得上优秀的努力。同样是十余年的寒窗苦读，不论曾经走马观花还是披风戴雨，你怎能就此甘拜下风！本来可以很了不起，生命不息，时间还有余力，现在也来得及。总是喜欢在嘴上挂着：“认真你就输了。”其实一直认真你就赢了，毕竟放弃不难，但是坚持超酷。</p><p>可能绝大部分人都会被“天生我材必有用”洗脑，总有推文说：每个人都有自己的价值。其实对于我们来说，我们的价值高低，在遭遇诱惑的一瞬间就即将被决定。你可能会遭遇低谷，面临绝境，但你应该庆幸不会更糟，如果事与愿违，请相信人生一定另有安排。如果没有人扶你，那请你自己爬起来，只要迈向阳光，黑暗就永远跟不上你。</p><p>从现在开始，尝试着慢慢改变，不需一蹴而就，但求步步为营。不要担心看不到进步，人生在为你铭刻生平，凡事到最后必定是皆大欢喜，如果没有，那一定是没有到最后。因为，无论多么崇峻的高山，总是会为攀登的人留下一条山脊。</p><p>人生的痛苦有两种，一种是自律的痛苦，一种是后悔的痛苦。每天起床闹钟提前一点，每天游戏时间少花一点，每天出去多运动一点，每天饭吃的更准时一点，每天自律一点，每天就能变得更好不止一点。</p><p>不要在对自己说我想做这个我想做那个我想做什么什么！<br>问问自己，你为什么还没做呢？</p><p>不要再想着等我有了什么我就能做什么，也不要想着等到了什么日子我就去做什么，人生不等，时间不等，岁月不等，他们也不等。</p><p>正如视频里我喜欢的那段独白：</p><blockquote><p>除非付诸行动，否则空口无凭，没有人能通过祈祷和妄想来改变人生。</p></blockquote><p>加油吧，为家庭拼搏的打工人。<br>​加油吧，为增添履历的实习生。<br>​加油吧，为忙毕业和求职的自己。<br>​也加油吧，正在享受大学生活，正在求学路上的读书人。</p><p>​愿诸位，<br>​逢山开路，遇水架桥，历尽千帆，苦尽甘来！</p>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
