<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>终端命令行操作MySql</title>
      <link href="2021/05/11/zhong-duan-ming-ling-xing-cao-zuo-mysql/"/>
      <url>2021/05/11/zhong-duan-ming-ling-xing-cao-zuo-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="终端命令行操作MySql"><a href="#终端命令行操作MySql" class="headerlink" title="终端命令行操作MySql"></a>终端命令行操作MySql</h1><p>关系型数据库</p><h3 id="一、如何使用终端操作数据库"><a href="#一、如何使用终端操作数据库" class="headerlink" title="一、如何使用终端操作数据库"></a>一、如何使用终端操作数据库</h3><h4 id="1-1-如何登录数据库服务器"><a href="#1-1-如何登录数据库服务器" class="headerlink" title="1.1 如何登录数据库服务器"></a>1.1 如何登录数据库服务器</h4><pre class=" language-sql"><code class="language-sql">C:\<span class="token operator">></span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token comment" spellcheck="true">// 通过账号密码登录</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> <span class="token keyword">Using</span> <span class="token number">a</span> password <span class="token keyword">on</span> the command line interface can <span class="token number">be</span> insecure<span class="token punctuation">.</span>Welcome <span class="token keyword">to</span> the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MySQL connection id <span class="token operator">is</span> <span class="token number">66</span>Server version: <span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">24</span> MySQL Community Server <span class="token operator">-</span> GPLCopyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>Oracle <span class="token operator">is</span> <span class="token number">a</span> registered trademark <span class="token keyword">of</span> Oracle Corporation <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> itsaffiliates<span class="token punctuation">.</span> Other names may <span class="token number">be</span> trademarks <span class="token keyword">of</span> their respectiveowners<span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span></code></pre><h4 id="1-2-如何查询数据库服务器中所有的数据"><a href="#1-2-如何查询数据库服务器中所有的数据" class="headerlink" title="1.2 如何查询数据库服务器中所有的数据"></a>1.2 如何查询数据库服务器中所有的数据</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分号很重要，英文分号，不可省略</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sakila             <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">|</span> world              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-3-如何选中某一个数据库进行操作"><a href="#1-3-如何选中某一个数据库进行操作" class="headerlink" title="1.3 如何选中某一个数据库进行操作"></a>1.3 如何选中某一个数据库进行操作</h4><p>选择数据库</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> test<span class="token punctuation">;</span><span class="token keyword">Database</span> changed</code></pre><p>查询所有数据</p><ul><li><code>select * from xxx;</code></li></ul><p>查询某一条数据</p><ul><li><code>select * from xxx where 字段 = xx;</code></li></ul><h4 id="1-4-退出数据库服务器"><a href="#1-4-退出数据库服务器" class="headerlink" title="1.4 退出数据库服务器"></a>1.4 退出数据库服务器</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">exit</span>Bye</code></pre><h4 id="1-5-如何在数据库服务器中创建我们的数据库"><a href="#1-5-如何在数据库服务器中创建我们的数据库" class="headerlink" title="1.5 如何在数据库服务器中创建我们的数据库"></a>1.5 如何在数据库服务器中创建我们的数据库</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-6-如何查看某个数据库中的所有数据表"><a href="#1-6-如何查看某个数据库中的所有数据表" class="headerlink" title="1.6 如何查看某个数据库中的所有数据表"></a>1.6 如何查看某个数据库中的所有数据表</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先选择一个数据库</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看该数据库中的所有数据表</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> Tables_in_test <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> students       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-7-如何创建一个数据表"><a href="#1-7-如何创建一个数据表" class="headerlink" title="1.7 如何创建一个数据表"></a>1.7 如何创建一个数据表</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span>  <span class="token keyword">create</span> <span class="token keyword">table</span> students <span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> birth <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.12</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-8-如何查看数据表结构详情"><a href="#1-8-如何查看数据表结构详情" class="headerlink" title="1.8 如何查看数据表结构详情"></a>1.8 如何查看数据表结构详情</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">describe</span> students<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> birth <span class="token operator">|</span> <span class="token keyword">date</span>        <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+-------------+------+-----+---------+-------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-9-查看数据表记录"><a href="#1-9-查看数据表记录" class="headerlink" title="1.9 查看数据表记录"></a>1.9 查看数据表记录</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-10-如何往数据表中添加数据记录"><a href="#1-10-如何往数据表中添加数据记录" class="headerlink" title="1.10 如何往数据表中添加数据记录"></a>1.10 如何往数据表中添加数据记录</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> students    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'hyh'</span><span class="token punctuation">,</span><span class="token string">'1997-7-20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>再次查看数据表记录</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token operator">|</span> name <span class="token operator">|</span> birth      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token operator">|</span> hyh  <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>再添加一条数据，并查询数据表</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> students<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token operator">|</span> name <span class="token operator">|</span> birth      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token operator">|</span> hyh  <span class="token operator">|</span> <span class="token number">1997</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> 二狗 <span class="token operator">|</span> <span class="token number">1999</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">29</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h4 id="练习一下"><a href="#练习一下" class="headerlink" title="练习一下"></a>练习一下</h4><pre class=" language-sql"><code class="language-sql">C:\Users\<span class="token number">12863</span><span class="token operator">></span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 <span class="token comment" spellcheck="true">// 登录数据库服务器</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> <span class="token keyword">Using</span> <span class="token number">a</span> password <span class="token keyword">on</span> the command line interface can <span class="token number">be</span> insecure<span class="token punctuation">.</span>Welcome <span class="token keyword">to</span> the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token operator">or</span> \g<span class="token punctuation">.</span>Your MySQL connection id <span class="token operator">is</span> <span class="token number">67</span>Server version: <span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">24</span> MySQL Community Server <span class="token operator">-</span> GPLCopyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>Oracle <span class="token operator">is</span> <span class="token number">a</span> registered trademark <span class="token keyword">of</span> Oracle Corporation <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> itsaffiliates<span class="token punctuation">.</span> Other names may <span class="token number">be</span> trademarks <span class="token keyword">of</span> their respectiveowners<span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token string">'help;'</span> <span class="token operator">or</span> <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token keyword">Type</span> <span class="token string">'\c'</span> <span class="token keyword">to</span> clear the <span class="token keyword">current</span> input statement<span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看数据库列表</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sakila             <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">|</span> world              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+</span><span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> test <span class="token comment" spellcheck="true">// 选择数据库</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看数据表列表</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> Tables_in_test <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> datatype       <span class="token operator">|</span><span class="token operator">|</span> students       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> pet<span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 新增数据表</span>    <span class="token operator">-</span><span class="token operator">></span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> owner <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> sex char<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> species <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> birth <span class="token keyword">date</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> death <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.09</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">describe</span> pet<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看数据表结构</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field   <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> name    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> owner   <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> sex     <span class="token operator">|</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> species <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> birth   <span class="token operator">|</span> <span class="token keyword">date</span>        <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> death   <span class="token operator">|</span> <span class="token keyword">date</span>        <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------+-------------+------+-----+---------+-------+</span><span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> pet <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"zhouzhou"</span><span class="token punctuation">,</span><span class="token string">"hyh"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token string">"pig"</span><span class="token punctuation">,</span><span class="token string">"1999-01-29"</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增一条数据</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pet<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查看数据表记录</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+------+---------+------------+-------+</span><span class="token operator">|</span> name     <span class="token operator">|</span> owner <span class="token operator">|</span> sex  <span class="token operator">|</span> species <span class="token operator">|</span> birth      <span class="token operator">|</span> death <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+------+---------+------------+-------+</span><span class="token operator">|</span> zhouzhou <span class="token operator">|</span> hyh   <span class="token operator">|</span> <span class="token number">f</span>    <span class="token operator">|</span> pig     <span class="token operator">|</span> <span class="token number">1999</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">29</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+------+---------+------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h4 id="1-11-如何删除一条数据"><a href="#1-11-如何删除一条数据" class="headerlink" title="1.11 如何删除一条数据"></a>1.11 如何删除一条数据</h4><pre class=" language-mysql"><code class="language-mysql">mysql> select * from games;+----------+--------+| name     | zd     |+----------+--------+| LOL      | pc     || 王者荣耀  | mobile |+----------+--------+2 rows in set (0.01 sec)mysql> delete from games where name='王者荣耀'; // 删除语句Query OK, 1 row affected (0.02 sec)mysql> select * from games;+------+------+| name | zd   |+------+------+| LOL  | pc   |+------+------+1 row in set (0.00 sec)</code></pre><h4 id="1-12-如何修改数据"><a href="#1-12-如何修改数据" class="headerlink" title="1.12 如何修改数据"></a>1.12 如何修改数据</h4><pre class=" language-mysql"><code class="language-mysql">mysql> update games set name='LOL2' where zd='pc'; // 修改语句Query OK, 1 row affected (0.03 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql> select * from games;+------+------+| name | zd   |+------+------+| LOL2 | pc   |+------+------+1 row in set (0.00 sec)</code></pre><h4 id="1-13-命令行操作总结"><a href="#1-13-命令行操作总结" class="headerlink" title="1.13 命令行操作总结"></a>1.13 命令行操作总结</h4><ul><li>增加：<code>insert</code></li><li>删除：<code>delete</code></li><li>修改：<code>update</code></li><li>查询：<code>select</code></li></ul><h3 id="二、mySql建表约束"><a href="#二、mySql建表约束" class="headerlink" title="二、mySql建表约束"></a>二、mySql建表约束</h3><h4 id="2-1-主键约束和自增约束"><a href="#2-1-主键约束和自增约束" class="headerlink" title="2.1 主键约束和自增约束"></a>2.1 主键约束和自增约束</h4><h5 id="2-1-1-主键约束"><a href="#2-1-1-主键约束" class="headerlink" title="2.1.1 主键约束"></a>2.1.1 主键约束</h5><p>能够唯一确定一张表中的一条记录，通过给某个字段添加约束，就可以使得该字段不重复且不为空。</p><ul><li>关键字：<code>primary key</code></li></ul><pre class=" language-mysql"><code class="language-mysql">mysql> create table user(    -> id int primary key, // 声明为主键约束     -> name varchar(20));Query OK, 0 rows affected (0.44 sec)mysql> describe user;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       | // id有一个key为pri，表示是主键约束| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><p>此时我们尝试重复添加同一个id的数据，就会报错</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user    -> values(1, '张三');Query OK, 1 row affected (0.02 sec)mysql> insert into user    -> values(1, '张三');ERROR 1062 (23000): Duplicate entry '1' for key 'user.PRIMARY' // 报错mysql> select * from user;+----+------+| id | name |+----+------+|  1 | 张三 |+----+------+1 row in set (0.00 sec)mysql> insert into user    -> values(null, '张三');ERROR 1048 (23000): Column 'id' cannot be null // 同时也不能为null</code></pre><h5 id="2-1-2-联合主键"><a href="#2-1-2-联合主键" class="headerlink" title="2.1.2 联合主键"></a>2.1.2 联合主键</h5><p>只要联合的主键不完全重复即可</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> user2<span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span> id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 联合主键</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.18</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">describe</span> user2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span>         <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>此时我们添加数据</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user2    -> values(1, "张三", "123");Query OK, 1 row affected (0.02 sec)mysql> insert into user2    -> values(2, "张三", "123");Query OK, 1 row affected (0.03 sec)mysql> insert into user2    -> values(1, "李四", "123");Query OK, 1 row affected (0.03 sec) // 仅重复一个参数是可以添加mysql> insert into user2    -> values(1, "张三", "123");ERROR 1062 (23000): Duplicate entry '1-张三' for key 'user2.PRIMARY' // 全部重复则无法添加mysql> select * from user2;+----+------+----------+| id | name | password |+----+------+----------+|  1 | 张三 | 123      ||  1 | 李四 | 123      ||  2 | 张三 | 123      |+----+------+----------+3 rows in set (0.00 sec)</code></pre><h5 id="2-1-3-自增约束"><a href="#2-1-3-自增约束" class="headerlink" title="2.1.3 自增约束"></a>2.1.3 自增约束</h5><pre class=" language-mysql"><code class="language-mysql">mysql> create table user3(    -> id int primary key auto_increment, // 自增约束指令    -> name varchar(20));Query OK, 0 rows affected (0.15 sec)mysql> describe user3;+-------+-------------+------+-----+---------+----------------+| Field | Type        | Null | Key | Default | Extra          |+-------+-------------+------+-----+---------+----------------+| id    | int         | NO   | PRI | NULL    | auto_increment || name  | varchar(20) | YES  |     | NULL    |                |+-------+-------------+------+-----+---------+----------------+</code></pre><p>此时的id就是一个自增的字段</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user3 (name) values('张三'); // (name)表示只键入name字段的内容Query OK, 1 row affected (0.01 sec)mysql> insert into user3 (name) values('张三');Query OK, 1 row affected (0.01 sec)mysql> insert into user3 (name) values('张三');Query OK, 1 row affected (0.01 sec)mysql> select * from user3;+----+------+| id | name |+----+------+|  1 | 张三 ||  2 | 张三 ||  3 | 张三 |+----+------+3 rows in set (0.00 sec)</code></pre><h5 id="2-1-4-“亡羊补牢”"><a href="#2-1-4-“亡羊补牢”" class="headerlink" title="2.1.4 “亡羊补牢”"></a>2.1.4 “亡羊补牢”</h5><p>当我们在创建表的时候忘记创建主键约束</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table user4(    -> id int,    -> name varchar(20));Query OK, 0 rows affected (0.06 sec)mysql> desc user4;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       | // 此时表中的id没有key值| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><p>我们可以进行补充约束，“亡羊补牢”（add）</p><pre class=" language-mysql"><code class="language-mysql">mysql> alter table user4 add primary key(id); // 通过alter进行补充添加Query OK, 0 rows affected (0.09 sec)Records: 0  Duplicates: 0  Warnings: 0mysql> desc user4;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       | // 此时表中的id有key值| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><p>也可以通过修改的方式实现（modify）</p><pre class=" language-mysql"><code class="language-mysql">mysql> alter table user4 modify id int primary key; // modify修改表Query OK, 0 rows affected (0.22 sec)Records: 0  Duplicates: 0  Warnings: 0mysql> desc user4;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre><p>如何删除主键约束（drop）</p><pre class=" language-mysql"><code class="language-mysql">mysql> alter table user4 drop primary key; // 通过drop的命令Query OK, 0 rows affected (0.08 sec)Records: 0  Duplicates: 0  Warnings: 0mysql> desc user4;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   |     | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><h4 id="2-2-唯一约束"><a href="#2-2-唯一约束" class="headerlink" title="2.2 唯一约束"></a>2.2 唯一约束</h4><p>约束字段的值不重复</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table user5(    -> id int unique,            // unique表示唯一    -> name varchar(20));Query OK, 0 rows affected (0.05 sec)mysql> desc user5;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  | UNI | NULL    |       | // key为UNI| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><p>此时重复插入则会报错</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user5    -> values(1, 'zhangsan');Query OK, 1 row affected (0.02 sec)mysql> insert into user5    -> values(1, 'zhangsan');ERROR 1062 (23000): Duplicate entry '1' for key 'user5.id' // 报错</code></pre><p>联合约束，指多个参数不完全相同即可</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table user6(    -> id int,    -> name varchar(20),    -> unique(id, name));      // 联合约束Query OK, 0 rows affected (0.09 sec)mysql> desc user6;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  | MUL | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)mysql> insert into user6 values(1, '张三');Query OK, 1 row affected (0.01 sec)mysql> insert into user6 values(2, '张三');Query OK, 1 row affected (0.03 sec)mysql>mysql> insert into user6 values(1, '李四');Query OK, 1 row affected (0.01 sec)mysql> insert into user6 values(1, '张三');ERROR 1062 (23000): Duplicate entry '1-张三' for key 'user6.id' // 报错mysql> select * from user6;+------+------+| id   | name |+------+------+|    1 | 张三 ||    1 | 李四 ||    2 | 张三 |+------+------+3 rows in set (0.00 sec)</code></pre><p>如何删除唯一约束</p><pre class=" language-mysql"><code class="language-mysql">mysql> desc user5;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  | UNI | NULL    |       | // 有唯一约束| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)mysql> alter table user5 drop index id; // 删除唯一约束Query OK, 0 rows affected (0.05 sec)Records: 0  Duplicates: 0  Warnings: 0mysql> desc user5;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       | // 没有唯一约束| name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><p>也可以通过modify的方式添加唯一约束</p><pre class=" language-mysql"><code class="language-mysql">mysql> desc user5;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       | // 没有唯一约束+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)mysql> alter table user5 modify name varchar(20) unique; // 添加唯一约束Query OK, 0 rows affected (0.10 sec)Records: 0  Duplicates: 0  Warnings: 0mysql> desc user5;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       || name  | varchar(20) | YES  | UNI | NULL    |       | // 有唯一约束+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre><p><strong>总结</strong>：</p><ul><li>建表时添加</li><li>可以使用alter … add … 的方式添加</li><li>可以通过alter … modify … 的方式添加</li><li>可以通过alter … drop … 的方式删除</li></ul><h4 id="2-3-非空约束"><a href="#2-3-非空约束" class="headerlink" title="2.3 非空约束"></a>2.3 非空约束</h4><p>修饰的字段不能为空</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table user7(    -> id int,    -> name varchar(20) not null // 通过not null来添加非空约束    -> );Query OK, 0 rows affected (0.11 sec)mysql> desc user7;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       || name  | varchar(20) | NO   |     | NULL    |       | // Null为no表示不能为空+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec)</code></pre><h4 id="2-4-默认约束"><a href="#2-4-默认约束" class="headerlink" title="2.4 默认约束"></a>2.4 默认约束</h4><p>插入字段值时，若没有传值，则会使用默认值</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table user8(    -> id int,    -> name varchar(20),    -> age int default 18); // 用default设置默认约束Query OK, 0 rows affected (0.05 sec)mysql> desc user8;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | YES  |     | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       || age   | int         | YES  |     | 18      |       | // age的默认值为18+-------+-------------+------+-----+---------+-------+3 rows in set (0.01 sec)</code></pre><p>添加一条数据</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user8 (id, name) values(1, "张三"); // 没有插入ageQuery OK, 1 row affected (0.02 sec)mysql> select * from user8;+------+------+------+| id   | name | age  |+------+------+------+|    1 | 张三 |   18 |  // age展示默认值+------+------+------+1 row in set (0.00 sec)</code></pre><p>如果添加数据age不为空，则不会使用默认值</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into user8 values(2, "李四", 20);Query OK, 1 row affected (0.01 sec)mysql> select * from user8;+------+------+------+| id   | name | age  |+------+------+------+|    1 | 张三 |   18 ||    2 | 李四 |   20 |+------+------+------+2 rows in set (0.00 sec)</code></pre><p><strong>同样也可以使用modify和alter语法。</strong></p><h4 id="2-5-外键约束"><a href="#2-5-外键约束" class="headerlink" title="2.5 外键约束"></a>2.5 外键约束</h4><p>涉及到两个表，一个是父表（主表），一个是子表（副表）</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table classes( // 父表    -> id int primary key,    -> name varchar(20));Query OK, 0 rows affected (0.06 sec)mysql> create table students( // 子表    -> id int primary key,    -> name varchar(20),    -> class_id int,    -> foreign key(class_id) references classes(id) // 将子表的class_id与父表的id相关联    -> );Query OK, 0 rows affected (0.14 sec)mysql> desc classes;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)mysql> desc students;+----------+-------------+------+-----+---------+-------+| Field    | Type        | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id       | int         | NO   | PRI | NULL    |       || name     | varchar(20) | YES  |     | NULL    |       || class_id | int         | YES  | MUL | NULL    |       |+----------+-------------+------+-----+---------+-------+3 rows in set (0.00 sec)</code></pre><p>父表插入数据</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into classes values(1, "一班");Query OK, 1 row affected (0.03 sec)mysql> insert into classes values(2, "二班");Query OK, 1 row affected (0.01 sec)mysql> insert into classes values(3, "三班");Query OK, 1 row affected (0.01 sec)mysql> insert into classes values(4, "四班");Query OK, 1 row affected (0.02 sec)mysql> select * from classes;+----+------+| id | name |+----+------+|  1 | 一班 ||  2 | 二班 ||  3 | 三班 ||  4 | 四班 |+----+------+4 rows in set (0.00 sec)</code></pre><p>子表插入数据</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into students values(1001, "张三",1);Query OK, 1 row affected (0.02 sec)mysql> insert into students values(1002, "张三",2);Query OK, 1 row affected (0.02 sec)mysql> insert into students values(1003, "张三",3);Query OK, 1 row affected (0.02 sec)mysql> insert into students values(1004, "张三",4);Query OK, 1 row affected (0.03 sec)mysql> select * from students;+------+------+----------+| id   | name | class_id |+------+------+----------+| 1001 | 张三 |        1 || 1002 | 张三 |        2 || 1003 | 张三 |        3 || 1004 | 张三 |        4 |+------+------+----------+4 rows in set (0.00 sec)</code></pre><p>这些张三姓名一样，班级和学号都不一样</p><p>但是当插入一条数据班级为5时，由于关联的classes表里没有id为5的班级，所以会报错</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into students values(1005, "张三", 5);ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`test`.`students`, CONSTRAINT `students_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `classes` (`id`))</code></pre><ul><li><p>主表中没有的数值，在副表中不可以使用</p></li><li><p>主表中的记录被副表引用是不可删除的</p></li></ul><pre class=" language-mys"><code class="language-mys">  mysql> delete from classes where id=3; // id = 3正在被副表引用  ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`test`.`students`, CONSTRAINT `students_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `classes` (`id`))</code></pre><h3 id="三、数据库的三大设计范式"><a href="#三、数据库的三大设计范式" class="headerlink" title="三、数据库的三大设计范式"></a>三、数据库的三大设计范式</h3><h4 id="3-1-第一范式-1NF"><a href="#3-1-第一范式-1NF" class="headerlink" title="3.1 第一范式 1NF"></a>3.1 第一范式 1NF</h4><p>数据表中的所有字段都是<strong>不可分割</strong>的原子值</p><p>先来新建一个表</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table student2(    -> id int,    -> name varchar(20),    -> address varchar(30));Query OK, 0 rows affected (0.10 sec)mysql> insert into student2 values(1, "张三", "中国浙江省杭州市余杭区");Query OK, 1 row affected (0.02 sec)mysql> insert into student2 values(2, "李四", "中国浙江省湖州市吴兴区");Query OK, 1 row affected (0.02 sec)mysql> insert into student2 values(3, "王五", "中国浙江省杭州市临平区");Query OK, 1 row affected (0.02 sec)mysql> select * from student2;+------+------+------------------------+| id   | name | address                |+------+------+------------------------+|    1 | 张三  |  中国浙江省杭州市余杭区   ||    2 | 李四  |  中国浙江省湖州市吴兴区   ||    3 | 王五  |  中国浙江省杭州市临平区   |+------+------+------------------------+3 rows in set (0.01 sec)</code></pre><p>上表中的address内的国、省、市、区都还可以拆分，所以不满足第一范式（<strong>数据表中的所有字段都是*不可分割*的原子值</strong>）</p><p>应修改为下表中的结构，满足第一范式</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table student3(    -> id int,    -> name varchar(20),    -> country varchar(30),    -> privence varchar(30),    -> city varchar(30),    -> details varchar(30));Query OK, 0 rows affected (0.07 sec)mysql> describe student3;+----------+-------------+------+-----+---------+-------+| Field    | Type        | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| id       | int         | YES  |     | NULL    |       || name     | varchar(20) | YES  |     | NULL    |       || country  | varchar(30) | YES  |     | NULL    |       || privence | varchar(30) | YES  |     | NULL    |       || city     | varchar(30) | YES  |     | NULL    |       || details  | varchar(30) | YES  |     | NULL    |       |+----------+-------------+------+-----+---------+-------+6 rows in set (0.01 sec)mysql> insert into student3 values(1, "张三" ,"中国", "浙江省", "杭州市", "余杭区");Query OK, 1 row affected (0.02 sec)mysql> insert into student3 values(2, "李四" ,"中国", "浙江省", "湖州市", "吴兴区");Query OK, 1 row affected (0.02 sec)mysql> insert into student3 values(3, "王五" ,"中国", "浙江省", "杭州市", "临平区");Query OK, 1 row affected (0.02 sec)mysql> select * from student3;+------+------+---------+----------+--------+---------+| id   | name | country | privence | city   | details |+------+------+---------+----------+--------+---------+|    1 | 张三  | 中国    | 浙江省    | 杭州市  | 余杭区   ||    2 | 李四  | 中国    | 浙江省    | 湖州市  | 吴兴区   ||    3 | 王五  | 中国    | 浙江省    | 杭州市  | 临平区   |+------+------+---------+----------+--------+---------+3 rows in set (0.00 sec)</code></pre><h4 id="3-2-第二范式-2NF"><a href="#3-2-第二范式-2NF" class="headerlink" title="3.2 第二范式 2NF"></a>3.2 第二范式 2NF</h4><p>必须是满足第一范式的前提下，第二范式要求，除主键外的每一列都必须完全依赖于主键</p><p>如果出现不完全依赖，之可能发生在联合主键的情况下</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table my_order(    -> product_id int,    -> customer_id int,    -> product_name varchar(20),    -> customer_name varchar(20),    -> primary key(product_id, customer_id)    -> );Query OK, 0 rows affected (0.07 sec)mysql> desc my_order;+---------------+-------------+------+-----+---------+-------+| Field         | Type        | Null | Key | Default | Extra |+---------------+-------------+------+-----+---------+-------+| product_id    | int         | NO   | PRI | NULL    |       || customer_id   | int         | NO   | PRI | NULL    |       || product_name  | varchar(20) | YES  |     | NULL    |       || customer_name | varchar(20) | YES  |     | NULL    |       |+---------------+-------------+------+-----+---------+-------+4 rows in set (0.01 sec)</code></pre><p>上表中的product_name只关联主键约束的字段product_id，customer_name只关联主键约束的字段customer_id</p><p>他们都不完全关联整个primary key，所以不满足第二范式</p><p>如果要满足第二范式，则应拆表，修改为三张表</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table my_order(    -> order_id int,    -> product_id int,    -> customer_id int,    -> primary key(order_id));Query OK, 0 rows affected (0.07 sec)mysql> create table product(    -> id int,    -> name varchar(20),    -> primary key(id));Query OK, 0 rows affected (0.07 sec)mysql> create table customer(    -> id int,    -> name varchar(20),    -> primary key(id));Query OK, 0 rows affected (0.16 sec)mysql> desc my_order;+-------------+------+------+-----+---------+-------+| Field       | Type | Null | Key | Default | Extra |+-------------+------+------+-----+---------+-------+| order_id    | int  | NO   | PRI | NULL    |       || product_id  | int  | YES  |     | NULL    |       || customer_id | int  | YES  |     | NULL    |       |+-------------+------+------+-----+---------+-------+3 rows in set (0.01 sec)mysql> desc product;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)mysql> desc customer;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int         | NO   | PRI | NULL    |       || name  | varchar(20) | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre><h4 id="3-3-第三范式-3NF"><a href="#3-3-第三范式-3NF" class="headerlink" title="3.3 第三范式 3NF"></a>3.3 第三范式 3NF</h4><p>必须先满足第二范式，除开主键列的其他列之间不能有传递依赖关系</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table my_order(    -> order_id int,    -> product_id int,    -> customer_id int,    -> customer_phone varchar(15),    -> primary key(order_id));Query OK, 0 rows affected (0.09 sec)mysql> create table customer(    -> id int,    -> name varchar(20),    -> primary key(id));Query OK, 0 rows affected (0.04 sec)</code></pre><p>上表中涉及到customer_phone需要从my_order到customer进行传递，所以不满足第三范式</p><p>若要满足第三范式，应当修改为</p><pre class=" language-mysql"><code class="language-mysql">mysql> create table my_order(    -> order_id int,    -> product_id int,    -> customer_id int,    -> primary key(order_id));Query OK, 0 rows affected (0.09 sec)mysql> create table customer(    -> id int,    -> name varchar(20),    -> phone varchar(15),    -> primary key(id));Query OK, 0 rows affected (0.04 sec)</code></pre><h4 id="3-4-注意事项"><a href="#3-4-注意事项" class="headerlink" title="3.4 注意事项"></a>3.4 注意事项</h4><p><strong>范式设计的越详细，对某些操作可能更好（比如进行筛选城市之类的操作），但不一定都是好处（例如完整地址则需要进行拼接）</strong></p><p><strong>所以范式设计取决于实际项目开发。</strong></p><h3 id="四、查询练习"><a href="#四、查询练习" class="headerlink" title="四、查询练习"></a>四、查询练习</h3><h4 id="4-1-建表"><a href="#4-1-建表" class="headerlink" title="4.1 建表"></a>4.1 建表</h4><p>学生表</p><ul><li>student<ul><li>学号</li><li>姓名</li><li>性别</li><li>出生日期</li><li>班级</li></ul></li></ul><pre class=" language-mysql"><code class="language-mysql">mysql> create table student(    -> student_no varchar(20) primary key,    -> name varchar(20) not null,    -> sex varchar(10) not null,    -> birth datetime,    -> class varchar(20));Query OK, 0 rows affected (0.09 sec)mysql> desc student;+------------+-------------+------+-----+---------+-------+| Field      | Type        | Null | Key | Default | Extra |+------------+-------------+------+-----+---------+-------+| student_no | varchar(20) | NO   | PRI | NULL    |       || name       | varchar(20) | NO   |     | NULL    |       || sex        | varchar(10) | NO   |     | NULL    |       || birth      | datetime    | YES  |     | NULL    |       || class      | varchar(20) | YES  |     | NULL    |       |+------------+-------------+------+-----+---------+-------+5 rows in set (0.01 sec)</code></pre><p>教师表</p><ul><li>Teacher<ul><li>工号</li><li>姓名</li><li>性别</li><li>出生日期</li><li>职称</li><li>部门</li></ul></li></ul><pre class=" language-mysql"><code class="language-mysql">mysql> create table teacher(    -> teacher_no varchar(20) primary key,    -> name varchar(20) not null,    -> sex varchar(10) not null,    -> birth datetime,    -> professional varchar(20),    -> department varchar(20) not null);Query OK, 0 rows affected (0.10 sec)mysql> desc teacher;+--------------+-------------+------+-----+---------+-------+| Field        | Type        | Null | Key | Default | Extra |+--------------+-------------+------+-----+---------+-------+| teacher_no   | varchar(20) | NO   | PRI | NULL    |       || name         | varchar(20) | NO   |     | NULL    |       || sex          | varchar(10) | NO   |     | NULL    |       || birth        | datetime    | YES  |     | NULL    |       || professional | varchar(20) | YES  |     | NULL    |       || department   | varchar(20) | NO   |     | NULL    |       |+--------------+-------------+------+-----+---------+-------+6 rows in set (0.01 sec)</code></pre><p>课程表</p><ul><li>Course<ul><li>课程编号</li><li>课程名称</li><li>教师编号</li></ul></li></ul><pre class=" language-mysql"><code class="language-mysql">mysql> create table course(    -> course_no varchar(20) primary key,    -> name varchar(20) not null,    -> teacher_no varchar(20) not null,    -> foreign key(teacher_no) references teacher(teacher_no));Query OK, 0 rows affected (0.21 sec)mysql> desc course;+------------+-------------+------+-----+---------+-------+| Field      | Type        | Null | Key | Default | Extra |+------------+-------------+------+-----+---------+-------+| course_no  | varchar(20) | NO   | PRI | NULL    |       || name       | varchar(20) | NO   |     | NULL    |       || teacher_no | varchar(20) | NO   | MUL | NULL    |       |+------------+-------------+------+-----+---------+-------+3 rows in set (0.01 sec)</code></pre><p>成绩表</p><ul><li>Score<ul><li>学号</li><li>课程编号</li><li>成绩</li></ul></li></ul><pre class=" language-mysql"><code class="language-mysql">mysql> create table score(    -> student_no varchar(20) primary key,    -> course_no varchar(20) not null,    -> grade varchar(20) not null,    -> foreign key(student_no) references student(student_no),    -> foreign key(course_no) references course(course_no));Query OK, 0 rows affected (0.14 sec)mysql> desc score;+------------+-------------+------+-----+---------+-------+| Field      | Type        | Null | Key | Default | Extra |+------------+-------------+------+-----+---------+-------+| student_no | varchar(20) | NO   | PRI | NULL    |       || course_no  | varchar(20) | NO   | MUL | NULL    |       || grade      | varchar(20) | NO   |     | NULL    |       |+------------+-------------+------+-----+---------+-------+3 rows in set (0.01 sec)</code></pre><h4 id="4-2-添加数据"><a href="#4-2-添加数据" class="headerlink" title="4.2 添加数据"></a>4.2 添加数据</h4><p>添加学生</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into student values('100', '二狗', '男', '1997-07-20', '一班');Query OK, 1 row affected (0.03 sec)mysql> insert into student values('101', '山鸡', '女', '1997-10-25', '一班');Query OK, 1 row affected (0.02 sec)mysql> insert into student values('102', '野驴', '女', '1997-08-14', '一班');Query OK, 1 row affected (0.01 sec)mysql> insert into student values('103', '勒布朗', '男', '1997-03-19', '四班');Query OK, 1 row affected (0.02 sec)mysql> insert into student values('104', '马冬梅', '女', '1997-04-27', '四班');Query OK, 1 row affected (0.02 sec)mysql> insert into student values('105', '张全蛋', '男', '1997-11-30', '二班');Query OK, 1 row affected (0.01 sec)mysql> insert into student values('106', '李淳罡', '男', '1997-03-06', '三班');Query OK, 1 row affected (0.02 sec)mysql> insert into student values('107', '赵铁柱', '男', '1997-04-16', '二班');Query OK, 1 row affected (0.02 sec)mysql> insert into student values('108', '王尼玛', '男', '1997-09-07', '二班');Query OK, 1 row affected (0.01 sec)mysql> insert into student values('109', '灭绝师太', '女', '1997-12-10', '三班');Query OK, 1 row affected (0.01 sec)mysql> insert into student values('110', '猪猪侠', '男', '1997-01-02', '三班');Query OK, 1 row affected (0.01 sec)mysql> insert into student values('111', '玛卡巴卡', '女', '1997-06-25', '四班');Query OK, 1 row affected (0.02 sec)mysql> select * from student;+------------+----------+-----+---------------------+-------+| student_no | name     | sex | birth               | class |+------------+----------+-----+---------------------+-------+| 100        | 二狗     | 男  | 1997-07-20 00:00:00 | 一班  || 101        | 山鸡     | 女  | 1997-10-25 00:00:00 | 一班  || 102        | 野驴     | 女  | 1997-08-14 00:00:00 | 一班  || 103        | 勒布朗   | 男  | 1997-03-19 00:00:00 | 四班  || 104        | 马冬梅   | 女  | 1997-04-27 00:00:00 | 四班  || 105        | 张全蛋   | 男  | 1997-11-30 00:00:00 | 二班  || 106        | 李淳罡   | 男  | 1997-03-06 00:00:00 | 三班  || 107        | 赵铁柱   | 男  | 1997-04-16 00:00:00 | 二班  || 108        | 王尼玛   | 男  | 1997-09-07 00:00:00 | 二班  || 109        | 灭绝师太 | 女  | 1997-12-10 00:00:00 | 三班  || 110        | 猪猪侠   | 男  | 1997-01-02 00:00:00 | 三班  || 111        | 玛卡巴卡 | 女  | 1997-06-25 00:00:00 | 四班  |+------------+----------+-----+---------------------+-------+12 rows in set (0.01 sec)</code></pre><p>添加教师</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into teacher values('800', '太上老君', '男', '1925-05-30', '副教授', '炼丹系');Query OK, 1 row affected (0.03 sec)mysql> insert into teacher values('801', '如来', '男', '1922-11-15', '副教授', '理发系');Query OK, 1 row affected (0.01 sec)mysql> insert into teacher values('802', '观音', '女', '1938-04-10', '讲师', '种植系');Query OK, 1 row affected (0.01 sec)mysql> insert into teacher values('803', '散财童子', '女', '1946-07-07', '助教', '炼丹系');Query OK, 1 row affected (0.01 sec)mysql> insert into teacher values('804', '送财童子', '男', '1944-01-06', '助教', '理发系');Query OK, 1 row affected (0.01 sec)mysql> select * from teacher;+------------+----------+-----+---------------------+--------------+------------+| teacher_no | name     | sex | birth               | professional | department |+------------+----------+-----+---------------------+--------------+------------+| 800        | 太上老君 | 男  | 1925-05-30 00:00:00 | 副教授       | 炼丹系     || 801        | 如来     | 男  | 1922-11-15 00:00:00 | 副教授       | 理发系     || 802        | 观音     | 女  | 1938-04-10 00:00:00 | 讲师         | 种植系     || 803        | 散财童子 | 女  | 1946-07-07 00:00:00 | 助教         | 炼丹系     || 804        | 送财童子 | 男  | 1944-01-06 00:00:00 | 助教         | 理发系     |+------------+----------+-----+---------------------+--------------+------------+5 rows in set (0.00 sec)</code></pre><p>添加课程</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into course values('900', '金丹炼制', '800');Query OK, 1 row affected (0.02 sec)mysql> insert into course values('901', '洗头', '801');Query OK, 1 row affected (0.01 sec)mysql> insert into course values('902', '养食人花', '802');Query OK, 1 row affected (0.03 sec)mysql> insert into course values('903', '洗炼丹炉', '803');Query OK, 1 row affected (0.01 sec)mysql> insert into course values('904', '修面', '804');Query OK, 1 row affected (0.03 sec)mysql> select * from course;+-----------+----------+------------+| course_no | name     | teacher_no |+-----------+----------+------------+| 900       | 金丹炼制 | 800        || 901       | 洗头     | 801        || 902       | 养食人花 | 802        || 903       | 洗炼丹炉 | 803        || 904       | 修面     | 804        |+-----------+----------+------------+5 rows in set (0.00 sec)</code></pre><p>添加成绩</p><pre class=" language-mysql"><code class="language-mysql">mysql> insert into score values('100', '900', '95');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('100', '901', '93');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('100', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('100', '903', '91');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('100', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('101', '900', '95');Query OK, 1 row affected (0.04 sec)mysql> insert into score values('101', '901', '93');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('101', '902', '96');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('101', '903', '91');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('101', '904', '90');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('102', '900', '95');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('102', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('102', '902', '96');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('102', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('102', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('103', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('103', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('103', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('103', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('103', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('104', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('104', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('104', '902', '96');Query OK, 1 row affected (0.00 sec)mysql> insert into score values('104', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('104', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('105', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('105', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('105', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('105', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('105', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('106', '900', '95');Query OK, 1 row affected (0.00 sec)mysql> insert into score values('106', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('106', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('106', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('106', '904', '90');Query OK, 1 row affected (0.03 sec)mysql> insert into score values('107', '900', '95');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('107', '901', '93');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('107', '902', '96');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('107', '903', '91');Query OK, 1 row affected (0.02 sec)mysql> insert into score values('107', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('108', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('108', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('108', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('108', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('108', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('109', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('109', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('109', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('109', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('109', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('110', '900', '95');Query OK, 1 row affected (0.00 sec)mysql> insert into score values('110', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('110', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('110', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('110', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('111', '900', '95');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('111', '901', '93');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('111', '902', '96');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('111', '903', '91');Query OK, 1 row affected (0.01 sec)mysql> insert into score values('111', '904', '90');Query OK, 1 row affected (0.01 sec)mysql> select * from score;+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 900       |    95 || 100        | 901       |    93 || 100        | 902       |    96 || 100        | 903       |    91 || 100        | 904       |    90 || 101        | 900       |    95 || 101        | 901       |    93 || 101        | 902       |    96 || 101        | 903       |    91 || 101        | 904       |    90 || 102        | 900       |    95 || 102        | 901       |    93 || 102        | 902       |    96 || 102        | 903       |    91 || 102        | 904       |    90 || 103        | 900       |    95 || 103        | 901       |    93 || 103        | 902       |    96 || 103        | 903       |    91 || 103        | 904       |    90 || 104        | 900       |    95 || 104        | 901       |    93 || 104        | 902       |    96 || 104        | 903       |    91 || 104        | 904       |    90 || 105        | 900       |    95 || 105        | 901       |    93 || 105        | 902       |    96 || 105        | 903       |    91 || 105        | 904       |    90 || 106        | 900       |    95 || 106        | 901       |    93 || 106        | 902       |    96 || 106        | 903       |    91 || 106        | 904       |    90 || 107        | 900       |    95 || 107        | 901       |    93 || 107        | 902       |    96 || 107        | 903       |    91 || 107        | 904       |    90 || 108        | 900       |    95 || 108        | 901       |    93 || 108        | 902       |    96 || 108        | 903       |    91 || 108        | 904       |    90 || 109        | 900       |    95 || 109        | 901       |    93 || 109        | 902       |    96 || 109        | 903       |    91 || 109        | 904       |    90 || 110        | 900       |    95 || 110        | 901       |    93 || 110        | 902       |    96 || 110        | 903       |    91 || 110        | 904       |    90 || 111        | 900       |    95 || 111        | 901       |    93 || 111        | 902       |    96 || 111        | 903       |    91 || 111        | 904       |    90 |+------------+-----------+-------+60 rows in set (0.00 sec)</code></pre><h4 id="4-3-练习"><a href="#4-3-练习" class="headerlink" title="4.3 练习"></a>4.3 练习</h4><h5 id="1-查询student表的所有记录"><a href="#1-查询student表的所有记录" class="headerlink" title="1 查询student表的所有记录"></a>1 查询student表的所有记录</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select * from student;+------------+----------+-----+---------------------+-------+| student_no | name     | sex | birth               | class |+------------+----------+-----+---------------------+-------+| 100        | 二狗     | 男  | 1997-07-20 00:00:00 | 一班  || 101        | 山鸡     | 女  | 1997-10-25 00:00:00 | 一班  || 102        | 野驴     | 女  | 1997-08-14 00:00:00 | 一班  || 103        | 勒布朗   | 男  | 1997-03-19 00:00:00 | 四班  || 104        | 马冬梅   | 女  | 1997-04-27 00:00:00 | 四班  || 105        | 张全蛋   | 男  | 1997-11-30 00:00:00 | 二班  || 106        | 李淳罡   | 男  | 1997-03-06 00:00:00 | 三班  || 107        | 赵铁柱   | 男  | 1997-04-16 00:00:00 | 二班  || 108        | 王尼玛   | 男  | 1997-09-07 00:00:00 | 二班  || 109        | 灭绝师太 | 女  | 1997-12-10 00:00:00 | 三班  || 110        | 猪猪侠   | 男  | 1997-01-02 00:00:00 | 三班  || 111        | 玛卡巴卡 | 女  | 1997-06-25 00:00:00 | 四班  |+------------+----------+-----+---------------------+-------+12 rows in set (0.01 sec)</code></pre><h5 id="2-查询student表中所有记录的name、sex和class列"><a href="#2-查询student表中所有记录的name、sex和class列" class="headerlink" title="2 查询student表中所有记录的name、sex和class列"></a>2 查询student表中所有记录的name、sex和class列</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select name, sex, class from student;+----------+-----+-------+| name     | sex | class |+----------+-----+-------+| 二狗     | 男  | 一班  || 山鸡     | 女  | 一班  || 野驴     | 女  | 一班  || 勒布朗   | 男  | 四班  || 马冬梅   | 女  | 四班  || 张全蛋   | 男  | 二班  || 李淳罡   | 男  | 三班  || 赵铁柱   | 男  | 二班  || 王尼玛   | 男  | 二班  || 灭绝师太 | 女  | 三班  || 猪猪侠   | 男  | 三班  || 玛卡巴卡 | 女  | 四班  |+----------+-----+-------+12 rows in set (0.00 sec)</code></pre><h5 id="3-查询教师所有的单位，即不重复的department列-知识点：distinct语法"><a href="#3-查询教师所有的单位，即不重复的department列-知识点：distinct语法" class="headerlink" title="3 查询教师所有的单位，即不重复的department列( 知识点：distinct语法)"></a>3 查询教师所有的单位，即不重复的department列( 知识点：distinct语法)</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select distinct department from teacher; // 用distinct可以去重+------------+| department |+------------+| 炼丹系     || 理发系     || 种植系     |+------------+3 rows in set (0.00 sec)</code></pre><h5 id="4-查询score表中成绩为90，95或96的记录"><a href="#4-查询score表中成绩为90，95或96的记录" class="headerlink" title="4 查询score表中成绩为90，95或96的记录"></a>4 查询score表中成绩为90，95或96的记录</h5><p>方法一：<code>or</code>、<code>and</code>、<code>not</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from score where grade=90 or grade=95 or grade=96; // 用where来限定条件+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 900       |    95 || 100        | 902       |    96 || 100        | 904       |    90 || 101        | 900       |    95 || 101        | 902       |    96 || 101        | 904       |    90 || 102        | 900       |    95 || 102        | 902       |    96 || 102        | 904       |    90 || 103        | 900       |    95 || 103        | 902       |    96 || 103        | 904       |    90 || 104        | 900       |    95 || 104        | 902       |    96 || 104        | 904       |    90 || 105        | 900       |    95 || 105        | 902       |    96 || 105        | 904       |    90 || 106        | 900       |    95 || 106        | 902       |    96 || 106        | 904       |    90 || 107        | 900       |    95 || 107        | 902       |    96 || 107        | 904       |    90 || 108        | 900       |    95 || 108        | 902       |    96 || 108        | 904       |    90 || 109        | 900       |    95 || 109        | 902       |    96 || 109        | 904       |    90 || 110        | 900       |    95 || 110        | 902       |    96 || 110        | 904       |    90 || 111        | 900       |    95 || 111        | 902       |    96 || 111        | 904       |    90 |+------------+-----------+-------+36 rows in set (0.00 sec)</code></pre><p>方法2： <code>in(...)</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from score where grade in(90, 95, 96); // 用in可以查询 '或'关系 的记录+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 900       |    95 || 100        | 902       |    96 || 100        | 904       |    90 || 101        | 900       |    95 || 101        | 902       |    96 || 101        | 904       |    90 || 102        | 900       |    95 || 102        | 902       |    96 || 102        | 904       |    90 || 103        | 900       |    95 || 103        | 902       |    96 || 103        | 904       |    90 || 104        | 900       |    95 || 104        | 902       |    96 || 104        | 904       |    90 || 105        | 900       |    95 || 105        | 902       |    96 || 105        | 904       |    90 || 106        | 900       |    95 || 106        | 902       |    96 || 106        | 904       |    90 || 107        | 900       |    95 || 107        | 902       |    96 || 107        | 904       |    90 || 108        | 900       |    95 || 108        | 902       |    96 || 108        | 904       |    90 || 109        | 900       |    95 || 109        | 902       |    96 || 109        | 904       |    90 || 110        | 900       |    95 || 110        | 902       |    96 || 110        | 904       |    90 || 111        | 900       |    95 || 111        | 902       |    96 || 111        | 904       |    90 |+------------+-----------+-------+36 rows in set (0.00 sec)</code></pre><h5 id="5-查询student表中’一班’或性别为’女’的同学记录"><a href="#5-查询student表中’一班’或性别为’女’的同学记录" class="headerlink" title="5 查询student表中’一班’或性别为’女’的同学记录"></a>5 查询student表中’一班’或性别为’女’的同学记录</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select * from student where class="一班" or sex="女";+------------+----------+-----+---------------------+-------+| student_no | name     | sex | birth               | class |+------------+----------+-----+---------------------+-------+| 100        | 二狗     | 男  | 1997-07-20 00:00:00 | 一班  || 101        | 山鸡     | 女  | 1997-10-25 00:00:00 | 一班  || 102        | 野驴     | 女  | 1997-08-14 00:00:00 | 一班  || 104        | 马冬梅   | 女  | 1997-04-27 00:00:00 | 四班  || 109        | 灭绝师太 | 女  | 1997-12-10 00:00:00 | 三班  || 111        | 玛卡巴卡 | 女  | 1997-06-25 00:00:00 | 四班  |+------------+----------+-----+---------------------+-------+6 rows in set (0.00 sec)##### 6 以student_no降序查询student表的所有记录升序(`asc`)、降序(`desc`)，默认升序，所以`asc`可以不写​```mysqlmysql> select * from student order by student_no desc; // desc表示降序关键字，升序为asc，默认升序，所以asc可以不写+------------+----------+-----+---------------------+-------+| student_no | name     | sex | birth               | class |+------------+----------+-----+---------------------+-------+| 111        | 玛卡巴卡 | 女  | 1997-06-25 00:00:00 | 四班  || 110        | 猪猪侠   | 男  | 1997-01-02 00:00:00 | 三班  || 109        | 灭绝师太 | 女  | 1997-12-10 00:00:00 | 三班  || 108        | 王尼玛   | 男  | 1997-09-07 00:00:00 | 二班  || 107        | 赵铁柱   | 男  | 1997-04-16 00:00:00 | 二班  || 106        | 李淳罡   | 男  | 1997-03-06 00:00:00 | 三班  || 105        | 张全蛋   | 男  | 1997-11-30 00:00:00 | 二班  || 104        | 马冬梅   | 女  | 1997-04-27 00:00:00 | 四班  || 103        | 勒布朗   | 男  | 1997-03-19 00:00:00 | 四班  || 102        | 野驴     | 女  | 1997-08-14 00:00:00 | 一班  || 101        | 山鸡     | 女  | 1997-10-25 00:00:00 | 一班  || 100        | 二狗     | 男  | 1997-07-20 00:00:00 | 一班  |+------------+----------+-----+---------------------+-------+12 rows in set (0.00 sec)</code></pre><h5 id="7-查询’四班’的学生人数"><a href="#7-查询’四班’的学生人数" class="headerlink" title="7 查询’四班’的学生人数"></a>7 查询’四班’的学生人数</h5><p>统计<code>count</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select count(*) from student where class="四班"; // count关键字统计总数+----------+| count(*) |+----------+|        3 |+----------+1 row in set (0.01 sec)</code></pre><h5 id="8-查询score表中成绩在90-92之间的所有记录"><a href="#8-查询score表中成绩在90-92之间的所有记录" class="headerlink" title="8 查询score表中成绩在90-92之间的所有记录"></a>8 查询score表中成绩在90-92之间的所有记录</h5><p>方法一：<code>between ... and ...</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from score where grade between 90 and 92; // 查询区间用between ... and ...+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 903       |    91 || 100        | 904       |    90 || 101        | 903       |    91 || 101        | 904       |    90 || 102        | 903       |    91 || 102        | 904       |    90 || 103        | 903       |    91 || 103        | 904       |    90 || 104        | 903       |    91 || 104        | 904       |    90 || 105        | 903       |    91 || 105        | 904       |    90 || 106        | 903       |    91 || 106        | 904       |    90 || 107        | 903       |    91 || 107        | 904       |    90 || 108        | 903       |    91 || 108        | 904       |    90 || 109        | 903       |    91 || 109        | 904       |    90 || 110        | 903       |    91 || 110        | 904       |    90 || 111        | 903       |    91 || 111        | 904       |    90 |+------------+-----------+-------+24 rows in set (0.00 sec)</code></pre><p>方法2：<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>和<code>&lt;=</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from score where grade >= 90 and grade <= 92;+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 903       |    91 || 100        | 904       |    90 || 101        | 903       |    91 || 101        | 904       |    90 || 102        | 903       |    91 || 102        | 904       |    90 || 103        | 903       |    91 || 103        | 904       |    90 || 104        | 903       |    91 || 104        | 904       |    90 || 105        | 903       |    91 || 105        | 904       |    90 || 106        | 903       |    91 || 106        | 904       |    90 || 107        | 903       |    91 || 107        | 904       |    90 || 108        | 903       |    91 || 108        | 904       |    90 || 109        | 903       |    91 || 109        | 904       |    90 || 110        | 903       |    91 || 110        | 904       |    90 || 111        | 903       |    91 || 111        | 904       |    90 |+------------+-----------+-------+24 rows in set (0.00 sec)</code></pre><h5 id="9-以course-no升序，grade降序查询scroe表的所有记录"><a href="#9-以course-no升序，grade降序查询scroe表的所有记录" class="headerlink" title="9 以course_no升序，grade降序查询scroe表的所有记录"></a>9 以course_no升序，grade降序查询scroe表的所有记录</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select * from score order by course_no asc, grade desc;+------------+-----------+-------+| student_no | course_no | grade |+------------+-----------+-------+| 100        | 900       |    95 || 111        | 900       |    95 || 101        | 900       |    95 || 105        | 900       |    95 || 110        | 900       |    95 || 102        | 900       |    95 || 109        | 900       |    95 || 103        | 900       |    95 || 108        | 900       |    95 || 104        | 900       |    95 || 107        | 900       |    95 || 106        | 900       |    95 || 100        | 901       |    93 || 107        | 901       |    93 || 111        | 901       |    93 || 101        | 901       |    93 || 110        | 901       |    93 || 102        | 901       |    93 || 105        | 901       |    93 || 109        | 901       |    93 || 103        | 901       |    93 || 106        | 901       |    93 || 108        | 901       |    93 || 104        | 901       |    93 || 100        | 902       |    96 || 101        | 902       |    96 || 102        | 902       |    96 || 103        | 902       |    96 || 104        | 902       |    96 || 105        | 902       |    96 || 107        | 902       |    96 || 106        | 902       |    96 || 108        | 902       |    96 || 109        | 902       |    96 || 110        | 902       |    96 || 111        | 902       |    96 || 104        | 903       |    91 || 107        | 903       |    91 || 103        | 903       |    91 || 108        | 903       |    91 || 102        | 903       |    91 || 106        | 903       |    91 || 109        | 903       |    91 || 101        | 903       |    91 || 110        | 903       |    91 || 100        | 903       |    91 || 105        | 903       |    91 || 111        | 903       |    91 || 104        | 904       |    90 || 107        | 904       |    90 || 103        | 904       |    90 || 105        | 904       |    90 || 108        | 904       |    90 || 102        | 904       |    90 || 109        | 904       |    90 || 101        | 904       |    90 || 106        | 904       |    90 || 110        | 904       |    90 || 100        | 904       |    90 || 111        | 904       |    90 |+------------+-----------+-------+60 rows in set (0.00 sec)</code></pre><h5 id="10-查询score表中的最高分的学生学号和课程编号。（子查询或排序）"><a href="#10-查询score表中的最高分的学生学号和课程编号。（子查询或排序）" class="headerlink" title="10 查询score表中的最高分的学生学号和课程编号。（子查询或排序）"></a>10 查询score表中的最高分的学生学号和课程编号。（子查询或排序）</h5><p>子查询方式：符合查询</p><pre class=" language-mysql"><code class="language-mysql">mysql> select student_no, course_no from score where grade=(select max(grade) from score); // 用max查询最大值+------------+-----------+| student_no | course_no |+------------+-----------+| 100        | 902       || 101        | 902       || 102        | 902       || 103        | 902       || 104        | 902       || 105        | 902       || 106        | 902       || 107        | 902       || 108        | 902       || 109        | 902       || 110        | 902       || 111        | 902       |+------------+-----------+12 rows in set (0.00 sec)</code></pre><p>排序方式：排序然后取第一个（<strong>小bug：当最高分有多个时，只会取到第一个</strong>）</p><pre class=" language-mysql"><code class="language-mysql">mysql> select student_no, course_no from score order by grade desc limit 0, 1;+------------+-----------+| student_no | course_no |+------------+-----------+| 100        | 902       |+------------+-----------+1 row in set (0.00 sec)</code></pre><h4 id="4-4-进阶练习"><a href="#4-4-进阶练习" class="headerlink" title="4.4 进阶练习"></a>4.4 进阶练习</h4><h5 id="1-查询每门课的平均成绩"><a href="#1-查询每门课的平均成绩" class="headerlink" title="1 查询每门课的平均成绩"></a>1 查询每门课的平均成绩</h5><p><code>avg</code>平均值关键字</p><p>单个操作</p><pre class=" language-mysql"><code class="language-mysql">mysql> select avg(grade) from score where course_no="900";+------------+| avg(grade) |+------------+|    95.0000 |+------------+1 row in set (0.00 sec)mysql> select avg(grade) from score where course_no="901";+------------+| avg(grade) |+------------+|    93.0000 |+------------+1 row in set (0.00 sec)mysql> select avg(grade) from score where course_no="902";+------------+| avg(grade) |+------------+|    96.0000 |+------------+1 row in set (0.00 sec)mysql> select avg(grade) from score where course_no="903";+------------+| avg(grade) |+------------+|    91.0000 |+------------+1 row in set (0.00 sec)mysql> select avg(grade) from score where course_no="904";+------------+| avg(grade) |+------------+|    90.0000 |+------------+1 row in set (0.00 sec)</code></pre><p>同步操作，使用<code>group by</code>的方式。</p><pre class=" language-mysql"><code class="language-mysql">mysql> select avg(grade) from score group by course_no;+------------+| avg(grade) |+------------+|    95.0000 ||    93.0000 ||    96.0000 ||    91.0000 ||    90.0000 |+------------+5 rows in set (0.00 sec)</code></pre><p>但是不知道成绩分别是谁的，所以需要添加课程编号</p><pre class=" language-mysql"><code class="language-mysql">mysql> select course_no, avg(grade) from score group by course_no;+-----------+------------+| course_no | avg(grade) |+-----------+------------+| 900       |    95.0000 || 901       |    93.0000 || 902       |    96.0000 || 903       |    91.0000 || 904       |    90.0000 |+-----------+------------+5 rows in set (0.00 sec)</code></pre><h5 id="2-查询score表中至少有2名学生选修的并以3结尾的课程的平均分数"><a href="#2-查询score表中至少有2名学生选修的并以3结尾的课程的平均分数" class="headerlink" title="2 查询score表中至少有2名学生选修的并以3结尾的课程的平均分数"></a>2 查询score表中至少有2名学生选修的并以3结尾的课程的平均分数</h5><p>关键字：<code>having</code>和<code>like</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> select course_no, avg(grade) from score group by course_no    -> having course_no >= 2 and course_no like "%3";+-----------+------------+| course_no | avg(grade) |+-----------+------------+| 903       |    91.0000 |+-----------+------------+1 row in set (0.00 sec)</code></pre><p>添加上展示人数的需求</p><pre class=" language-mysql"><code class="language-mysql">mysql> select course_no, avg(grade), count(*) from score group by course_no    -> having course_no >= 2 and course_no like "%3";+-----------+------------+----------+| course_no | avg(grade) | count(*) |+-----------+------------+----------+| 903       |    91.0000 |       12 |+-----------+------------+----------+1 row in set (0.00 sec)</code></pre><h5 id="3-查询所有学生的name-course-no和grade列"><a href="#3-查询所有学生的name-course-no和grade列" class="headerlink" title="3 查询所有学生的name, course_no和grade列"></a>3 查询所有学生的name, course_no和grade列</h5><p>字段来自于不同的表，涉及到多表查询</p><p>单个操作</p><pre class=" language-mysql"><code class="language-mysql">mysql> select name from student; // 查学生姓名+----------+| name     |+----------+| 二狗     || 山鸡     || 野驴     || 勒布朗   || 马冬梅   || 张全蛋   || 李淳罡   || 赵铁柱   || 王尼玛   || 灭绝师太 || 猪猪侠   || 玛卡巴卡 |+----------+12 rows in set (0.00 sec)mysql> select course_no, grade from score; // 查所有的成绩和对应课程编号+-----------+-------+| course_no | grade |+-----------+-------+| 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 || 900       |    95 || 901       |    93 || 902       |    96 || 903       |    91 || 904       |    90 |+-----------+-------+60 rows in set (0.00 sec)</code></pre><p>同步操作，由于两张表有相同的student_no，所以可以通过添加该条件来进行查询</p><pre class=" language-mysql"><code class="language-mysql">mysql> select name, course_no, grade from student, score    -> where student.student_no = score.student_no;+----------+-----------+-------+| name     | course_no | grade |+----------+-----------+-------+| 二狗     | 900       |    95 || 二狗     | 901       |    93 || 二狗     | 902       |    96 || 二狗     | 903       |    91 || 二狗     | 904       |    90 || 山鸡     | 900       |    95 || 山鸡     | 901       |    93 || 山鸡     | 902       |    96 || 山鸡     | 903       |    91 || 山鸡     | 904       |    90 || 野驴     | 900       |    95 || 野驴     | 901       |    93 || 野驴     | 902       |    96 || 野驴     | 903       |    91 || 野驴     | 904       |    90 || 勒布朗   | 900       |    95 || 勒布朗   | 901       |    93 || 勒布朗   | 902       |    96 || 勒布朗   | 903       |    91 || 勒布朗   | 904       |    90 || 马冬梅   | 900       |    95 || 马冬梅   | 901       |    93 || 马冬梅   | 902       |    96 || 马冬梅   | 903       |    91 || 马冬梅   | 904       |    90 || 张全蛋   | 900       |    95 || 张全蛋   | 901       |    93 || 张全蛋   | 902       |    96 || 张全蛋   | 903       |    91 || 张全蛋   | 904       |    90 || 李淳罡   | 900       |    95 || 李淳罡   | 901       |    93 || 李淳罡   | 902       |    96 || 李淳罡   | 903       |    91 || 李淳罡   | 904       |    90 || 赵铁柱   | 900       |    95 || 赵铁柱   | 901       |    93 || 赵铁柱   | 902       |    96 || 赵铁柱   | 903       |    91 || 赵铁柱   | 904       |    90 || 王尼玛   | 900       |    95 || 王尼玛   | 901       |    93 || 王尼玛   | 902       |    96 || 王尼玛   | 903       |    91 || 王尼玛   | 904       |    90 || 灭绝师太 | 900       |    95 || 灭绝师太 | 901       |    93 || 灭绝师太 | 902       |    96 || 灭绝师太 | 903       |    91 || 灭绝师太 | 904       |    90 || 猪猪侠   | 900       |    95 || 猪猪侠   | 901       |    93 || 猪猪侠   | 902       |    96 || 猪猪侠   | 903       |    91 || 猪猪侠   | 904       |    90 || 玛卡巴卡 | 900       |    95 || 玛卡巴卡 | 901       |    93 || 玛卡巴卡 | 902       |    96 || 玛卡巴卡 | 903       |    91 || 玛卡巴卡 | 904       |    90 |+----------+-----------+-------+60 rows in set (0.00 sec)</code></pre><h5 id="4-查询所有学生的student-no、-课程名称和成绩"><a href="#4-查询所有学生的student-no、-课程名称和成绩" class="headerlink" title="4 查询所有学生的student_no、 课程名称和成绩"></a>4 查询所有学生的student_no、 课程名称和成绩</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select student_no, name, grade from course, score where course.course_no = score.course_no;+------------+----------+-------+| student_no | name     | grade |+------------+----------+-------+| 100        | 金丹炼制 |    95 || 101        | 金丹炼制 |    95 || 102        | 金丹炼制 |    95 || 103        | 金丹炼制 |    95 || 104        | 金丹炼制 |    95 || 105        | 金丹炼制 |    95 || 106        | 金丹炼制 |    95 || 107        | 金丹炼制 |    95 || 108        | 金丹炼制 |    95 || 109        | 金丹炼制 |    95 || 110        | 金丹炼制 |    95 || 111        | 金丹炼制 |    95 || 100        | 洗头     |    93 || 101        | 洗头     |    93 || 102        | 洗头     |    93 || 103        | 洗头     |    93 || 104        | 洗头     |    93 || 105        | 洗头     |    93 || 106        | 洗头     |    93 || 107        | 洗头     |    93 || 108        | 洗头     |    93 || 109        | 洗头     |    93 || 110        | 洗头     |    93 || 111        | 洗头     |    93 || 100        | 养食人花 |    96 || 101        | 养食人花 |    96 || 102        | 养食人花 |    96 || 103        | 养食人花 |    96 || 104        | 养食人花 |    96 || 105        | 养食人花 |    96 || 106        | 养食人花 |    96 || 107        | 养食人花 |    96 || 108        | 养食人花 |    96 || 109        | 养食人花 |    96 || 110        | 养食人花 |    96 || 111        | 养食人花 |    96 || 100        | 洗炼丹炉 |    91 || 101        | 洗炼丹炉 |    91 || 102        | 洗炼丹炉 |    91 || 103        | 洗炼丹炉 |    91 || 104        | 洗炼丹炉 |    91 || 105        | 洗炼丹炉 |    91 || 106        | 洗炼丹炉 |    91 || 107        | 洗炼丹炉 |    91 || 108        | 洗炼丹炉 |    91 || 109        | 洗炼丹炉 |    91 || 110        | 洗炼丹炉 |    91 || 111        | 洗炼丹炉 |    91 || 100        | 修面     |    90 || 101        | 修面     |    90 || 102        | 修面     |    90 || 103        | 修面     |    90 || 104        | 修面     |    90 || 105        | 修面     |    90 || 106        | 修面     |    90 || 107        | 修面     |    90 || 108        | 修面     |    90 || 109        | 修面     |    90 || 110        | 修面     |    90 || 111        | 修面     |    90 |+------------+----------+-------+60 rows in set (0.01 sec)</code></pre><h5 id="5-查询所有学生的name-课程名称和grade列"><a href="#5-查询所有学生的name-课程名称和grade列" class="headerlink" title="5 查询所有学生的name, 课程名称和grade列"></a>5 查询所有学生的name, 课程名称和grade列</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select student.name, course.name, grade from student, course, score     -> where student.student_no = score.student_no and course.course_no = score.course_no;+----------+----------+-------+| name     | name     | grade |+----------+----------+-------+| 二狗     | 修面     |    90 || 二狗     | 洗炼丹炉 |    91 || 二狗     | 养食人花 |    96 || 二狗     | 洗头     |    93 || 二狗     | 金丹炼制 |    95 || 山鸡     | 修面     |    90 || 山鸡     | 洗炼丹炉 |    91 || 山鸡     | 养食人花 |    96 || 山鸡     | 洗头     |    93 || 山鸡     | 金丹炼制 |    95 || 野驴     | 修面     |    90 || 野驴     | 洗炼丹炉 |    91 || 野驴     | 养食人花 |    96 || 野驴     | 洗头     |    93 || 野驴     | 金丹炼制 |    95 || 勒布朗   | 修面     |    90 || 勒布朗   | 洗炼丹炉 |    91 || 勒布朗   | 养食人花 |    96 || 勒布朗   | 洗头     |    93 || 勒布朗   | 金丹炼制 |    95 || 马冬梅   | 修面     |    90 || 马冬梅   | 洗炼丹炉 |    91 || 马冬梅   | 养食人花 |    96 || 马冬梅   | 洗头     |    93 || 马冬梅   | 金丹炼制 |    95 || 张全蛋   | 修面     |    90 || 张全蛋   | 洗炼丹炉 |    91 || 张全蛋   | 养食人花 |    96 || 张全蛋   | 洗头     |    93 || 张全蛋   | 金丹炼制 |    95 || 李淳罡   | 修面     |    90 || 李淳罡   | 洗炼丹炉 |    91 || 李淳罡   | 养食人花 |    96 || 李淳罡   | 洗头     |    93 || 李淳罡   | 金丹炼制 |    95 || 赵铁柱   | 修面     |    90 || 赵铁柱   | 洗炼丹炉 |    91 || 赵铁柱   | 养食人花 |    96 || 赵铁柱   | 洗头     |    93 || 赵铁柱   | 金丹炼制 |    95 || 王尼玛   | 修面     |    90 || 王尼玛   | 洗炼丹炉 |    91 || 王尼玛   | 养食人花 |    96 || 王尼玛   | 洗头     |    93 || 王尼玛   | 金丹炼制 |    95 || 灭绝师太 | 修面     |    90 || 灭绝师太 | 洗炼丹炉 |    91 || 灭绝师太 | 养食人花 |    96 || 灭绝师太 | 洗头     |    93 || 灭绝师太 | 金丹炼制 |    95 || 猪猪侠   | 修面     |    90 || 猪猪侠   | 洗炼丹炉 |    91 || 猪猪侠   | 养食人花 |    96 || 猪猪侠   | 洗头     |    93 || 猪猪侠   | 金丹炼制 |    95 || 玛卡巴卡 | 修面     |    90 || 玛卡巴卡 | 洗炼丹炉 |    91 || 玛卡巴卡 | 养食人花 |    96 || 玛卡巴卡 | 洗头     |    93 || 玛卡巴卡 | 金丹炼制 |    95 |+----------+----------+-------+60 rows in set (0.00 sec)</code></pre><blockquote><p>可以用<code>as</code>关键字来给查询的字段起别名，如下</p><pre class=" language-mysql"><code class="language-mysql">mysql> select student.name as student, course.name as course, grade from student, course, score    -> where student.student_no=score.student_no and score.course_no=course.course_no;+----------+----------+-------+| student  | course   | grade | // 原先的两个name就变成了对应的别名+----------+----------+-------+| 二狗     | 修面     |    90 || 二狗     | 洗炼丹炉 |    91 || 二狗     | 养食人花 |    96 || 二狗     | 洗头     |    93 || 二狗     | 金丹炼制 |    95 |... // 省略+----------+----------+-------+60 rows in set (0.00 sec)</code></pre></blockquote><h5 id="6-查询“一班”学生每门课的平均分"><a href="#6-查询“一班”学生每门课的平均分" class="headerlink" title="6 查询“一班”学生每门课的平均分"></a>6 查询“一班”学生每门课的平均分</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select course_no, avg(grade) from score     -> where student_no in (select student_no from student where class="一班")    -> group by course_no;+-----------+------------+| course_no | avg(grade) |+-----------+------------+| 900       |    95.0000 || 901       |    93.0000 || 902       |    96.0000 || 903       |    91.0000 || 904       |    90.0000 |+-----------+------------+5 rows in set (0.01 sec)</code></pre><h5 id="7-查询和学号为104的同学同月出生的所有学生的student-no、name和birthday列"><a href="#7-查询和学号为104的同学同月出生的所有学生的student-no、name和birthday列" class="headerlink" title="7 查询和学号为104的同学同月出生的所有学生的student_no、name和birthday列"></a>7 查询和学号为104的同学同月出生的所有学生的student_no、name和birthday列</h5><pre class=" language-mysql"><code class="language-mysql">mysql> select student_no, name, birth from student // datetime类型的，用year函数查年份，month查月份    -> where month(birth) = (select month(birth) from student where student_no="104");+------------+--------+---------------------+| student_no | name   | birth               |+------------+--------+---------------------+| 104        | 马冬梅 | 1997-04-27 00:00:00 || 107        | 赵铁柱 | 1997-04-16 00:00:00 |+------------+--------+---------------------+2 rows in set (0.01 sec)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>console.log是“异步打印”吗——寻求console.log的打印机制</title>
      <link href="2021/04/27/guan-yu-js-zhong-console.log-de-da-yin-ji-zhi/"/>
      <url>2021/04/27/guan-yu-js-zhong-console.log-de-da-yin-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="console-log是“异步打印”吗——寻求console-log的打印机制"><a href="#console-log是“异步打印”吗——寻求console-log的打印机制" class="headerlink" title="console.log是“异步打印”吗——寻求console.log的打印机制"></a>console.log是“异步打印”吗——寻求console.log的打印机制</h1><blockquote><p>最近在跟进项目的过程中遇到一个很奇妙的问题，让我一度以为自己的电脑出现了故障（当然，从业未深的本白经常觉得电脑出故障哈哈哈）。但是经过死磕两小时，查阅了许多文章以后，我终于发现了问题所在，那就是js这个Console.log的打印机制问题，话不多说，一起来重现一下。</p></blockquote><h3 id="“bug”重现"><a href="#“bug”重现" class="headerlink" title="“bug”重现"></a>“bug”重现</h3><blockquote><p>当然这只是我以为的”bug”</p></blockquote><p>首先，我的项目需求是：如此如此~这般这般~</p><p>然后最后项目呈现的部分界面是这样的<br><img src="../../../../images/image-20210428085002419.png" style="zoom:67%;"></p><p>我会在对应的input输入框中输入对应的内容，然后当我点击<code>确定</code>按钮时，会向服务器发送ajax请求新增一条话术到数据库。</p><p>一个非常普通的弹窗，但是我在发起请求前想看一下我发送的数据，所以我在发送前<strong>对动态绑定的数据进行了打印</strong>，此时，问题出现了。我们先来看看代码</p><p><strong>js代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">addWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addWordsForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印数据</span>  <span class="token operator">...</span> <span class="token comment" spellcheck="true">//省略</span>  <span class="token keyword">await</span> API<span class="token punctuation">.</span><span class="token function">getWordsAdd</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此处为封装的axios请求方法</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>addWordsDialog <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭新增话术弹窗</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addWordsForm<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重置表单</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>我在输入框中输入了如下内容<br><img src="../../../../images/image-20210428091200157.png" style="zoom:67%;"></p><p>并且我预想的数据结构应该是下面这样，然后我就能正常发起请求添加话术</p><blockquote><p><em>{<strong>ob</strong>: Observer}</em></p><ul><li><p>wordsList: Array(3)</p><ul><li>0: “话术1”</li><li>1: “话术2”</li><li>2: “话术3”</li><li>3：”话术4“</li><li>length: 4</li></ul></li><li><p>wordsTitle: “测试话术”</p></li></ul></blockquote><p>但是当我拿到打印结果的时候，我感到非常的不可思议，因为：<strong>我的数据竟然“消失”了！！！</strong>，看图<br><img src="../../../../images/image-20210428092118751.png" style="zoom: 80%;"></p><p>这是为什么呢？我的数据从哪里开始丢失了？</p><h3 id="排查“bug”"><a href="#排查“bug”" class="headerlink" title="排查“bug”"></a>排查“bug”</h3><p>我觉得很奇怪，我想知道是哪一步出了问题，于是，首先我给input输入框添加了一个change事件，每次内容改变就打印一次话术表单的内容</p><p><strong>html:</strong></p><pre class=" language-html"><code class="language-html">...&lt;el-input  v-model="addWordsFormCopy.wordsList[index]"  autocomplete="off"  @change="formChange()" // 添加一个事件><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>...</code></pre><p><strong>Vuejs:</strong></p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">formChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addWordsForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印新增表单内容</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>当我输入了两条话术，毫无疑问他打印了两次内容，因为没输入完一次，他就会打印一次<br><img src="../../../../images/image-20210428092920234.png" style="zoom: 67%;"><br><img src="../../../../images/image-20210428093045025.png" style="zoom:80%;"></p><p>此时我想展开看看我输入的内容是否存在，以此来判断我的表单内容“消失”的问题是不是出在这个地方<br><img src="../../../../images/image-20210428093226031.png" style="zoom:80%;"></p><p>谢天谢地，他依然存在，也就证明表单内容在这个地方他没有“消失”</p><p>当然确实如此，起初我也觉得这里没有什么问题，但是我越看越觉得奇怪</p><p>突然，我发现了一个重大的问题，<strong>他们在不同时间打印，第一次打印的时候第二条话术还没有输入，为什么他已经打印出来了？？？</strong></p><p>这是什么机制？玄学？js的Bug？他预判了我的预判？</p><h5 id="第一次猜想"><a href="#第一次猜想" class="headerlink" title="第一次猜想"></a>第一次猜想</h5><p>我非常的兴奋，我的第一反应就是，<strong>难道js的console.log有个延时的机制</strong>？所以我再次测试：</p><p>我先输入一条话术，然后等了一段时间，再输入第二条话术，然后查看两条打印内容，</p><p>毫无疑问，两次打印内容还是长一样，也就是说，这个我以为的延时机制，他压根不存在。</p><p>OK，这个猜想pass。</p><h5 id="第二次猜想"><a href="#第二次猜想" class="headerlink" title="第二次猜想"></a>第二次猜想</h5><p>这次我认真思考了一下所学知识，是不是说他这个console.log都是打印最后一次的结果（当时也没想的很清楚，<strong>认为原理就有点类似于数据引用吧，当原数据发生改变，打印内容也发生改变</strong>），所以我如果输入一百次，第一次打印的结果也会变成第一百次的结果呢？</p><p>话不多说，直接开测，我先输入一条话术，然后看看打印内容<br><img src="../../../../images/image-20210428093702636.png" style="zoom:80%;"></p><p>毫无疑问，表单内容都还存在，并且只有一条，如上图</p><p>然后我把打印结果闭合，再输入第二条和第三条话术，再把他们都展开，我预想的是他们三次打印的内容一样，这样也就能验证我的第二次猜想，但是…..<br><img src="../../../../images/image-20210428111904279.png" style="zoom:80%;"></p><p>结果显而易见，我的猜想似乎又出现了问题，后面两次打印的内容是预想中的最终表单结果，但是第一次打印的内容还是一条。</p><p>测试到这我已经没有任何头绪，在MDN对于console的解释中也没有寻求到答案，只能选择求助百度和Google，查阅了一下console.log的打印机制的一些博文，最后在翻阅评论中找到了答案。</p><h3 id="寻求console-log打印原理"><a href="#寻求console-log打印原理" class="headerlink" title="寻求console.log打印原理"></a>寻求console.log打印原理</h3><p>在一本叫《你不知道的javascript中卷》的书中讲解有关控制台的部分中写道：</p><blockquote><p>并没有什么规范或一组需求指定console.* 方法族如何工作——它们并不是JavaScript 正式<br>的一部分，而是由宿主环境（请参考本书的“类型和语法”部分）添加到JavaScript 中的。因此，不同的浏览器和JavaScript 环境可以按照自己的意愿来实现，有时候这会引起混淆。</p><p>尤其要提出的是，在某些条件下，某些浏览器的console.log(..) 并不会把传入的内容立即输出。出现这种情况的主要原因是，在许多程序（不只是JavaScript）中，I/O 是非常低速的阻塞部分。所以，（从页面/UI 的角度来说）浏览器在后台异步处理控制台I/O 能够提高性能，这时用户甚至可能根本意识不到其发生。</p></blockquote><p>感觉好像不是很好懂？</p><p>举个简单的栗子，有以下js代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>    bar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>bar<span class="token operator">++</span><span class="token punctuation">;</span></code></pre><p>此时按照惯性思维，我们觉得打印操作在自增操作之前，也就意味着打印结果应该为<code>{bar: 1}</code>，但实际上是这样的<br><img src="../../../../images/image-20210428132459618.png"></p><p>觉得非常的奇怪，为什么他打印时显示<code>{bar: 1}</code>，但当我们把打印内容展开后，展示的却是<code>{bar: 2}</code>？</p><p>其实这就是涉及到上面引用的文字了，<strong>在某些条件下，某些浏览器（记住，某些浏览器）并不会把打印内容立即输出，而是浏览器在后台异步的处理控制台I/O，从而提高性能</strong>，说的通俗易懂一点，console.log可以理解为在某些条件下他是“<strong>异步打印</strong>”的（为什么打引号？因为实际上不是什么所谓的异步打印，只是打印的过程给人感觉起来像异步），当浏览器读取到<code>console.log(foo)</code>时，控制台会立即打印引用的快照</p><blockquote><p>什么是快照，你可以理解为调用了一次JSON.stringify()，将对象序列成一个字符串中展示</p></blockquote><p>就像下图一样<br><img src="../../../../images/image-20210428133124003.png"></p><p><strong>打印引用的快照以后他会继续逐行执行<code>console.log(foo)</code>后面的代码，而之后遇到了<code>foo.bar++</code>，于是对象foo对象里的bar值就自增变成了2。而当我们展开打印内容时，他才会去寻找这个引用的地址取得内容，并展示给用户。所以会给人一种异步打印的错觉，但其实，<code>console.log()</code>仍然是一个同步操作。</strong></p><p>所以理论上来说，只要你在浏览器读取到自增之前点开控制台打印内容，他应该还是<code>{bar: 1}</code>，至于理论能否落地？咱们来测试一下</p><p>假设咱的Chrome浏览器不太行了，要五秒以后才能读取到下一句代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  bar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次打印</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二次打印</span>  foo<span class="token punctuation">.</span>bar<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么在五秒内我们立即点开第一条打印内容会是什么样呢？<br><img src="../../../../images/image-20210428135207982.png"></p><p>果然，当我们在五秒内点开打印的内容时，由于还没有执行自增操作，所以他仍然是<code>{bar: 1}</code>，而五秒后的第二次打印，他的内容就跟我们预想的一样了。</p><blockquote><p>其实这种看起来像异步的打印方式，不仅是对条件有限制（比如打印的是个引用数据类型），对浏览器也有限制（老版的IE就会直接把整个引用地址的内容打印出来）。但是从某些方面看来，这也算是对浏览器的一种优化</p><p>为什么说是种优化呢，试想一下，如果你要打印引用地址内的参数非常多，并且打印次数也很多时，无数次的打印，对浏览器的消耗也会变得非常巨大。</p></blockquote><h3 id="复盘一下"><a href="#复盘一下" class="headerlink" title="复盘一下"></a>复盘一下</h3><p>再重新整理一下我最开始遇到的bug，咱们把代码拿过来</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">addWords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addWordsForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印数据</span>  <span class="token operator">...</span> <span class="token comment" spellcheck="true">//省略</span>  <span class="token keyword">await</span> API<span class="token punctuation">.</span><span class="token function">getWordsAdd</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此处为封装的axios请求方法</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>addWordsDialog <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭新增话术弹窗</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addWordsForm<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重置表单</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>为什么打印出来我的内容都“消失”了呢，原来是因为再上面这段代码的最后，我对表单内容进行了重置，也就意味着，当我点开控制台打印的数据时，访问到的引用地址内已经是一个空表单了，那么自然展示给我的打印内容也就都是空的啦~</p><p>我们试着直接打印一下这个表单里的话术列表</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addWordsForm<span class="token punctuation">.</span>wordsList<span class="token punctuation">)</span></code></pre><img src="../../../../images/image-20210428140250306.png" style="zoom:80%;"><p>结果就跟前面我们分析的一模一样，引用的快照内是有数据，但是展开后的最终引用地址内的数据已经被重置了，所以都是空字符串。</p><p>所以其实对实际开发没有影响，当我在重置表单之前将数据提交，数据其实依然存在，并没有”消失”。</p><p><strong>综上所述：</strong></p><ul><li>当你在用调试的过程中使用到了控制台打印，并且发现打印的引用快照与展开后的数据不符时，需要意识到，这是浏览器I/O的异步化造成的</li><li>而遇到这种情况，又想要调试时，最好还是选择在JavaScript的调试器中打断点，不能完全依赖控制台，因为控制台也会变魔术欺骗你的眼睛</li><li>那打断点嫌麻烦怎么办？那咱们就强制打印快照，看快照内容。什么？你问我怎么打？前面提过了，<strong>JSON.stringify(foo);</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何给标签伪元素添加鼠标事件</title>
      <link href="2021/04/20/ru-he-gei-wei-yuan-su-tian-jia-shu-biao-shi-jian/"/>
      <url>2021/04/20/ru-he-gei-wei-yuan-su-tian-jia-shu-biao-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="如何给标签伪元素-after和-before添加鼠标事件"><a href="#如何给标签伪元素-after和-before添加鼠标事件" class="headerlink" title="如何给标签伪元素::after和::before添加鼠标事件"></a>如何给标签伪元素<code>::after</code>和<code>::before</code>添加鼠标事件</h1><blockquote><p>今天在写项目时遇到了一个小问题，在一段文字中，我将超出父盒子部分隐藏并用省略号代替，然后父盒子添加了一个<code>::after</code>伪元素来显示了一个小图标，想通过点击这个小图标来触发事件打开展示所有文字的弹窗，突然发现我不知道如何给伪元素添加事件，经过查阅资料实现，记录并分享给大家。</p></blockquote><p>首先，对css比较熟悉的攻城狮们，一定对<code>::after</code>和<code>::before</code>两个伪元素非常熟悉，<strong>伪元素其实是一个元素的子元素</strong>，并且它是inline行内元素。给一个标签加上<code>::before</code>和<code>::after</code>，用浏览器检查。</p><p>它们的可以表现得像一个真实的元素一样，可以给它们设置边框、添加内容、修改颜色、背景，甚至添加图片，同时伪元素还有一个非常大的特点就是：<strong>它不存在于真实的html结构中。也就意味着，你无法用js获取到这个伪元素，或者增、删、改一个伪元素</strong></p><p>但同时伪元素的优点就体现在这里：<strong>你可以用伪元素制造视觉上的效果，但是不会增加JS查DOM的负担，它对JS是透明的。所以即使你给页面添加了很多伪元素，也不会影响查DOM的效率。</strong></p><p>同时，由于它不是一个实际的html标签，可以加快浏览器加载html文件，对优化SEO也是有帮助的。</p><hr><p>言归正传，既然我们无法用js操作DOM的方式去获取到这个伪元素，那如果正如我遇到的情况一样，如果我想对该伪元素进行添加事件时，该如何做呢？</p><p>聪明的小伙子当然会另寻他法：我们直接不用伪元素，用一个真实的标签不就可以了吗？</p><p>确实，直截了当，完美的解决了我所遇到的问题，但是，99分和100分，虽然只差一分，但是会相隔很多个排名哦~</p><p>如果我既可以完美利用到伪元素的优点，又可以实现添加事件操作，岂不是更加的完美？</p><h3 id="Talk-is-cheap-show-me-the-code！"><a href="#Talk-is-cheap-show-me-the-code！" class="headerlink" title="Talk is cheap, show me the code！"></a>Talk is cheap, show me the code！</h3><p><strong>html:</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个真实的html标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>css：</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 关闭元素鼠标事件 */</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">'这是我给标签添加的伪元素，注意添加伪元素content不可以省略，不然伪元素无效哦'</span><span class="token punctuation">;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 给伪元素鼠标事件 */</span><span class="token punctuation">}</span></code></pre><p><strong>js:</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加成功~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里我们用到了一个比较少用的样式：</p><ul><li><code>pointer-events</code>。</li></ul><p>那么这个东西是什么呢？我们摘抄一句MDN的描述：</p><ul><li><strong><code>pointer-events</code></strong> CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 target</li><li>具体详解 –&gt; <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events">传送门</a></li></ul><p>通俗点就是说，允不允许这个元素被鼠标操作。</p><p>在我们这个案例中，它由具体做了啥？让我们一步步解析：</p><ul><li>首先，我们给标签样式添加<code>pointer-events: none;</code>，此时这个标签永远不会成为鼠标事件的target，也就是说我们无论如何点击这个<code>div</code>标签，都是不会触发该标签绑定的<code>btnClick()</code>回调函数</li><li>然后，我们给该标签的<code>::after</code>伪元素（<code>::before</code>也是可以的）样式里添加一句<code>pointer-events: auto;</code>，相当于给这个伪元素开启了鼠标事件，当我们点击该伪元素时，是可以触发鼠标事件的。</li></ul><hr><p>此时又有一个问题出现：</p><ul><li>那伪元素不存在于html中，我们无法用js的方法操作伪元素，又该怎么给这个伪元素添加鼠标事件呢？</li></ul><p><strong>Keys：</strong></p><p>这里就用到一个非常重要的知识点：<strong>事件的捕获和冒泡</strong>。具体的事件冒泡和捕获知识我就不在这里详细阐述，不明觉厉的狮子们可以去查阅一下相关内容，大牛们的详解一定比我的更加深刻。</p><p>你只要知道，当我们给<code>div</code>标签设置了<code>pointer-events: none;</code>后，它虽然永远不会成为鼠标事件的target，但是，<strong>当其后代元素的<code>pointer-events</code>属性指定其他值时，鼠标事件可以指向后代元素</strong>，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</p><p>而毫无疑问，伪元素是这个标签元素的子元素，那么当我们给这个标签绑定了事件和回调函数，关闭了它的鼠标事件，同时给伪元素开启了鼠标事件，这个绑定的事件就指向了这个伪元素，同时在事件捕获或者冒泡阶段，就会触发这个绑定事件的回调函数啦~</p><blockquote><p>Tips：不过这种方法还是有一个比较明显的缺陷，那就是无法区分after和before或者是其他的伪元素，因为他是采用了事件捕获和冒泡的机制来触发父元素的绑定事件和回调函数，也就是说当我们对多个伪元素都开起了鼠标事件，无论是哪一个伪元素触发了鼠标事件，都被会父元素的侦听器捕捉到并触发回调函数，这样就无法实现区分了。</p><p>但是无论如何，还是比较推荐大量使用伪元素的，什么？你问为啥？提高性能呗，优化SEO呗~</p></blockquote><p>OK，以上就是本文的核心内容，如果有什么地方写的不恰当，欢迎指正~</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几个刷题网站</title>
      <link href="2021/04/14/tui-jian-ji-ge-shua-ti-wang-zhan/"/>
      <url>2021/04/14/tui-jian-ji-ge-shua-ti-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="推荐几个刷题网站"><a href="#推荐几个刷题网站" class="headerlink" title="推荐几个刷题网站"></a>推荐几个刷题网站</h1><blockquote><p>不知不觉，自学前端已经有一段时间了，每天都在汲取新知识，在有些时候会有种力不从心的感觉，对自己开始不自信，新的知识来不及学习，旧的知识已经渐渐遗忘，后来才慢慢发现，自己缺乏一种能够巩固自己知识的方式。从开始上学到大学毕业，其实老师都在教授我们这种方法，那就是刷题。通过刷题，可以巩固我们的理论基础，活学活用，查漏补缺，同时也可以在做题过程中不断提升自己的实力，收集了一些网上素材，下面推荐几个好用的刷题网站。</p></blockquote><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h3><ul><li><a href="https://leetcode.com/">传送门</a></li><li>Leetcode的题目类型较多，但是普遍偏基础，基本很少考察复杂的算法，很多都是对基础知识的应用，很适合刚刚入门的像我一样觉得心有余而力不足的小灰。</li></ul><h3 id="w3cschool"><a href="#w3cschool" class="headerlink" title="w3cschool"></a>w3cschool</h3><ul><li><a href="https://www.w3cschool.cn/exam/">传送门</a></li><li>w3c（万维网联盟）作为国际标准组织的万维网，他提供的刷题网站涵盖了计算机方面的各种知识，甚至计算机方面的考试刷题都有涉及，所以如果你寻求不到自己适合的题目时，不妨来这里看看，在这里一定会找到想要刷的内容</li></ul><h3 id="51CTO题库"><a href="#51CTO题库" class="headerlink" title="51CTO题库"></a>51CTO题库</h3><ul><li><a href="https://edu.51cto.com/t/exam/">传送门</a></li><li>51CTO题库包含了社会上大部分工作岗位的题库，当然计算机各个方向的题库都很丰富，不论你学那个专业，都能够找到你想要的资料。</li></ul><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a>牛客网</h3><ul><li><a href="https://www.nowcoder.com/contestRoom/">传送门</a></li><li>这个大家都应该非常熟悉了，作为应届生求职题库的代表，很多校园招聘的实习笔试面试真题都会在牛客网上找到，让你直接感受大厂公司面试真题，直接爽中爽。</li></ul><h3 id="赛码网"><a href="#赛码网" class="headerlink" title="赛码网"></a>赛码网</h3><ul><li><a href="https://www.acmcoder.com/index">传送门</a></li><li>在这里，可以选择自己心仪的大厂直接刷题训练，对标往届成绩线，距离一目了然，每套试卷标准都有难度系数，可以自行挑选。</li></ul><h3 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a>掘金</h3><ul><li><a href="https://juejin.cn/">传送门</a></li><li>笔者觉得这是一个能够帮助开发者迅速成长的网站，他通过原理讲解、代码解释、视频运行来解释函数的使用场景，并且你可以在掘金上搜索到几乎你遇到的所有困难，同时也会有很多业界大佬在掘金上发表文章，偶尔看看也会受益匪浅。</li></ul><h3 id="大前端面试题库"><a href="#大前端面试题库" class="headerlink" title="大前端面试题库"></a>大前端面试题库</h3><ul><li><a href="http://bigerfe.com/">传送门</a></li><li>在这里你会得到很多前端知识的分享，以及一些重点难点，通过仔细的文字介绍和代码对比，让你理解函数的区别，在这里，你可以找到令你困惑许久的问题答案。</li></ul><blockquote><p>当然光刷题是不够的，拥有过硬的实操经验和理论基础才是重中之重，大家一起加油吧，希望还在学习的伙伴能够“日行千里”，将要面试的伙伴，祝大家锦鲤护体，拿下心仪offer，然后日进斗金，飞黄腾达~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node中的模块系统之exports和module.exports的关系</title>
      <link href="2021/04/11/exports-he-module.exports-de-guan-xi/"/>
      <url>2021/04/11/exports-he-module.exports-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Node中的模块系统之exports和module-exports的关系"><a href="#Node中的模块系统之exports和module-exports的关系" class="headerlink" title="Node中的模块系统之exports和module.exports的关系"></a>Node中的模块系统之exports和module.exports的关系</h1><h2 id="1-什么是文件模块化"><a href="#1-什么是文件模块化" class="headerlink" title="1.什么是文件模块化"></a>1.什么是文件模块化</h2><ul><li>文件作用域</li><li>通信规则<ul><li>加载</li><li>导出</li></ul></li></ul><h2 id="2-CommonJS模块规则"><a href="#2-CommonJS模块规则" class="headerlink" title="2.CommonJS模块规则"></a>2.CommonJS模块规则</h2><p>在Node中的JavaScript有一个很重要的概念——模块系统。</p><ul><li>模块作用域</li><li>使用require方法加载模块</li><li>使用exports接口对象导出模块中的成员</li></ul><h4 id="2-1-加载require"><a href="#2-1-加载require" class="headerlink" title="2.1 加载require"></a>2.1 加载<code>require</code></h4><p>语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 自定义变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块'</span><span class="token punctuation">)</span></code></pre><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h4 id="2-2-导出exports"><a href="#2-2-导出exports" class="headerlink" title="2.2 导出exports"></a>2.2 导出<code>exports</code></h4><ul><li>Node中时模块作用域，默认文件中的左右成员只在当前文件模块内部有效</li><li>对希望可以被其他模块访问的成员，需要把这些公开的成员挂载到<code>exports</code>接口对象中</li></ul><p>导出多个成员（在对象中导出）：</p><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'eagle'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>family <span class="token operator">=</span> <span class="token punctuation">{</span>    father<span class="token punctuation">:</span> <span class="token string">'father'</span><span class="token punctuation">;</span>    morther<span class="token punctuation">:</span> <span class="token string">'morther'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>导出单个成员（直接拿到的函数、字符串等，不使用导出<code>exports</code>对象）：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span></code></pre><p>由于是单个赋值，将内容直接赋值给了exports，所以以下情况会导致覆盖：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导出第一个</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'i am the first exports'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出第二个</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i am the second exports'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 该情况只会导出第二个，后者会覆盖前者</span></code></pre><p>也可以通过以对象形式一次性直接导出多个成员：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'eagle'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    family<span class="token punctuation">:</span> <span class="token punctuation">{</span>        father<span class="token punctuation">:</span> <span class="token string">'father'</span><span class="token punctuation">;</span>        morther<span class="token punctuation">:</span> <span class="token string">'morther'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-模块原理"><a href="#3-模块原理" class="headerlink" title="3.模块原理"></a>3.模块原理</h2><p><strong>注意：<code>exports</code>是<code>module.exports</code>的一个引用！！！</strong></p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span></code></pre><p>在Node中，每一个模块的内部都有一个自己的<code>module</code>对象，而该对象中，有一个成员叫<code>exports</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实际添加的模块内容</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>而在代码的最后，默认有一个<code>return module.exports</code>，谁<code>require</code>了这个模块，谁就会获得这个<code>module.exports</code>接口对象</p><p>而实际写入文件的模块内容，其实就是在修改<code>module</code>对象的成员<code>exports</code>对象中的内容</p><p>而<code>exports</code>是对<code>module.exports</code>对象的一个引用，也就是说</p><p>所以：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// foo.js文件</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实际上：</span><span class="token comment" spellcheck="true">// var module = {</span><span class="token comment" spellcheck="true">//        exports: {</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var exports = module.exports; // exports 引用 module.exports</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// exports.a = 'foo';</span><span class="token comment" spellcheck="true">// module.exports.b = 'bar';</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// return module.exports;</span></code></pre><p>而当我们在另一个文件<code>require</code>时：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bar.js文件</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// .js后缀可以省略</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印内容为 { a: 'foo', b: 'bar' }</span></code></pre><blockquote><p>怼怼1号：如此说来，那 <code>exports </code>和<code>module.exports</code>岂不是没什么区别，那后者那么长，谁还会挑长的写呢？</p></blockquote><p>这确实是一个好问题，如果二者没有区别，那么他们必然没有存在的意义，那么区别在哪里呢？</p><p>仔细看前文的模块规则，发现只有在分次导出多个成员时，才存在<code>exports</code>和<code>module.exports</code>都合理的情况，而后面的导出单个成员用例，以及一次性导出多个成员用例中，却没有出现直接使用<code>exports</code>的情况</p><p>究其原因，还是那句话，<code>exports</code>只是对<code>module.exports</code>的一个引用，当对<code>module</code>对象内的<code>exports</code>对象进行修改时，二者没有区别，甚至使用<code>exports</code>更好（为什么？因为短！）</p><p>因为<code>var exports = module.exports;</code>的存在，他们指向的是同一个地址，但是归根究底，他俩始终不是同一个东西，当直接赋值时，如果使用<code>exports = 'foo'</code>的方式，那么原本<code>exports</code>与<code>module.exports</code>之间的引用关系就会断开，此时他们指向的地址不同，<code>exports</code>指向<code>'foo'</code>而不再是<code>module.exports</code></p><p>而前文提到，代码最后总是默认<code>return module.exports</code>，返回的不是<code>exports</code>，所以该方法无法实现导出。</p><hr><p><strong>Talk is cheap, show me the code!</strong></p><p>先举一个简单的例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时 bar 与 foo 建立了引用关系，他们所指向的为同一个空对象</span>foo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'eagle'</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span>bar<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'crow'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印内容为 { name: 'crow', age: 18 }</span><span class="token comment" spellcheck="true">// 但是当我们对例子中的 bar 进行重新赋值操作时, bar 与 foo之间的引用关系断开</span>bar <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {}</span><span class="token comment" spellcheck="true">// 所以此时对 bar 做任何操作，都不会影响到 foo 的内容</span>bar<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ealge'</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'ealge', age: 16 }</span><span class="token comment" spellcheck="true">// return foo;</span></code></pre><p>这个例子很好理解，那么同理，我们来梳理一下<code>exports</code>和<code>module.exports</code>的关系</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// module.exports => foo</span><span class="token comment" spellcheck="true">// exports => bar</span><span class="token comment" spellcheck="true">// var module = {</span><span class="token comment" spellcheck="true">//     exports: {</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var exports = module.exports;</span><span class="token comment" spellcheck="true">// 以上为默认代码</span><span class="token comment" spellcheck="true">// 此时我们对模块内容进行修改</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'eagle'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为返回的是module.exports，所以我们也只打印他，模拟被require情形</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'crow'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 18 }</span><span class="token comment" spellcheck="true">// 以上为分次导出多个对象，现在我们想进行直接赋值导出如果使用 exports</span>exports <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时 exports 与 module.exports 之间的引用关系断开，但返回的仍然时module.exports，无论exports如何修改都无法干预到module.exports</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 18 }</span><span class="token comment" spellcheck="true">// 同理一次导出多个成员也一样，由于对exports进行了重新赋值，断开了引用关系，所以无法通过exports修改module.exports</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 18 }</span><span class="token comment" spellcheck="true">// 以下为默认代码</span><span class="token comment" spellcheck="true">// return module.exports;</span></code></pre><hr><blockquote><p>怼怼2号：那这样的话，我们在后面对其进行重新建立引用关系不就行了吗？</p></blockquote><p>有道理啊，重新建立关系，就能够对模块内容进行修改了不是吗？</p><p>答案是肯定的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var module = {</span><span class="token comment" spellcheck="true">//     exports: {</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var exports = module.exports;</span><span class="token comment" spellcheck="true">// 以上为默认代码</span><span class="token comment" spellcheck="true">// 此时我们对模块内容进行修改</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'eagle'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 老规矩，因为返回的是module.exports，所以我们也只打印他，模拟被require情形</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span><span class="token comment" spellcheck="true">// 我们先'断开链接'，由于引用关系断开，所以我们对exports的修改无法影响到返回内容</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span><span class="token comment" spellcheck="true">// 现在我们重新建立引用关系，此时因为对 exports 重新赋值，所以上面的修改内容被丢弃，exports 指向 module.exports</span>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改模块内容</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'crow'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 成功修改模块内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 16 }</span><span class="token comment" spellcheck="true">// 以下为默认代码</span><span class="token comment" spellcheck="true">// return module.exports;</span></code></pre><p>综上所述，重新建立连接确实可以实现继续对模块内容进行修改，但是重新建立连接以后<code>exports</code>依然还是只能分次导出多个成员，无法取代<code>module.exports</code>的地位。</p><hr><p>此时有一种新的情况出现，值得思考</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// var module = {</span><span class="token comment" spellcheck="true">//     exports: {</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var exports = module.exports;</span><span class="token comment" spellcheck="true">// 以上为默认代码</span><span class="token comment" spellcheck="true">// 此时我们对模块内容进行修改</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'eagle'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span><span class="token comment" spellcheck="true">// 当我们用赋值方法一次性导出多个成员时</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'crow'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 16, sayHi: [Function: sayHi] }</span><span class="token comment" spellcheck="true">// 但此时我们如果在想用exports进行修改内容</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'crow', age: 16, sayHi: [Function: sayHi] } </span><span class="token comment" spellcheck="true">// 显而易见，修改失败</span><span class="token comment" spellcheck="true">// 为什么呢？前面不是写了 exports = module.exports 了嘛？</span><span class="token comment" spellcheck="true">// 我们来打印一下</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 其实与 exports 重新赋值概念相同，当我们使用 module.exports 重新赋值导出时，并不是将原来地址内容进行覆盖修改，而是重新开辟了新的地址来储存新的对象，而原来的地址内容是由 exports 指向</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'eagle', age: 18 }</span><span class="token comment" spellcheck="true">// 以下为默认代码</span><span class="token comment" spellcheck="true">// return module.exports;</span></code></pre><blockquote><p>最后引用一下Node官方文档的内容：</p><p><code>exports</code>允许使用快捷方式，因此<code>module.exports.f = ...</code>可以更简洁地编写为<code>exports.f = ...</code>。但是，请注意，就像任何变量一样，如果将新值分配给<code>exports</code>，则它不再绑定到<code>module.exports</code>。</p><p>当该<code>module.exports</code>属性完全被新对象替换时，通常也要重新分配<code>exports</code>。</p></blockquote><p>总结一下：emm…..如果你实在是搞不懂<code>exports</code>和<code>module.exports</code>之间的区别，那就忘记<code>exports</code>，只使用<code>module.exports</code>也是没有问题的，over！</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI-input的type=&#39;number&#39;时去掉上下箭头和鼠标滚轮滚动事件</title>
      <link href="2021/04/01/elementui-input-de-type-number-shi-qu-diao-shang-xia-jian-tou-he-shu-biao-gun-lun-gun-dong-shi-jian/"/>
      <url>2021/04/01/elementui-input-de-type-number-shi-qu-diao-shang-xia-jian-tou-he-shu-biao-gun-lun-gun-dong-shi-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="话不多说，直接贴代码，亲测有用"><a href="#话不多说，直接贴代码，亲测有用" class="headerlink" title="话不多说，直接贴代码，亲测有用~"></a>话不多说，直接贴代码，亲测有用~</h3><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><ul><li><p>用去禁用input输入框中滚轮可以调节数字的事件</p><ul><li><pre class=" language-html"><code class="language-html">&lt;el-input    type="number" // input的type为"number"    min="0"    style="flex: 1; text-align: center;"    v-model="Form"    autocomplete="off"    @mousewheel.native.prevent  // 添加上这句代码即可，禁用鼠标滚动事件><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h4><ul><li><p>用于去除input中的上下箭头：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-element">::-webkit-outer-spin-button</span>,input<span class="token pseudo-element">::-webkit-inner-spin-button</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input<span class="token attribute">[type='number']</span> </span><span class="token punctuation">{</span>  <span class="token property">-moz-appearance</span><span class="token punctuation">:</span> textfield<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>如果以上代码没有作用，查看style标签是否添加了<code>scoped</code>，如果是，那么需要在进行样式穿透，即在样式代码块前添加<code>::v-deep</code>或者<code>/deep/</code>即可</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">/deep/ input<span class="token pseudo-element">::-webkit-outer-spin-button</span>,/deep/ input<span class="token pseudo-element">::-webkit-inner-spin-button</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">/deep/ input<span class="token attribute">[type='number']</span> </span><span class="token punctuation">{</span>  <span class="token property">-moz-appearance</span><span class="token punctuation">:</span> textfield<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element UI </tag>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="2021/02/14/vue-xue-xi-bi-ji/"/>
      <url>2021/02/14/vue-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自从学习前端开发这几个月来，小白本白渐渐开始习惯了操作DOM元素的编程方式，甚至上一篇的jQuery上手也非常快（因为本质上都是操作DOM），而学完前面的那些基础内容以后，我开始去找一些前端框架的内容进行学习，于时接触到了Vue（因为开发团队有中国人尤大大，所以开发文档写的非常好，很方便阅读），开始学习的几个小时，我几乎没有怎么听懂，他有点颠覆了我之前学习的开发方式，让我突然觉得前端有点难学。但是，只要慢慢坚持，一步步走下来，就会发现Vue这种操作数据的开发方式似乎更加的便捷，</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Vuejs </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习笔记</title>
      <link href="2021/02/14/jquery-xue-xi-bi-ji/"/>
      <url>2021/02/14/jquery-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jQuery是小白EagleH正式接触的除web前端三件套以外的第一门前端工具，也是从jQuery的学习中，渐渐开始觉得合理运用这些不一样的思想和方法，对于前端开发来说更为的简单方便了，正如jQuery封面上写的那句：Write less, Do more。朋友告诉我，不论是后面要学习Vue还是React亦或者是其他框架，他们的思想都是从jQuery中获得的启发，所以不论将来是否使用jQuery，将它的思想和基础内容学习一下也是非常有利于以后其他内容的学习的，所以我花了几天时间学习了jQuery的基础内容，并写下这篇笔记~</p></blockquote><h1 id="jQuery-学习笔记"><a href="#jQuery-学习笔记" class="headerlink" title="jQuery 学习笔记"></a>jQuery 学习笔记</h1><h3 id="一、新老对比"><a href="#一、新老对比" class="headerlink" title="一、新老对比~"></a>一、新老对比~</h3><ul><li>原生JS的缺陷：<ul><li>不能添加多个入口函数，后面的会层叠前面的，万一忘记了，重新添加了一个，岂不是很麻烦~</li><li>原生JS的API名字都太长了<del>不好记呀</del></li><li>原生JS代码易冗余</li><li>原生JS中易出现兼容性问题~</li><li>容错率较低</li></ul></li><li>啊哈，新来的jQuery就可以很好的解决这些问题啦</li><li>那么jQuery到底是什么呢？<ul><li>首先jQuery是一个JS库（library），是一个<strong>封装好的特定的集合</strong>（方法和函数）</li></ul></li><li>jQuery到底做了什么呢？<ul><li>jQuery封装了JavaScript常用的功能代码，优化了DOM操作、事件处理、动画设计和Ajax交互</li></ul></li></ul><blockquote><p>ok，话不多说，我们直接开始~</p></blockquote><h3 id="二、认识jQuery"><a href="#二、认识jQuery" class="headerlink" title="二、认识jQuery"></a>二、认识jQuery</h3><h4 id="2-1-jQuery的入口函数"><a href="#2-1-jQuery的入口函数" class="headerlink" title="2.1 jQuery的入口函数"></a>2.1 jQuery的入口函数</h4><ol><li><p><code>$(document).ready(function() { ... // 此处为页面DOM加载完毕的入口，其他js代码就写在这里面~ });</code></p></li><li><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span> <span class="token comment" spellcheck="true">//此处为页面DOM加载完毕的入口，其他js代码就写在这里面~</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>等DOM结构渲染完毕即可执行内部代码</li><li>相当于原生JS中的DOMContentLoaded</li><li>更推荐使用第二种入口函数。什么？你问为什么？因为简单嘛~</li></ul><h4 id="2-2-jQuery的顶级对象"><a href="#2-2-jQuery的顶级对象" class="headerlink" title="2.2 jQuery的顶级对象$"></a>2.2 jQuery的顶级对象<code>$</code></h4><ul><li><code>$</code>是jQuery的顶级对象，相当于原生JS中的<code>window</code>，把元素利用<code>$</code>包装成jQuery对象，就可以调用jQuery的方法了</li><li><code>$</code>还有个别称就是<code>jQuery</code>，两者可以互相代替</li></ul><h4 id="2-3-jQuery对象和DOM对象"><a href="#2-3-jQuery对象和DOM对象" class="headerlink" title="2.3 jQuery对象和DOM对象"></a>2.3 jQuery对象和DOM对象</h4><ul><li>用原生JS获取的对象就是DOM对象，用jQuery获取的元素就是jQuery对象</li><li>jQuery对象的本质：利用<code>$</code>对DOM对象进行包装后产生的对象（伪数组形式）</li><li><strong>两种不同的对象只能使用各自的方法和属性，不可以混用</strong></li><li>DOM对象和jQuery对象之间可以相互转换（<strong>特殊情况下使用，因为有的属性方法还没有包装，但需要的时候，可以进行转换</strong>）<ul><li>DOM对象转为jQuery对象：<code>$(DOM对象)</code></li><li>jQuery对象转为DOM对象：<ul><li><code>$('div')[index]</code></li><li><code>$('div').get(index)</code></li><li>两种方法都可以，其中的index代表索引号</li></ul></li></ul></li></ul><h3 id="三、jQuery选择器"><a href="#三、jQuery选择器" class="headerlink" title="三、jQuery选择器"></a>三、jQuery选择器</h3><h4 id="3-1-jQuery基础选择器"><a href="#3-1-jQuery基础选择器" class="headerlink" title="3.1 jQuery基础选择器"></a>3.1 jQuery基础选择器</h4><ul><li>语法：<code>$("选择器")</code></li><li>里面直接写CSS选择器即可，别忘了引号<code>" "</code></li><li>打个比方：<ul><li><code>$("#id")</code>：id选择器</li><li><code>$("*")</code>：选取所有的元素</li><li><code>$(".class")</code>：.class选择器</li><li><code>$("div")</code>：元素选择器</li><li><code>$("div, p, li")</code>：选取多个元素</li><li><code>$("li.current")</code>：选取class为current的li元素</li></ul></li></ul><h4 id="3-2-层级选择器"><a href="#3-2-层级选择器" class="headerlink" title="3.2 层级选择器"></a>3.2 层级选择器</h4><ul><li>子代选择器：<code>$("ul&gt;li")</code><ul><li>选取<code>ul</code>的亲儿子<code>li</code></li></ul></li><li>后代选择器：<code>$("ul li")</code><ul><li>选取<code>ul</code>的后代<code>li</code>（可能是儿子或者更后代）</li></ul></li></ul><blockquote><p><strong>隐式迭代：</strong></p><p>遍历内部DOM元素（伪数组形式）的过程成为隐式迭代</p></blockquote><h4 id="3-3-筛选选择器"><a href="#3-3-筛选选择器" class="headerlink" title="3.3 筛选选择器"></a>3.3 筛选选择器</h4><ol><li><code>$("li:first")</code>：第一个li元素</li><li><code>$("li:last")</code>：最后一个li元素</li><li><code>$("li:eq(3)")</code>：第四个li元素（参数从0开始）</li><li><code>$("li:odd")</code>：奇数个</li><li><code>$("li:even")</code>：偶数个</li></ol><h4 id="3-4-jQuery筛选方法"><a href="#3-4-jQuery筛选方法" class="headerlink" title="3.4 jQuery筛选方法"></a>3.4 jQuery筛选方法</h4><ol><li><code>$("li").parent();</code>：亲父级元素</li><li><code>$("ul").children("li");</code>：亲子级元素</li><li><code>$("li").find("li");</code>：后代子级元素</li><li><code>$(".first").sibling("li");</code>：兄弟元素（不包含自身）</li><li><code>$(".first").nextAll();</code>：之后的所有兄弟元素</li><li><code>$(".last").prevAll();</code>：之前的所有兄弟元素</li><li><code>$("div").hasClass("protect");</code>：检查当前元素是否含有某个特定的类，有则返回true</li><li><code>$("li").eq(2);</code> = <code>$("li.eq(2)");</code>：第三个li</li></ol><h3 id="四、jQuery样式操作"><a href="#四、jQuery样式操作" class="headerlink" title="四、jQuery样式操作"></a>四、jQuery样式操作</h3><h4 id="4-1-操作CSS的方法"><a href="#4-1-操作CSS的方法" class="headerlink" title="4.1 操作CSS的方法"></a>4.1 操作CSS的方法</h4><ol><li><p>参数只写属性名，则返回属性值：<code>$(this).css("color");</code></p></li><li><p>参数是<code>属性名，属性值</code>，逗号分开，是设置一组样式，属性必须加引号，值若为数字则可以不用跟单位和引号：<code>$(this).css("color","red");</code></p></li><li><p>参数可以是对象形式，方便设置多组样式，属性名和属性值用<code>:</code>分割，属性可以不用加引号：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>    <span class="token string">"font-size"</span><span class="token punctuation">:</span> <span class="token string">"20px"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><h4 id="4-2-设置类样式方法"><a href="#4-2-设置类样式方法" class="headerlink" title="4.2 设置类样式方法"></a>4.2 设置类样式方法</h4><ul><li><strong>类名千万别加点</strong></li><li>添加类：<code>$("div").addClass("current");</code></li><li>删除类：<code>$("div").removeClass("current");</code></li><li>切换类：<code>$("div").toggleClass("current");</code> // 有<code>current</code>类就删掉，没有就加上</li></ul><h4 id="4-3-类操作与className的区别"><a href="#4-3-类操作与className的区别" class="headerlink" title="4.3 类操作与className的区别"></a>4.3 类操作与className的区别</h4><ul><li>原生JS中的className会覆盖元素原先的类名</li><li>jQuery类操作只对指定类进行操作，不影响原类名</li></ul><h3 id="五、jQuery效果（动画）"><a href="#五、jQuery效果（动画）" class="headerlink" title="五、jQuery效果（动画）"></a>五、jQuery效果（动画）</h3><h4 id="5-1-显示-隐藏效果"><a href="#5-1-显示-隐藏效果" class="headerlink" title="5.1 显示/隐藏效果"></a>5.1 显示/隐藏效果</h4><ul><li>显示语法：<code>show([speed, [easing], [fn]]);</code></li><li>隐藏语法：<code>hide([speed, [easing], [fn]]);</code></li><li>参数都可以省略，无动画则直接显示（一般都不加参数，太丑了~）</li><li>参数：<ul><li>speed：三种预设速度（“slow”，“normal”（默认），“fast”）或者表示动画持续时长的<strong>毫秒数</strong></li><li>easing：（Optional）用来指定切换效果，默认是“swing”，可用“linear”</li><li>fn：回调函数，动画完成时执行，每个元素执行一次</li></ul></li><li>切换效果：<code>toggle([s, [e], [f]]);</code><ul><li>切换隐藏和显示效果</li><li>用法与隐藏显示一致</li></ul></li></ul><h4 id="5-2-滑动效果"><a href="#5-2-滑动效果" class="headerlink" title="5.2 滑动效果"></a>5.2 滑动效果</h4><ul><li>下拉滑动：<code>slideDown([speed, [easing], [fn]]);</code></li><li>上拉滑动：<code>slideUp([speed, [easing], [fn]]);</code></li><li>切换：<code>slideToggle([speed, [easing], [fn]]);</code></li><li>参数与显示隐藏一致</li></ul><h4 id="5-3-事件切换"><a href="#5-3-事件切换" class="headerlink" title="5.3 事件切换"></a>5.3 事件切换</h4><ul><li><code>hover([over,]out)</code></li><li>参数：<ul><li>over：鼠标经过触发函数，相当于mouseover</li><li>out：鼠标离开触发函数，相当于mouseout</li><li>若只写一个函数，则鼠标经过和离开都会触发</li></ul></li></ul><blockquote><p><strong>一个小bug：</strong></p><p>当一个动画效果在瞬间被触发多次，他会强制执行多次，从而产生排队效果，当你停止触发时，他还是会将排队的效果呈现完毕才会停止。</p><ul><li>动画队列：动画/效果一旦出发就必定会执行完毕，若多次出发，就会造成动画/效果的排队执行</li></ul><p>解决方法：</p><ul><li>停止排队：用<code>stop()</code>停止上一个动画</li><li>注意：<code>stop()</code>应写到动画或者效果的前面（用来停止前一个）</li></ul></blockquote><h4 id="5-4-淡入淡出效果"><a href="#5-4-淡入淡出效果" class="headerlink" title="5.4 淡入淡出效果"></a>5.4 淡入淡出效果</h4><ul><li><p>淡入：<code>fadeIn([s, [e], [f]]);</code></p></li><li><p>淡出：<code>fadeOut([s, [e], [f]]);</code></p></li><li><p>切换：<code>fadeToggle([s, [e], [f]]);</code></p></li><li><p>渐进式调整到指定的不同透明度：<code>fadeTo([s], opacity, [e], [f]);</code></p><ul><li><code>opacity</code>透明度，必须写，取值在<code>0~1</code>之间</li><li><code>speed</code>也必须写</li></ul></li></ul><h4 id="5-5-自定义动画"><a href="#5-5-自定义动画" class="headerlink" title="5.5 自定义动画"></a>5.5 自定义动画</h4><ul><li>语法：<code>animate(params, [speed], [easing], [fn]);</code></li><li>参数：<ul><li>params：想要改变的样式属性，以对象形式传递，必须写。</li><li>属性名可以不带引号，若为复合属性名字采取驼峰命名法</li></ul></li><li>其他参数与显示隐藏一致</li></ul><h3 id="六、jQuery属性操作"><a href="#六、jQuery属性操作" class="headerlink" title="六、jQuery属性操作"></a>六、jQuery属性操作</h3><ul><li><p>设置或获取元素固有属性<code>prop()</code>：<code>$("a").prop("href");</code>获取<code>href</code>属性</p><ul><li>获取：<code>$(" ").prop("属性");</code></li><li>设置：<code>$(" ").prop("属性", "属性值");</code></li></ul></li><li><p>设置或获取元素自定义属性<code>attr();</code></p><ul><li>获取：<code>$(" ").attr("自定义属性");</code></li><li>设置：<code>$(" ").attr("自定义属性", "属性值");</code></li></ul></li><li><p>数据缓存<code>data()</code></p><ul><li><p>可以在指定的元素上存取数据，并不会修改DOM元素结构，一旦页面刷新，存放的数据将被移除</p></li><li><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span> <span class="token string">"andy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这段代码在DOM中并不会显示</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span> <span class="token string">"andy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印内容为："andy"</span></code></pre></li><li><p>用<code>data()</code>也可以获取H5自定义属性的属性值，不同点：</p><ul><li>不用写<code>data-</code></li><li>返回类型也不同</li></ul></li></ul></li></ul><h3 id="六、jQuery内容文本"><a href="#六、jQuery内容文本" class="headerlink" title="六、jQuery内容文本"></a>六、jQuery内容文本</h3><ul><li>主要针对元素的内容和表单的值</li><li>普通元素内容<code>html()</code>（相当于原生的<code>innerHTML</code>）<ul><li>参数为空则表示获取元素内容</li><li>参数有内容则表示设置元素内容</li></ul></li><li>普通元素文本内容<code>text()</code>（相当于原生的<code>innerText</code>）<ul><li>参数信息与<code>html</code>相同</li><li>只对文本内容进行操作，不涉及标签、空格和换行</li></ul></li><li>表单的值<code>val()</code><ul><li>相当于原生的<code>value()</code></li><li>参数同上</li></ul></li></ul><h3 id="七、jQuery元素操作"><a href="#七、jQuery元素操作" class="headerlink" title="七、jQuery元素操作"></a>七、jQuery元素操作</h3><ul><li>主要是遍历、创建、添加、删除元素操作</li></ul><h4 id="7-1-遍历元素"><a href="#7-1-遍历元素" class="headerlink" title="7.1 遍历元素"></a>7.1 遍历元素</h4><ul><li>jQuery隐式迭代是对同一元素做相同的操作，若要进行不同操作时，则需要遍历<ol><li>语法1：<code>$("div").each(fonction(index, demEle) {xxx; })</code><ul><li><code>each()</code>方法遍历匹配每一个元素，主要用DOM处理</li><li>回调函数有两个参数：<ul><li><code>index</code>是每一个元素的索引号</li><li><code>domEle</code>是每个DOM元素，不是jQuery对象</li></ul></li><li>想要作jQuery的方法，需要将DOM元素转换为jQuery对象（<code>$(DOM对象);</code>）</li></ul></li><li>语法2：<code>$.each(object, function(index, ele) {xxx;})</code><ul><li><code>$.each</code>可用于遍历任何对象，主要用于数据处理，如数组、对象</li><li><code>index</code>为索引号，<code>ele</code>为遍历对象</li></ul></li></ol></li></ul><h4 id="7-2-创建元素"><a href="#7-2-创建元素" class="headerlink" title="7.2 创建元素"></a>7.2 创建元素</h4><ul><li><code>$("&lt;li&gt;&lt;/li&gt;")</code> ：动态创建了一个li标签</li></ul><h4 id="7-3-添加元素"><a href="#7-3-添加元素" class="headerlink" title="7.3 添加元素"></a>7.3 添加元素</h4><ul><li>内部添加（为父子关系）：<ul><li><code>element.append(" ");</code>放到最后（”element“里的最后）</li><li><code>element.prepend(" ");</code>放到最前面</li></ul></li><li>外部添加（兄弟关系）：<ul><li><code>element.after(" ");</code>放到element后面</li><li><code>element.before(" ");</code>放到element前面</li></ul></li></ul><h4 id="7-4-删除元素"><a href="#7-4-删除元素" class="headerlink" title="7.4 删除元素"></a>7.4 删除元素</h4><ul><li><code>element.remove();</code>删除匹配的元素（本身）</li><li><code>element.empty();</code>删除匹配的元素集合中的<strong>所有子节点</strong></li><li><code>element.html(" ");</code>清空匹配的元素内容</li></ul><h3 id="八、jQuery事件"><a href="#八、jQuery事件" class="headerlink" title="八、jQuery事件"></a>八、jQuery事件</h3><h4 id="8-1-事件注册"><a href="#8-1-事件注册" class="headerlink" title="8.1 事件注册"></a>8.1 事件注册</h4><ul><li>单个事件注册：<code>element.事件(function() {});</code><ul><li>示例：<code>$("div").click(function() {事件处理程序})</code></li></ul></li><li>其他事件类型基本与原生一致：mouseover, mouseout, blur, focus, change, keydown, keyup, resize, scroll等</li></ul><h4 id="8-2-事件处理on-绑定事件"><a href="#8-2-事件处理on-绑定事件" class="headerlink" title="8.2 事件处理on()绑定事件"></a>8.2 事件处理on()绑定事件</h4><ul><li><code>on()</code>方法在匹配元素上绑定<strong>一个或多个</strong>事件的事件处理函数</li><li>语法：<code>element.on(events, [selector], fn);</code><ul><li><code>events</code>：一个或多个用空格隔开的事件类型</li><li><code>selector</code>：元素的子元素选择器</li><li><code>fn</code>：回调函数，即绑定在元素身上的侦听函数</li></ul></li><li>优势：<ul><li>可以绑定多个事件和多个事件处理程序</li><li>可以实现事件委派操作</li><li>动态创建的元素，<code>click()</code>没有办法绑定事件，<code>on()</code>可以给动态生成的元素绑定事件</li></ul></li></ul><h4 id="8-3-事件处理off-解绑事件"><a href="#8-3-事件处理off-解绑事件" class="headerlink" title="8.3 事件处理off( )解绑事件"></a>8.3 事件处理off( )解绑事件</h4><ul><li><code>$("p").off()</code>：解绑p元素的所有事件处理程序</li><li><code>$("p").off("click")</code>：解绑p上的点击事件</li><li><code>$("ul").off("click", "li")</code>：解绑事件委托</li></ul><h4 id="8-4-其他事件"><a href="#8-4-其他事件" class="headerlink" title="8.4 其他事件"></a>8.4 其他事件</h4><ul><li>有些时间只触发一次，可以用<code>one()</code>来绑定<ul><li><code>$("div").one(function() {})</code></li></ul></li><li>自动触发事件<code>trigger()</code><ul><li>有些事件希望自动触发，如轮播图自动播放等，可以利用定时器触发，不必点击触发</li><li><code>element.click()</code>简写形式 <code>元素.事件()</code></li><li><code>element.trigger("type")</code>//<code>元素.trigger("事件")</code></li><li><code>element.triggeHandler("type")</code></li><li>区别：第三种不会触发元素的默认行为</li></ul></li></ul><h4 id="8-5-jQuery事件对象"><a href="#8-5-jQuery事件对象" class="headerlink" title="8.5 jQuery事件对象"></a>8.5 jQuery事件对象</h4><ul><li>事件被触发，就会有事件对象产生</li><li><code>element.on(events, [selector], function(event) {})</code></li><li>阻止默认行为：<code>event.preventDefault();</code>或<code>return false;</code></li><li>阻止冒泡：<code>event.stopPropagation()</code></li></ul><h4 id="8-6-jQuery对象拷贝"><a href="#8-6-jQuery对象拷贝" class="headerlink" title="8.6 jQuery对象拷贝"></a>8.6 jQuery对象拷贝</h4><ul><li><code>$.extend([deep], target, object1, [objectN])</code></li><li>参数：<ul><li><code>deep</code>：设为true时为浅拷贝，false为深拷贝</li><li><code>target</code>：拷贝对象，接收拷贝内容</li><li><code>object1~N</code>：被拷贝的对象</li><li>浅拷贝：把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝的对象（指向同一个复杂数据类型空间）</li><li>深拷贝：会将数据完全复制一份给目标对象，若属性不冲突则会合并，修改目标对象不会影响拷贝对象（重新开辟了一个复杂数据类型空间）</li></ul></li></ul><h3 id="九、jQuery多库共存"><a href="#九、jQuery多库共存" class="headerlink" title="九、jQuery多库共存"></a>九、jQuery多库共存</h3><ul><li>问题概述：jQuery使用<code>$</code>作为标识符，随着jQuery流行，其他JS库也会用<code>$</code>作为标识符，会引起冲突</li><li>客观要求：需要一个解决方案，让jQuery和其他的JS库不存在冲突</li><li>jQuery解决方案：<ul><li>将jQuery的所有<code>$</code>统一使用<code>jQuery</code></li><li>给jQuery变量规定新名字：<code>$.noconflict()</code>。</li><li>示例：<code>var xx = $.noconflict();</code></li></ul></li></ul><h3 id="十、jQuery插件"><a href="#十、jQuery插件" class="headerlink" title="十、jQuery插件"></a>十、jQuery插件</h3><ul><li>jQuery的功能毕竟有限，如果想要更复杂的特效效果，可以借助jQuery插件</li><li>注意：<strong>这些插件依赖于jQuery，所以需要引入jQuery文件</strong></li><li>jQuery插件常用的网站：<ul><li><a href="https://www.jq22.com/">jQuery插件库</a></li><li><a href="http://www.htmleaf.com/">jQuery之家</a></li></ul></li><li>jQuery插件使用步骤：<ol><li>引入相关文件（jQuery文件和插件文件）</li><li>复制相关html, css, js（调用插件）</li></ol></li><li>图片懒加载：图片使用延迟加载可以提高网页加载速度，减轻服务器负担，<strong>当页面滑动到可视区再加载图片</strong></li><li>全屏滚动：（fullpage.js）<ul><li><a href="https://github.com/alvarotrigo/fullpage.js">GitHub链接</a></li><li><a href="https://www.dowebok.com/demo/2014/77/">fullpage中文翻译网站</a></li></ul></li></ul><h3 id="十一、jQuery尺寸位置操作"><a href="#十一、jQuery尺寸位置操作" class="headerlink" title="十一、jQuery尺寸位置操作"></a>十一、jQuery尺寸位置操作</h3><h4 id="11-1-尺寸"><a href="#11-1-尺寸" class="headerlink" title="11.1 尺寸"></a>11.1 尺寸</h4><ul><li><code>width()</code>/<code>height()</code>：取得匹配元素的宽度和高度，只算width/height，不包含内边距和边框</li><li><code>innerWidth()</code>/<code>innerHeight()</code>：取得匹配元素的宽度和高度，包含padding值</li><li><code>outerWidth()</code>/<code>outerHeight()</code>：取得匹配元素的宽度和高度，包含padding、border值</li><li><code>outerWidth(true)</code>/<code>outerHeight(true)</code>：取得匹配元素的宽度和高度，包含padding、border、margin值</li><li>参数若为空，则取得相应值，返回数字型</li><li>参数写数字，则修改相应值（<strong>不跟单位</strong>）</li></ul><h4 id="11-2-位置"><a href="#11-2-位置" class="headerlink" title="11.2 位置"></a>11.2 位置</h4><ul><li><code>offset()</code>设置或获取元素偏移<ul><li>该方法设置或返回的是被选元素相对<strong>文档</strong>的偏移坐标，与父级无关</li></ul></li><li><code>position()</code>获取元素偏移<ul><li>用于返回被选元素相对于带有父级定位偏移的坐标，若父级无定位，以文档为准</li></ul></li><li><code>scrollTop()</code>/<code>scrollLeft()</code>设置或获取元素被卷去的头部和左侧</li></ul><blockquote><p>最后的叭叭：</p><p>欢乐的日子总是短暂的，jQuery我也只学了基础部分，更深层次的内容还需要劳烦读者们查阅文档啦~</p></blockquote><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> jQuery </tag>
            
            <tag> JS库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS学习笔记之DOM</title>
      <link href="2021/02/13/js-xue-xi-bi-ji-zhi-dom/"/>
      <url>2021/02/13/js-xue-xi-bi-ji-zhi-dom/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇中笔记做的是JS的基础阶段，学习的是ECMAScript标准规定的基本语法，只要求掌握基础语法就可以了，为后面的JS打下基础。但是只学了语法，我们还是无法做到网页的交互效果，所以JS还有一个重要的阶段，叫”WEB APIs”，他是W3C组织的标准，在JS中我们要掌握的是DOM和BOM，但是BOM其实根据不同的浏览器有不同的要求，所以本片笔记主要只针对JS中的DOM部分，主要学习的是页面交互功能，冲鸭~</p></blockquote><h3 id="一、API概念"><a href="#一、API概念" class="headerlink" title="一、API概念"></a>一、API概念</h3><ul><li>什么是API？<ul><li>API（Application Programming Interface），翻译为应用程序编程接口</li><li>是一些由官方预先定义好的函数，目的是提供应用程序与开发人员基于某软件或者硬件得以访问一组例程的能力，又无需访问源码或理解内部工作机制细节。</li><li>说白了，<strong>API就是给程序员提供了一种工具，来轻松实现功能</strong></li></ul></li><li>什么又是Web API？<ul><li>Web API是浏览器提供的一套操作浏览器功能（BOM）和页面元素（DOM）的API。</li></ul></li></ul><h3 id="二、DOM导读"><a href="#二、DOM导读" class="headerlink" title="二、DOM导读"></a>二、DOM导读</h3><ul><li>DOM（Document Object Model）翻译为文档对象模型，处理可扩展语言（HTML或XML）的标准编程接口。可以通过DOM改变页面的结构、样式、内容。</li><li>DOM树：<ul><li>文档：一个页面就是一个文档，DOM中使用document来表示文档</li><li>元素：页面中所有的标签都称为元素，DOM中用element来表示元素</li><li>节点：网页中所有的内容都是节点（标签、属性、文本、注释），DOM中用node来表示节点</li><li><strong>DOM把上面内容都看作对象</strong></li></ul></li></ul><h3 id="三、获取元素"><a href="#三、获取元素" class="headerlink" title="三、获取元素"></a>三、获取元素</h3><h4 id="3-1-根据id获取"><a href="#3-1-根据id获取" class="headerlink" title="3.1 根据id获取"></a>3.1 根据id获取</h4><ul><li>使用<code>.getElementById()</code>的方法可以获取带有<code>id</code>的元素</li><li>参数：<code>id</code></li><li>参数是一个<strong>严格区分大小写</strong>的字符串，代表元素的<strong>唯一id</strong></li><li>返回值：返回一个匹配到id的<code>Element</code>对象，没有找到则返回<code>null</code></li></ul><blockquote><p>PS：利用<code>console.dir()</code>可以打印返回的元素对象，更好的查看里面的方法和属性</p></blockquote><h4 id="3-2-根据标签名获取"><a href="#3-2-根据标签名获取" class="headerlink" title="3.2 根据标签名获取"></a>3.2 根据标签名获取</h4><ul><li>使用<code>.getElementsByTagName()</code>方法可以获取带有<strong>指定标签名</strong>的对象</li><li>返回的是获取来的元素对象的集合，以伪数组方式存储，若找不到则返回一个空的伪数组</li><li>得到的元素对象是动态的</li><li>两种情况：<ul><li><code>document.getElementsByTagName();</code>获取整个文档中的对应标签名元素数组</li><li><code>element.getElementsByTagName();</code>获取某个元素（父元素）中的对应标签名元素数组</li></ul></li><li><strong>注意：父元素必须是单个对象，必须指明是哪一个，并且在获取元素时不包含父元素</strong></li></ul><h4 id="3-3-通过类名获取"><a href="#3-3-通过类名获取" class="headerlink" title="3.3 通过类名获取"></a>3.3 通过类名获取</h4><ul><li>使用<code>.getElementsByClassName();</code>方法可以获取拥有对应类名的元素</li><li>返回该类名的元素对象的集合（伪数组形式）</li><li>HTML5新增</li></ul><h4 id="3-4-指定选择器获取（单个元素）"><a href="#3-4-指定选择器获取（单个元素）" class="headerlink" title="3.4 指定选择器获取（单个元素）"></a>3.4 指定选择器获取（单个元素）</h4><ul><li>使用<code>.querySelector();</code>方法可以获取指定选择器的<strong>第一个元素</strong></li><li><strong>注意：括号里为选择器，而不只是名字</strong><ul><li>类选择器：<code>.box</code></li><li>标签选择器：<code>box</code></li><li>id选择器：<code>#box</code></li><li>等等等…..</li></ul></li></ul><h4 id="3-5-指定选择器获取（集合）"><a href="#3-5-指定选择器获取（集合）" class="headerlink" title="3.5 指定选择器获取（集合）"></a>3.5 指定选择器获取（集合）</h4><ul><li>使用<code>.querySelectorAll();</code>方法可以获取指定选择器的<strong>所有元素的集合</strong></li><li>集合以伪数组的形式存储，使用方式与<code>3.4</code>相同</li></ul><h4 id="3-6-获取特殊元素"><a href="#3-6-获取特殊元素" class="headerlink" title="3.6 获取特殊元素"></a>3.6 获取特殊元素</h4><ul><li>获取body元素：<code>document.body();</code></li><li>获取HTML元素：<code>document.documentElement();</code></li></ul><h3 id="四、事件（基础部分）"><a href="#四、事件（基础部分）" class="headerlink" title="四、事件（基础部分）"></a>四、事件（基础部分）</h3><ul><li>事件时可以被JavaScript侦测到的行为（触发—响应机制），JS中每个元素都可以添加触发事件</li></ul><h4 id="4-1事件三要素：事件源、事件类型、事件处理程序"><a href="#4-1事件三要素：事件源、事件类型、事件处理程序" class="headerlink" title="4.1事件三要素：事件源、事件类型、事件处理程序"></a>4.1事件三要素：事件源、事件类型、事件处理程序</h4><ul><li><p>事件源：事件触发的对象，比如某个按钮</p></li><li><p>事件类型：如何触发、什么事件，如点击触发、经过触发等等</p></li><li><p>事件处理程序：通过函数赋值方式完成事件处理</p></li><li><p>示例：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button-1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'按钮点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>当点击按钮<code>button-1</code>，控制台打印：<code>按钮点击了</code></p></li></ul></li></ul><h4 id="4-2-执行事件的步骤"><a href="#4-2-执行事件的步骤" class="headerlink" title="4.2 执行事件的步骤"></a>4.2 执行事件的步骤</h4><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（函数赋值的方式）</li></ol><h4 id="4-3-常见的鼠标事件"><a href="#4-3-常见的鼠标事件" class="headerlink" title="4.3 常见的鼠标事件"></a>4.3 常见的鼠标事件</h4><blockquote><p><code>onclikc</code>：鼠标点击左键触发</p><p><code>onmouseover</code>：光标经过时触发</p><p><code>onmouseout</code>：光标离开时触发</p><p><code>onfocus</code>：元素获得鼠标焦点时触发</p><p><code>onblur</code>：元素失去鼠标焦点时触发</p><p><code>onmousemove</code>：鼠标移动触发</p><p><code>onmouseup</code>：鼠标键弹起触发</p><p><code>onmousedown</code>：鼠标按下触发</p></blockquote><h3 id="五、操作元素"><a href="#五、操作元素" class="headerlink" title="五、操作元素"></a>五、操作元素</h3><h4 id="5-1-改变元素内容"><a href="#5-1-改变元素内容" class="headerlink" title="5.1 改变元素内容"></a>5.1 改变元素内容</h4><ul><li><code>element.innerText</code><ul><li>不识别HTML标签</li><li>从起始位置到终止位置的内容，但他除去了HTML标签，同时空格和换行也去除了</li></ul></li><li><code>element.innerHTML</code><ul><li>识别HTML标签，使用的更多</li><li>从起始位置到终止位置的所有内容，包括HTML标签，同时保留换行和空格</li></ul></li><li>常用的元素属性操作：<ul><li><code>innerText</code>、<code>innerHTML</code>：修改元素内容</li><li><code>src</code>、<code>href</code>：修改路径</li><li><code>id</code>、<code>alt</code>、<code>title</code>：修改属性</li></ul></li></ul><h4 id="5-2-表单元素的属性设置"><a href="#5-2-表单元素的属性设置" class="headerlink" title="5.2 表单元素的属性设置"></a>5.2 表单元素的属性设置</h4><ul><li><p>利用DOM可以操作如下表单的属性：</p><ul><li><code>type</code></li><li><code>value</code></li><li><code>checked</code></li><li><code>selected</code></li><li><code>disabled</code></li></ul></li><li><p><strong>注意：表单的文字内容用<code>innerText</code>和<code>innerHTML</code>无法修改，用<code>value</code>修改</strong></p></li><li><blockquote><p>若要修改调用者的某些属性，可以用this代替调用者的元素变量</p></blockquote></li></ul><h4 id="5-3-样式的属性操作"><a href="#5-3-样式的属性操作" class="headerlink" title="5.3 样式的属性操作"></a>5.3 样式的属性操作</h4><ul><li><p>通过JS修改元素的大小、颜色、位置等</p><ul><li><code>element.style.[...]</code>：行内样式操作</li><li><strong>注意：</strong><ul><li>JS里的样式采用驼峰命名法，如<code>fontSize</code>, <code>backgrountColor</code>等等</li><li>JS修改的是行内style样式操作，在CSS中权重更高</li></ul></li></ul></li><li><p>当需要修改的样式较多时，修改style会比较麻烦，可以用<strong>类名样式</strong>操作</p><ul><li><p><code>element.className.[...]</code>：类名样式操作</p></li><li><p>将样式写入CSS中独立的类名样式中，再给需要更改此样式的元素添加一个类名（用<code>element.className = "..."</code>）</p></li><li><p><strong>注意：</strong>className会改变元素类名，覆盖<strong>原先的类名</strong>，若想要保留原先的类名，则需要将原先的类名<strong>也写入className中</strong></p></li></ul></li></ul><blockquote><p><strong>排他思想：</strong></p><ul><li>若有一组相同的元素，想要某一个元素实现某种样式，需要用到循环的排他思想算法<ul><li>所有元素全部清除样式</li><li>给当前元素设置样式</li></ul></li></ul></blockquote><h4 id="5-4-自定义属性的操作"><a href="#5-4-自定义属性的操作" class="headerlink" title="5.4 自定义属性的操作"></a>5.4 自定义属性的操作</h4><ol><li>获取属性值：<ul><li><code>element.属性</code>可以获得属性值</li><li><code>element.getAttribute('属性');</code></li><li><strong>两者的区别</strong>在于，第一个获取内置属性（元素本身自带的属性），而第二个主要用于获取自定义的属性（程序自定义的属性）</li></ul></li><li>设置属性值：<ul><li><code>element.属性 = '值';</code> 设置内置属性的值</li><li><code>element.setAttribute('属性', '值');</code> 针对自定义属性</li></ul></li><li>移除属性：<ul><li><code>removeAttribute('属性');</code> 移除自定义属性</li></ul></li></ol><blockquote><p>HTML5自定义属性：</p><ul><li>目的是为了保存并使用数据，有些数据可以保存到页面中，而不用保存到数据库中</li><li>但有的自定义属性容易引起歧义与元素自带的属性无法区分</li><li>所以：<ul><li>HTML5规定自定义属性用<code>data-</code>开头作为属性名和赋值</li><li>示例：<code>&lt;div data-index="1"&gt; &lt;/div&gt;</code></li><li>其中的<code>data-index</code>就是一个自定义属性</li></ul></li></ul><p>HTML5新增获取属性值的方法：</p><ul><li><code>element.dataset.index</code>或者<code>element.dataset['index']</code></li><li><code>dataset</code>为<code>data-</code>的集合，后面的<code>index</code>就不用再加<code>data-</code>了，但是有兼容性问题，需要IE11+以上版本</li><li>若自定义属性里有多个<code>-</code>连接的单词，采用驼峰命名法</li></ul></blockquote><h3 id="六、节点操作"><a href="#六、节点操作" class="headerlink" title="六、节点操作"></a>六、节点操作</h3><ul><li><p>利用节点层次关系获取元素</p><ul><li>父子兄弟节点关系</li><li>逻辑性强，兼容性稍差</li></ul></li><li><p>一般的，节点至少拥有<code>nodeType（节点类型）</code>、<code>nodeName（节点名称）</code>和<code>nodeValue（节点值）</code>者三个基本属性</p></li><li><p>节点类型：</p><ul><li>元素节点：nodeType为1（开发中主要操作）</li><li>属性节点：nodeType为2</li><li>文本节点：nodeType为3（包含文字、空格、换行）</li></ul></li></ul><h4 id="6-1-节点层次"><a href="#6-1-节点层次" class="headerlink" title="6.1 节点层次"></a>6.1 节点层次</h4><ul><li><p>父级节点：<code>node.parentNode</code></p><ul><li>得到的是距离<code>node</code>最近的上一级节点</li><li>找不到则返回null</li></ul></li><li><p>子级节点：</p><ol><li><code>node.childNodes</code><ul><li>得到的是所有的子节点（包括元素节点和文本节点）</li><li>若只想要拿到元素节点，需要专门处理，所以这个方法<strong>不推荐</strong></li></ul></li><li><code>node.children</code><ul><li>可以获取所有的<strong>子元素</strong>节点，<strong>推荐</strong></li></ul></li><li><code>node.firstChild</code><ul><li>获取第一个子节点（不区分节点类型）</li></ul></li><li><code>node.lastChilde</code><ul><li>获取最后一个子节点（不区分节点类型）</li></ul></li><li><code>node.firstElementChild</code><ul><li>获取第一个<strong>子元素</strong>节点，<strong>推荐</strong>，但兼容性问题（IE9+）</li></ul></li><li><code>node.lastElementChild</code><ul><li>获取最后一个<strong>子元素</strong>节点，兼容性问题（IE9+）</li></ul></li></ol><blockquote><p>实际开发中：<br><code>node.children[0]</code>获取第一个子元素节点</p><p><code>node.children[长度 - 1]</code>获取最后一个子元素节点</p></blockquote></li><li><p>兄弟节点：</p><ul><li><code>node.nextSibling</code><ul><li>返回当前元素的下一个兄弟节点，找不到则返回null（不区分节点类型）</li></ul></li><li><code>node.previousSibling</code><ul><li>返回上一个兄弟节点（不区分节点类型）</li></ul></li><li><code>ndoe.nextElementSibling</code><ul><li>返回下一个兄弟<strong>元素节点</strong>，找不到返回null，兼容性IE9+</li></ul></li><li><code>node.previousElementSibling</code><ul><li>返回上一个兄弟<strong>元素节点</strong>，兼容性IE9+</li></ul></li></ul><blockquote><p>其他办法：<strong>自己封装一个函数来获取兄弟节点</strong></p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getElementSibling</span><span class="token punctuation">(</span>element <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> el <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>el <span class="token operator">=</span> el<span class="token punctuation">.</span>nextSibling <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></blockquote></li></ul><h4 id="6-2-节点操作"><a href="#6-2-节点操作" class="headerlink" title="6.2 节点操作"></a>6.2 节点操作</h4><ul><li>创建节点<ul><li><code>document.createElement('tagName');</code></li><li>创建一个由<code>tagName</code>指定的HTML元素，因为这些元素本身不存在，根据需求动态生成，所以也称为动态创建元素节点</li></ul></li><li>添加节点<ol><li><code>node.appendChild(childNode)</code><ul><li>将一个节点添加到指定父节点的子节点列表末尾（类似于after）</li></ul></li><li><code>node.insertBefore(child, 指定元素)</code><ul><li>在指定元素的前面添加元素（都是node的子元素）</li></ul></li></ol></li><li>删除节点<ul><li><code>node.removeChild(childNode)</code></li><li>从DOM中删除一个子节点，返回删除的节点</li></ul></li><li>复制节点<ul><li><code>node.cloneNode()</code></li><li>返回调用该方法的节点的一个副本，也称克隆节点/拷贝节点</li><li>克隆之后应当添加节点才能显示</li><li><strong>注意：</strong><ul><li>若括号参数为空或者false，则为浅拷贝，只复制节点，不包含里面的任何子节点</li><li>若括号为true，则为深拷贝，复制所有内容</li></ul></li></ul></li></ul><blockquote><p><strong>常见面试题</strong></p><ol><li><code>document.write()</code></li><li><code>document.innerHTML()</code></li><li><code>document.createElement()</code></li></ol><p>三种动态元素创建的区别？</p><p>keys：</p><ol><li>第一种是直接将内容写入到页面的内容流里，文档流执行完毕以后，可能会导致<strong>页面重绘</strong></li><li>第二种创建多个元素效率更高（不使用拼接，采取数组形式），但结构较为复杂</li><li>第三种在创建多个元素时效率会低一些，但是结构更加清晰</li></ol><blockquote><p>不同浏览器下，第二种比第三种效率高</p></blockquote></blockquote><h3 id="七、事件（高级部分）"><a href="#七、事件（高级部分）" class="headerlink" title="七、事件（高级部分）"></a>七、事件（高级部分）</h3><h4 id="7-1-注册事件"><a href="#7-1-注册事件" class="headerlink" title="7.1 注册事件"></a>7.1 注册事件</h4><ul><li>给元素添加事件，成为注册事件或绑定事件</li><li>传统方式：<ul><li>利用on开头的事件，如onclick</li><li>特点：注册事件的<strong>唯一性</strong></li><li>同一个元素同一个事件只能设置一个处理函数，后设置的会覆盖前一个</li></ul></li><li><strong>方法监听注册事件</strong><ul><li>W3C推荐</li><li><code>addEventListener()</code>方法</li><li>兼容性IE9以前不支持，可以用<code>attachEvent()</code>代替</li><li>同一个元素同一个事件可以注册多个监听器</li><li>按注册顺序依次执行</li></ul></li><li>语法：<code>eventTarget.addEventListener(type, listener[, useCapture])</code></li><li>参数：<ul><li>type：事件类型字符串，如“click”、“mouseover”等等，<strong>注意不要加on</strong></li><li>listener：事件处理函数，事件发生时会调用该监听函数</li><li>useCapture：可选参数，是个布尔值，默认false，在DOM树中，注册了listener的元素， 是否要先于它下面的EventTarget，调用该listener。 当useCapture(设为true) 时，沿着DOM树向上冒泡的事件，不会触发listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。</li></ul></li></ul><h4 id="7-2-删除事件（解绑事件）"><a href="#7-2-删除事件（解绑事件）" class="headerlink" title="7.2 删除事件（解绑事件）"></a>7.2 删除事件（解绑事件）</h4><ul><li>传统方式：<code>eventTarget.onclick = null;</code></li><li>方法监听注册方式：<ul><li><code>eventTarget.removeEventListener(type, listener[, useCapture]);</code></li></ul></li></ul><h4 id="7-3-DOM事件流"><a href="#7-3-DOM事件流" class="headerlink" title="7.3 DOM事件流"></a>7.3 DOM事件流</h4><ul><li>描述的是从页面中接收事件的顺序，事件发生时会在元素节点之间按照特定的顺序传播，该过程成为DOM事件流</li><li>DOM事件流分为三个阶段：<ul><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ul></li><li><strong>注：</strong><ul><li>JS代码中只能执行捕获阶段或者冒泡阶段中的一个阶段</li><li>传统的<code>onclick</code>和<code>attachEvent</code>只能得到冒泡阶段</li><li><code>addEVentListener(type, listener[, useCapture])</code>的三个参数如果为true，则时间处于捕获阶段，如果是false或省略，则事件处于冒泡阶段</li><li><strong>事实上，开发中很少使用事件捕获，更关注事件冒泡，但有些事件没有冒泡，比如：onbulr,onfocus,onmouseover,onmouseleave等等</strong></li></ul></li></ul><h4 id="7-4-事件对象"><a href="#7-4-事件对象" class="headerlink" title="7.4 事件对象"></a>7.4 事件对象</h4><ul><li><p><code>tagName.onclick = function(event) {}</code></p><ul><li>代码中的<code>event</code>就是一个事件对象，写在监听函数的小括号中，可以当作形参来看待</li><li>事件对象又有了事件后才存在，<strong>系统创建，无需传参</strong></li><li>事件对象是事件的<strong>一系列相关数据的集合</strong>，与事件相关</li><li>该事件可以自主命名，常用：event，evt，e</li><li>事件对象也有兼容性问题，<code>IE6、7、8</code>通过<code>window.event</code>来获取</li><li><strong>兼容性写法： e = e || window.eveng</strong></li></ul></li><li><p>事件对象的常见属性和方法：</p><ul><li><code>e.target</code>：返回触发事件的对象（标准，ie9+使用）</li><li><code>e.srcElement</code>：返回触发事件的对象（非标准，ie678使用）</li><li><code>e.type</code>：返回事件类型（不带on的），如“click”</li><li><code>e.cancelBubble</code>：该属性阻止冒泡（非标准）</li><li><code>e.returnValue</code>：阻止默认事件或行为，比如不让链接跳转（非标准）</li><li><code>e.preventDefault()</code>：该方法阻止默认事件或行为（标准）</li><li><code>e.stopPropagation()</code>：该方法阻止冒泡（标准）</li></ul></li><li><p><strong><code>e.target</code>与<code>this</code>的区别:</strong></p><ul><li><code>e.target</code>返回的是<strong>触发事件</strong>的对象，<code>this</code>返回的是<strong>绑定事件</strong>的对象</li></ul><blockquote><p><code>return false</code>其实也可以组织默认事件和行为，并且没有兼容性问题，但是写在<code>return</code>后面的代码都不执行了，且仅限于传统注册方式</p></blockquote></li></ul><blockquote><p><strong>阻止事件冒泡</strong>（面试常问）</p><p>事件冒泡开始是由最具体的元素接收，逐级向上传播到DOM最顶层的节点</p><p>组织冒泡的标准写法：利用事件对象的<code>e.propagation()</code>方法</p><p>非标准方法：<code>e.cancelBubble = true;</code></p></blockquote><h4 id="7-5-事件委托（代理、委派）"><a href="#7-5-事件委托（代理、委派）" class="headerlink" title="7.5 事件委托（代理、委派）"></a>7.5 事件委托（代理、委派）</h4><ul><li><p><strong>原理（非常重要）</strong></p><ul><li>不是每个子节点单独设置事件监听器，而是将事件监听设置在他们的父节点上，然后利用冒泡原理影响设置的每个子结点</li></ul></li><li><p>作用：</p><ul><li>只操作了一次DOM，降低访问次数，提高程序性能</li></ul></li><li><blockquote><p>与<code>e.target</code>配合可以控制单个子元素</p></blockquote></li></ul><h4 id="7-6-常见的鼠标事件2"><a href="#7-6-常见的鼠标事件2" class="headerlink" title="7.6 常见的鼠标事件2"></a>7.6 常见的鼠标事件2</h4><ul><li>禁止鼠标右击菜单<ul><li><code>contestmenu</code>主要控制当前何时显示上下文菜单，主要用于程序员取消该设置</li></ul></li><li>禁止鼠标选中（Selectstart 开始选中）<ul><li>常配置<code>e.preventDefault()</code>的侦听器</li></ul></li><li>鼠标事件对象：<ul><li><code>event</code>对象代表事件的状态，跟事件相关的一系列信息的集合，现阶段主要用鼠标事件对象<code>MouseEvent</code>和键盘事件对象<code>KeyboardEvent</code></li></ul></li><li>鼠标事件第二弹<ul><li><code>e.clientX</code>：返回鼠标相对于<strong>浏览器</strong>可视区的X坐标</li><li><code>e.clientY</code>：返回鼠标相对于浏览器可视区的Y坐标</li><li><code>e.pageX</code>：返回鼠标相对于<strong>文档页面</strong>的X坐标（IE9+）</li><li><code>e.pageY</code>：返回鼠标相对于文档页面的Y坐标（IE9+）</li><li><code>e.screenX</code>：返回鼠标相对于<strong>电脑屏幕</strong>的X坐标</li><li><code>e.screenY</code>：返回鼠标相对于电脑屏幕的Y坐标</li></ul></li></ul><h4 id="7-7-常用的键盘事件"><a href="#7-7-常用的键盘事件" class="headerlink" title="7.7 常用的键盘事件"></a>7.7 常用的键盘事件</h4><ul><li>以下为执行顺序排列，1为最先执行</li></ul><ol><li><code>onkeydown</code>：某个按键按下时触发，不区分大小写</li><li><code>onkeypress</code>：某个按键按下时触发，但不是识别功能键（如shift、ctrl之类），区分大小写</li><li><code>onkeyup</code>：某个按键松开弹起时触发，不区分大小写</li></ol><ul><li>键盘事件对象：keyCode可以返回相应按键的ASCII码值。</li></ul><blockquote><p>JS-DOM的基础内容应该差不多就这些吧，对应的事件之类的我也只列举了一些常用的，更深层次的内容，或者说想要更深入的学习，还是查询响应文档比较好啦，毕竟我也只是一个刚刚起步的小白，很多东西没有使用到，也记不太住呀哈哈哈哈~</p></blockquote><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="2021/02/13/javascript-xue-xi-bi-ji/"/>
      <url>2021/02/13/javascript-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web 页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，例如 Node.js、 Apache CouchDB 和 Adobe Acrobat。JavaScript 是一种基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。 ——摘自MDN</p></blockquote><h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h3 id="一、初识JavaScript"><a href="#一、初识JavaScript" class="headerlink" title="一、初识JavaScript"></a>一、初识JavaScript</h3><h4 id="1-1-JavaScript历史："><a href="#1-1-JavaScript历史：" class="headerlink" title="1.1 JavaScript历史："></a>1.1 JavaScript历史：</h4><ul><li>Brendan·Eich于1995年花费10天时间完成设计</li><li>最初命名为LiveScript，后来于Sun合作后改名为JavaScript</li></ul><h4 id="1-2-JavaScript是什么："><a href="#1-2-JavaScript是什么：" class="headerlink" title="1.2 JavaScript是什么："></a>1.2 JavaScript是什么：</h4><ul><li>是世界上最流行的语言之一，<strong>运行在客户端上的脚本语言</strong></li><li>脚本语言：不需要编译，运行过程中由JS引擎逐行解释执行</li><li>现在也可以基于Node.js技术进行服务器端变成</li></ul><h4 id="1-3-JS-JavaScript-的作用（可以做些啥？）"><a href="#1-3-JS-JavaScript-的作用（可以做些啥？）" class="headerlink" title="1.3 JS(JavaScript)的作用（可以做些啥？）"></a>1.3 JS(JavaScript)的作用（可以做些啥？）</h4><ul><li>表单动态校验（密码强度检测）[JS最初的目的]</li><li>网页特效</li><li>服务端开发（Node.js）</li><li>桌面程序（Electron）</li><li>App（Cordova）</li><li>控制硬件物联网（Ruff）</li><li>游戏开发（cocos2d-js）</li></ul><h4 id="1-4-浏览器执行JS简介"><a href="#1-4-浏览器执行JS简介" class="headerlink" title="1.4 浏览器执行JS简介"></a>1.4 浏览器执行JS简介</h4><ul><li>浏览器分为两部分<ul><li>渲染引擎：用于解析HTML与CSS，俗称<strong>内核</strong>，比如Chrome浏览器的Blink，老版本的webkit</li><li>JS引擎：也称JS解释器，用来读取网页中的JS代码，对其处理后运行，比如Chrome的V8引擎</li></ul></li><li><strong>注意：</strong>浏览器本身不会执行JS代码，是通过内置JS引擎执行代码，JS引擎会逐行解释源码，然后计算机去执行。（所以称为脚本语言）</li></ul><h4 id="1-5-JS的组成"><a href="#1-5-JS的组成" class="headerlink" title="1.5 JS的组成"></a>1.5 JS的组成</h4><ul><li>ECMAScript： JS语法；</li><li>DOM：页面文档对象模型；</li><li>BOM：浏览器对象模型；</li></ul><ol><li>ECMAScript：<ul><li>规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准</li><li>更过可以查询<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN相关文档</a></li></ul></li><li>DOM：<ul><li>是W3C组织推荐的处理可拓展标记语言的标准编程接口</li><li>通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</li></ul></li><li>BOM：<ul><li>它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构</li><li>通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转等</li></ul></li></ol><h4 id="1-6-JS的三种书写位置"><a href="#1-6-JS的三种书写位置" class="headerlink" title="1.6 JS的三种书写位置"></a>1.6 JS的三种书写位置</h4><ul><li>行内式<ul><li>将单行或者少量代码写在HTML标签的事件属性中（以on开头）</li><li>注意单双引号的使用，在HTML中推荐双引号，JS中推荐单引号</li><li>可读性较差，编写大量JS代码时不便阅读</li><li>引号易错，引号多层嵌套匹配时易混</li><li><strong>特殊情况下使用</strong></li></ul></li><li>内嵌式<ul><li>可以将多行代码写到<code>&lt;script&gt;</code>标签中</li><li>学习时常用的方式</li></ul></li><li>外部式<ul><li>利用HTML页面代码结构化，打断代码独立到HTML页面外</li><li>引用外部文件的script标签中间不可写代码</li><li>适用于JS代码量较大时使用</li></ul></li></ul><h4 id="1-7-JS常用输入输出语句（归属于浏览器）"><a href="#1-7-JS常用输入输出语句（归属于浏览器）" class="headerlink" title="1.7 JS常用输入输出语句（归属于浏览器）"></a>1.7 JS常用输入输出语句（归属于浏览器）</h4><ul><li><code>alert(msg);</code>浏览器弹出警示框</li><li><code>console.log(msg);</code>浏览器控制台打印输出信息</li><li><code>prompt(info);</code>浏览器弹出输入框，用户可输入</li></ul><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><blockquote><p>变量是用于存放数据的容器，通过<strong>变量名</strong>获取数据，甚至修改数据</p><p>本质：程序在内存中申请的一块用来存放数据的<strong>内存空间</strong></p></blockquote><h4 id="2-1-变量的使用"><a href="#2-1-变量的使用" class="headerlink" title="2.1 变量的使用"></a>2.1 变量的使用</h4><ol><li>声明变量<ul><li><code>var 变量名</code></li><li><code>var</code>是一个JS关键字，用于声明变量（variable）</li><li>变量由程序员定义变量名，通过变量名访问分配的空间</li></ul></li><li>变量赋值<ul><li>用<code>=</code>将右边的值赋给作便的变量空间中</li></ul></li><li>第一步和第二部一起写，声明一个变量并直接赋值，称为<strong>变量的初始化</strong></li></ol><h4 id="2-2-变量语法扩展"><a href="#2-2-变量语法扩展" class="headerlink" title="2.2 变量语法扩展"></a>2.2 变量语法扩展</h4><ul><li>更新变量：一个变量被重新赋值后，原有的值就会被覆盖</li><li>同时声明多个变量时，只写一个var，多个变量之间用英文逗号<code>,</code>隔开</li><li>声明变量的特殊情况：<ul><li><code>var age; console.log(age);</code> 只声明不赋值。运行结果：<code>undefined</code></li><li><code>console.log(age);</code>不声明不赋值，使用。运行结果：<code>error报错</code></li><li><code>age = 10; console.log(age);</code>不声明，只赋值。运行结果：<code>10</code><ul><li><strong>可以使用但是极为不推荐，会影响全局（若在函数中不声明直接赋值，那么该变量为全局变量）</strong></li></ul></li></ul></li></ul><h4 id="2-3-变量名的命名规范"><a href="#2-3-变量名的命名规范" class="headerlink" title="2.3 变量名的命名规范"></a>2.3 变量名的命名规范</h4><ul><li>由字母（<code>A-Z，a-z</code>）、数字（<code>0~9</code>）、下划线（<code>_</code>）、美元符号（<code>$</code>）组成</li><li>严格区分大小写，<code>var app</code>和<code>var APP</code>是两个不同的变量</li><li>不能以数字开头，不能是关键字或者保留字</li><li>变量名应当有语义</li><li>应遵循驼峰命名法：首字母小写，后面单词首字母大写，如：<code>myFirstName</code></li><li>推荐翻译网站：<a href="http://www.youdao.com/">有道</a>、<a href="http://www.iciba.com/">爱词霸</a></li></ul><h4 id="2-4-★变量的数据类型"><a href="#2-4-★变量的数据类型" class="headerlink" title="2.4 ★变量的数据类型"></a>2.4 ★变量的数据类型</h4><ul><li>变量有名字和数据类型，变量的数据类型决定了如何将代表这些值的位储存到计算机的内存中，<strong>JS是一门弱类型或者说动态的语言</strong>，意味着不用提前声明变量的类型，运行过程中会被自动确定。（<strong>浏览器根据<code>=</code>右边的变量值的属性类型来判断</strong>）</li><li><strong>JS拥有动态类型，同时也意味着相同的变量可用作不同类型</strong></li><li>数据类型分为<ul><li>简单数据类型（基本数据类型）</li><li>复杂数据类型（引用数据类型）</li></ul></li></ul><h5 id="2-4-1-简单数据类型（基本数据类型）"><a href="#2-4-1-简单数据类型（基本数据类型）" class="headerlink" title="2.4.1 简单数据类型（基本数据类型）"></a>2.4.1 简单数据类型（基本数据类型）</h5><ul><li><p>简单数据类型又称为基本数据类型或者值类型，在储存时变量中储存的是<strong>值本身</strong></p></li><li><p>简单数据类型分类（最新版更新为7种，可以查阅文档）</p><ul><li><code>Number</code></li><li><code>Boolean</code></li><li><code>String</code></li><li><code>Undefined</code></li><li><code>Null</code><ul><li>若有个变量，以后打算储存为对象，但是暂时没想好放什么，可以先赋值为null</li></ul></li></ul></li><li><p><code>Number</code></p><ul><li><p>数字类型，包括整型(<code>Int</code>)和浮点型(<code>Float</code>)</p></li><li><p>JS中数值最大值：<code>console.log(Number.MAX_VALUE);</code></p></li><li><p>JS中数值最小值：<code>console.log(Number.MIN_VALUE);</code></p></li><li><p>默认为<code>0</code></p></li><li><p>数字类型（number）的三个特殊值：    </p><ul><li><code>Infinity</code>：无限大，大于任何数</li><li><code>-Infinity</code>：无穷小，小于任何数</li><li><code>NaN</code>（Not a Number）：代表结果不是一个数值</li></ul></li><li><p><code>isNaN();</code>可以用于验证是否为非数值，是数值返回<code>false</code></p></li></ul></li></ul><ul><li><code>Boolean</code><ul><li>布尔值类型，如<code>true/false</code></li><li>默认为<code>false</code></li><li>当用于与数字相加时，<code>true = 1，false = 0</code></li><li></li></ul></li></ul><ul><li><code>String</code><ul><li>字符串类型，可以是引号中的任意文本，语法为双引号<code>" "</code>或者单引号<code>' '</code></li><li>默认值为<code>" "</code></li><li>字符串引号嵌套：单双交错，<strong>外双内单，外单内双</strong></li><li>字符串转义字符：<ul><li><code>\n</code>：换行</li><li><code>\\</code>：斜杠</li><li><code>\'</code>：单引号</li><li><code>\"</code>：双引号</li><li><code>\t</code>：tab缩进</li><li><code>\b</code>：空格</li></ul></li><li>字符串的长度：通过length属性可以获取整个字符串的长度<code>str.length</code></li><li>字符串的拼接：多个字符串之间可用<code>+</code>进行拼接，其方式为：<ul><li><code>字符串 + 任意类型 = 新的字符串</code></li><li>拼接前会将任意类型转换为字符串进行拼接（可以用于隐式转换）</li></ul></li></ul></li></ul><ul><li><code>Undefined</code><ul><li><code>var a;</code>声明了但没有给a赋值</li><li><code>a = undefined;</code></li><li>与字符串相加时为字符串</li><li><strong>与数字类型相加时结果为NaN</strong></li></ul></li><li><code>Null</code><ul><li><code>var a = null;</code>声明了a为空值</li><li><code>a = null;</code></li></ul></li></ul><blockquote><p>变量的数据类型可以通过typeof()来获取</p><p><code>typeof str;</code>中间用空格隔开</p></blockquote><h5 id="2-4-2-复杂数据类型（引用数据类型）"><a href="#2-4-2-复杂数据类型（引用数据类型）" class="headerlink" title="2.4.2 复杂数据类型（引用数据类型）"></a>2.4.2 复杂数据类型（引用数据类型）</h5><ul><li>也叫做引用数据类型，在储存变量中储存的仅仅是地址（引用），因此叫做引用数据类型，通过new关键字创建的对象（系统对象、自定义对象）</li><li>包含<code>Object Array Date</code>等</li></ul><blockquote><p>在第七节和第八节会细讲~</p></blockquote><h5 id="2-4-3-数据类型的转换"><a href="#2-4-3-数据类型的转换" class="headerlink" title="2.4.3 数据类型的转换"></a>2.4.3 数据类型的转换</h5><ul><li><p>使用表单、prompt获取来的数据默认时字符串类型的，不能直接进行计算，需要进行变量的数据类型的转换，即<strong>将一种数据类型的变量转换为另一种数据类型</strong></p></li><li><p>常用：</p><ul><li>转换为字符串型</li><li>转换为数字型</li><li>转换为布尔型</li></ul></li><li><p>转换为字符串型</p><ol><li><code>toString();</code>转换为字符串型</li><li><code>String();</code>强制转换</li><li><code>" " + 任意类型</code> 字符串类型与任何类型拼接都是字符串类型</li></ol><ul><li><code>toString()</code>和<code>String()</code>的使用方式不一样</li><li>三种转换方式更喜欢用第三种加号方式，也成为隐式转换</li></ul></li><li><p>转换为数字型</p><ol><li><code>parseInt()</code>：转换为整数数字型</li><li><code>parseFloat()</code>：转换为浮点数数字型</li><li><code>Number()</code>：强制转换</li><li><code>- * /</code>：通过除了<code>+</code>以外的运算符号转换，隐式转换，示例：<code>"12" - 0</code></li></ol></li><li><p>转换为布尔型</p><ul><li><code>Boolean()</code>将其他类型转换为布尔型</li><li>代表空、否定的值都会被转换为false，如<code>" ",0,NaN,null,undefined </code></li><li>其余值都会被转换为true</li></ul></li></ul><blockquote><p><strong>扩展阅读1：解释型语言和变异型语言</strong></p><ul><li>翻译器翻译的方式有两种</li><li>编译</li><li>解释</li><li>两者的区别</li><li>翻译的时间点不同</li><li>编译器是在代码执行前进行编译，生成了中间代码文件</li><li>解释器是在运行时进行及时解释，并立即执行</li></ul></blockquote><blockquote><p><strong>扩展阅读2：标识符、关键字和保留字</strong></p><ul><li>标识符：开发人员为变量、属性、函数、参数取得名字（标识符不能是关键字或者保留字）</li><li>关键字：指JS本身已经使用了的字，不可以再用他们充当变量名或者方法名。（包括<code>break,case,catch,continue,default</code>）等等</li><li>保留字：实际上就是预留的关键字，现在还不是关键字，未来有可能会成为关键字。（例如<code>boolean,byte,char,class,const</code>）等等</li></ul></blockquote><h3 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h3><blockquote><p>运算符也称操作符（operater），用于实现赋值、比较和执行算术运算等功能的符号</p></blockquote><h4 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h4><ul><li>算术运算使用的符号，用于执行两个变量或值得算术运算<ul><li><code>+ - * / %</code></li></ul></li><li>浮点数得精度问题：浮点数值最高的精度是17为小鼠，但在进行算术运算时其精度远远不如整数（<strong>所以尽量避免直接用浮点数计算</strong>）</li><li>表达式：有数字、运算符、变量等组成的式子</li><li>返回值：表达式运算后的返回结果</li></ul><h4 id="3-2-递增递减运算符"><a href="#3-2-递增递减运算符" class="headerlink" title="3.2 递增递减运算符"></a>3.2 递增递减运算符</h4><ul><li>若要给一个数字变量反复添加或减去1，可以使用<code>++</code>或者<code>--</code>来实现</li><li>在JS中，递增<code>++</code>和递减<code>--</code>既可以放在变量前面，也可以放在变量后面，成为前置递增递减运算符和后置递增递减运算符（<strong>递增递减运算符必须配合变量进行使用</strong>）</li><li>前置和后置得区别：<ul><li>前置：先自增减，在返回值</li><li>后置：先返回值，在进行自增自减</li></ul></li></ul><h4 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h4><ul><li>也成为关系运算符，是两个数据进行比较时所用的运算符，比较运算后，会返回一个<strong>布尔值</strong>作为比较运算的结果</li><li><code>&gt;</code>大于号</li><li><code> &lt;</code> 小于号</li><li><code> &gt;=</code> 大于等于</li><li><code> &lt;=</code> 小于等于</li><li><code> ==</code> 判断等于</li><li><code> !=</code> 不等于</li><li><code> ===</code> 全等（要求值和数据类型都相等）</li><li><code> !==</code>不全等</li><li>等号的差别：<ul><li><code>=</code>：是赋值，把右边赋值给左边</li><li><code>==</code>：是判断，两边值是否相等（注意隐式转换，字符串会变数字）</li><li><code>===</code>：是全等，要求左右两边值和类型都完全相等</li></ul></li></ul><h4 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h4><ul><li><p>用来进行布尔值运算的运算符，其返回值也是一个布尔值，开发中多用于多个条件的判断</p></li><li><p><code>&amp;&amp;逻辑与</code></p><ul><li>and，全为true则返回true，有false就返回false</li></ul></li><li><p><code>||逻辑或</code></p><ul><li>or，有true就返回true，全为false才返回false</li></ul></li><li><p><code>!逻辑非</code></p><ul><li>not，取反</li></ul></li><li><p>逻辑运算之<strong>短路运算</strong>（逻辑中断）</p><ul><li><p>当有多个表达式（值）时，左边的表达式（值）可以确定运算结果是，就不再继续运算右边的表达式</p><ul><li><blockquote><p>小题目</p><p>var num = 0;</p><p>console.log(123 || num++);</p><p>问：结果打印结果后num的值为多少？</p></blockquote></li></ul></li><li><p>逻辑与：</p><ul><li>语法：<code>表达式1 &amp;&amp; 表达式2</code></li><li>若<code>表达式1</code>为<code>true</code>，则返回<code>表达式2</code>的值</li><li>若<code>表达式1</code>为<code>false</code>，则返回<code>表达式1</code>的值</li></ul></li><li><p>逻辑或</p><ul><li>语法：<code>表达式1 || 表达式2</code></li><li>若<code>表达式1</code>为<code>true</code>，则返回<code>表达式1</code>的值</li><li>若<code>表达式1</code>为<code>false</code>，则返回<code>表达式2</code>的值</li></ul></li></ul></li><li><blockquote><p>上面小题目的答案</p><p>num = 0，因为123在逻辑运算中为<code>true</code>，所以由于逻辑中断，<code>||</code>后面的表达式不加入运算，也就没有<code>num++</code>了</p></blockquote></li></ul><h4 id="3-5-赋值运算符"><a href="#3-5-赋值运算符" class="headerlink" title="3.5 赋值运算符"></a>3.5 赋值运算符</h4><ul><li>用来把数据赋值给变量的运算符</li><li><code>=</code>：直接赋值</li><li><code>+=</code>,<code>-=</code>：加/减一个数后再赋值</li><li><code>*=</code>,<code>/=</code>,<code>%=</code>：乘/除/取余后再赋值</li></ul><h4 id="3-6-运算符优先级"><a href="#3-6-运算符优先级" class="headerlink" title="3.6 运算符优先级"></a>3.6 运算符优先级</h4><blockquote><p>优先级自上而下逐级递减</p><ol><li>小括号    <code>( )</code></li><li>一元运算符    <code>++,--,!</code></li><li>算术运算符    先<code>*,/,%</code>后<code>+，-</code></li><li>关系运算符    <code>&gt;,&gt;=,&lt;,&lt;=</code></li><li>相等运算符    <code>==,!=,===,!==</code></li><li>逻辑运算符    先<code>&amp;&amp;</code>后<code>||</code></li><li>赋值运算符    <code>=</code></li><li>逗号运算符    <code>,</code></li></ol><ul><li>一元运算符里面的<strong>逻辑非得优先级很高</strong></li><li>逻辑与比逻辑或优先级更高</li></ul></blockquote><h3 id="四、JS的流程控制"><a href="#四、JS的流程控制" class="headerlink" title="四、JS的流程控制"></a>四、JS的流程控制</h3><ul><li>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的，所以很多时候需要通过控制代码的执行顺序来实现功能。（控制运行顺序）</li><li>JS的流程控制主要分成三种结构<ul><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ul></li></ul><h4 id="4-1-顺序结构"><a href="#4-1-顺序结构" class="headerlink" title="4.1 顺序结构"></a>4.1 顺序结构</h4><ul><li>依照代码的先后顺序，从上而下一次执行</li></ul><h4 id="4-2-分支结构"><a href="#4-2-分支结构" class="headerlink" title="4.2 分支结构"></a>4.2 分支结构</h4><ul><li>根据不同的条件，执行不同的路径代码，从而得到不同的结果</li></ul><ol><li>if语句</li></ol><ul><li><p><code>if else语句</code></p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>条件表达式为<code>true</code>，则执行<code>语句a</code>，否则执行<code>语句b</code></p></li></ul></li><li><p><code>if else if多分支语句</code></p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    语句a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    语句b<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    语句c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>条件表达式1为<code>true</code>时，执行<code>语句a</code>，</p></li><li><p><strong>条件表达式1不满足时，若条件表达式2满足</strong>，则执行<code>语句b</code>，都不满足，则执行<code>语句c</code></p></li></ul></li><li><p>三元表达式</p><ul><li>由<code>?</code>和<code>:</code>组成的条件表达式</li><li>语法：<code>条件表达式? 表达式1 : 表达式2;</code></li><li>判断：若条件表达式为true，则执行表达式1，否则执行表达式2</li></ul></li></ul><ol start="2"><li><p>switch语句：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token punctuation">;</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token punctuation">;</span>           语句<span class="token number">2</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span>        <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li><li><p>真实开发里，表达式常见为变量</p></li><li><p>表达式与<code>case</code>的值<strong>匹配全等</strong>时，执行对应语句</p></li><li><p>若<code>case</code>里没有<code>break;</code>则不会推出switch语句，继续向下执行</p></li></ul></li></ol><ul><li>switch语句和if语句的区别<ul><li>一般情况下可以相互替换</li><li><code>switch-case语句</code>常用于<code>case</code>值较为确定的情况，而<code>if-else语句</code>则更加灵活，常用于判断范围的情况（判断范围的差异）</li><li><code>switch-case语句</code>进行条件判断后直接执行到程序的条件语句，而<code>if-else语句</code>有几种条件，就要判断几次（效率差异）</li><li>当分支较少时，<code>if-else语句</code>的执行效率比<code>switch-case语句</code>更高</li><li>分支较多时，<code>switch-case语句</code>效率更高，而且结构更清晰</li></ul></li></ul><h4 id="4-3-循环结构"><a href="#4-3-循环结构" class="headerlink" title="4.3 循环结构"></a>4.3 循环结构</h4><ul><li>在实际开发中，有许多<strong>具有规律性的重复操作</strong>，因此在程序中要完成这类操作就需要重复执行某些代码。</li><li>一组被重复执行的语句称之为循环体，而能否继续重复执行，取决于循环的终止条件，有这两者组成的语句组合，成为循环语句</li><li>运用循环的方式可以有效减少代码量</li></ul><h5 id="4-3-1-for循环："><a href="#4-3-1-for循环：" class="headerlink" title="4.3.1 for循环："></a>4.3.1 for循环：</h5><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span> 条件表达式<span class="token punctuation">;</span> 操作表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>初始化变量：用var声明的普通变量，常用作计数器</p></li><li><p>条件表达式：终止的条件</p></li><li><p>操作表达式：每次循环后执行的代码，常作用于计数器变量进行更新</p></li><li><p>示例：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>运行结果打印：<code>"012345678"</code></p></li></ul></li><li><blockquote><p><strong>断点调试：</strong>给程序某一行设置断点，开始运行后程序会停在此处，然后一步步往下调试，过程中可以看各个变量当前的值，出错的话，调试到出错的代码行显示错误，即停下</p><ul><li>操作流程：<ol><li>浏览器中按F12</li><li>点击sourse</li><li>找到调试文件</li><li>某一行设置断点</li></ol></li><li>watch：见师，通过watch可以监视变量的值的变化（常用）</li><li>F11：单步调试，一行一行往下执行，从而可以观察watch的变化</li></ul></blockquote></li></ul><h5 id="4-3-2-while-do-while循环"><a href="#4-3-2-while-do-while循环" class="headerlink" title="4.3.2 while/do-while循环"></a>4.3.2 while/do-while循环</h5><ul><li><p>while循环：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环语句<span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre></li><li><p>当条件表达式为true时不停执行循环体，否则退出循环（内部需要计数器、初始化变量和<strong>操作表达式</strong>（防止死循环））</p></li></ul></li><li><p>do-while循环：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环语句<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>先执行一次循环语句，然后判定条件表达式，如果条件表达式为true，则继续执行循环语句</p></li></ul></li><li><p>continue关键字：用于立即跳出本次循环，继续下一次循环（<code>continue;</code>后面的代码少执行一次 ）</p></li><li><p>break关键字：用于立即跳出整个循环（<code>break;</code>后面的代码都不执行）</p></li></ul><blockquote><p><strong>标识符命名规范</strong></p><ul><li>变量、函数的命名必须有语义</li><li>变量名称一般用名词，函数名称一般用动词</li></ul><p><strong>操作符规范</strong></p><ul><li>操作符左右尽量保留空格</li></ul></blockquote><h3 id="五、数组Array"><a href="#五、数组Array" class="headerlink" title="五、数组Array"></a>五、数组Array</h3><ul><li>数组就是一组数据的集合，可以把一组相关的数据一起存放，并提供方便的访问方式。数组中的每个数据都成为元素，在数组中可以存放任意类型的元素。（将一组数据储存在单个变量名下）</li></ul><h4 id="5-1-创建数组"><a href="#5-1-创建数组" class="headerlink" title="5.1 创建数组"></a>5.1 创建数组</h4><ul><li>利用new关键字创建数组<ul><li><code>var arr = new Array();</code></li><li>创建一个空的数组</li></ul></li><li>利用数组字面量创建数组<ul><li><code>var arr = [];</code></li><li>一个空数组</li><li>这种方式更为常用</li></ul></li></ul><h4 id="5-2-获取数组内的元素"><a href="#5-2-获取数组内的元素" class="headerlink" title="5.2 获取数组内的元素"></a>5.2 获取数组内的元素</h4><ul><li>利用索引来获取</li><li>索引：用来访问数组元素的序号（从0开始），若没有元素或超出则返回undefined</li><li><code>数组名[索引]</code></li></ul><h4 id="★5-3-遍历数组"><a href="#★5-3-遍历数组" class="headerlink" title="★5.3 遍历数组"></a>★5.3 遍历数组</h4><ul><li>从数组中取出每一个元素时，代码往往是重复的，有所不同的只是索引值在递增，可以利用循环来做到遍历数组</li><li>遍历：就是把数组的元素从头到尾访问一次</li><li>数组长度： <code>数组名.length</code></li><li>遍历方式：<code>for (var i = 0; i &lt; 数组名.length; i++) { 操作语句; }</code></li><li><strong>注意：</strong><ul><li>数组长度是元素的个数，与索引号区分</li><li><code>.length</code>可以<strong>动态</strong>监测个数</li></ul></li></ul><h4 id="5-4-数组中新增元素"><a href="#5-4-数组中新增元素" class="headerlink" title="5.4 数组中新增元素"></a>5.4 数组中新增元素</h4><ol><li>修改length长度实现数组扩容（增加的为<code>empty</code>空元素，输入为<code>undefined</code>），length内容可读</li><li>修改索引号，选择没有使用的索引号进行追加</li></ol><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 索引号只有0和1</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"EagleH"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 追加索引号为2的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>打印结果为：<code>"1, 2, EagleH"</code></p></li><li><p>如果索引号2已有数据，那么就是将该数据替换而非追加</p></li></ul><h3 id="六、-函数"><a href="#六、-函数" class="headerlink" title="六、 函数"></a>六、 函数</h3><ul><li>JS中某些代码可能会被大量的重复使用，而函数就是一段被<strong>封装好的可重复调用执行的代码块</strong></li></ul><h4 id="6-1-函数的声明和调用"><a href="#6-1-函数的声明和调用" class="headerlink" title="6.1 函数的声明和调用"></a>6.1 函数的声明和调用</h4><ul><li><p>声明函数：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    函数体代码<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>function是声明函数的关键字，全部小写，一般函数名为动词（没有强制规定）</p></li></ul></li><li><p>调用函数：</p><ul><li><code>函数名();</code> 千万别忘记小括号</li></ul></li></ul><h4 id="6-2-函数的封装"><a href="#6-2-函数的封装" class="headerlink" title="6.2 函数的封装"></a>6.2 函数的封装</h4><ul><li>将一个或多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口（打包）。</li><li><code>function 函数名(形参1, 形参2) {}</code></li><li><code>函数名 (实参1, 实参2);</code></li><li>形参为声明函数里的，实参为调用函数里的</li><li>形参与实参个数的问题：<ul><li>若个数相同则正常输出</li><li>若实参个数多于形参个数，会取到形参个数，实参多余的参数会被忽略</li><li>若实参个数少于形参个数，没有接收值得形参为undefined，最终结果为NaN（<strong>形参得默认值为undefined</strong>）</li></ul></li></ul><h4 id="6-3-函数得返回值"><a href="#6-3-函数得返回值" class="headerlink" title="6.3 函数得返回值"></a>6.3 函数得返回值</h4><ul><li><p>通过<code>return</code>将函数的结果返回给调用者</p></li><li><p>用法：<code>return 结果;</code></p></li><li><p><code>return</code>还有终止函数得功能，程序遇到<code>return</code>，后面的代码就不会再执行了</p></li><li><p><code>return</code>只会返回一个值，多个值会以<strong>最后一个</strong>为准</p></li><li><p>若一定要返回多个值，可以用<strong>返回数组</strong>的方式</p></li><li><p><strong>若函数中没有找到return，则调用的结果为undefined</strong></p></li></ul><blockquote><p>arguments的使用：当不确定有多少个参数传递的时候，可以用arguements来获取，在JS中，arguements是当前函数的一个内置对象，arguements对象中储存了<strong>传递的所有实参</strong></p><ul><li>arguements展示形式是一个伪数组，可以进行遍历，伪数组的特点：<ul><li>具有length属性</li><li>按索引方式储存数据</li><li>不具有数组的push、pop等方法</li></ul></li></ul></blockquote><blockquote><p><strong>函数的另一种声明方式：利用字面量的形式</strong></p><p><code>var 变量名 = function() {}</code></p><p>注意是变量名不是函数名（声明的是匿名函数）</p></blockquote><h4 id="6-4-作用域"><a href="#6-4-作用域" class="headerlink" title="6.4 作用域"></a>6.4 作用域</h4><ul><li><p>一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字可用性范围的叫做<strong>作用域</strong></p></li><li><p>作用域的使用提高了程序逻辑的局部性，增加了程序的可靠性，减少了名字冲突</p></li><li><p>作用域分类：</p><ul><li>全局作用域：整个script标签或一个单独的js文件</li><li>在函数内部的就是局部作用域，只有在函数中起效</li></ul></li><li><p>变量的作用域：</p><ul><li>根据作用域的不同分为<strong>全局变量</strong>和<strong>局部变量</strong></li><li>全局变量在在全局作用域下，在全局和局部作用域内都可以使用</li><li>局部变量在函数作用域下，只能在函数内部使用</li></ul></li><li><p><strong>注意：若变量在函数内部没有用var声明，而是直接赋值的，那么这个变量默认是一个全局变量，在函数内用var声明的变量才是局部变量</strong></p></li><li><p>从执行效率进行比较：</p><ul><li>全局变量仅在<strong>关闭浏览器后</strong>才会销毁，比较占用内存资源</li><li>局部变量当<strong>程序执行完毕</strong>就会销毁，节省内存</li></ul></li><li><p>作用域链：</p><ul><li>只要是代码，就至少存在一个作用域</li><li>卸载函数内部的叫局部作用域</li><li>若函数中还有函数，那么在作用域中有新生成新的作用域</li><li>根据内部函数可以访问外部函数的机制，用链式查找决定那些数据能被内部函数访问，成为作用域链（就近原则）</li></ul></li></ul><blockquote><p>JavaScript在ES6时新增了<strong>块级作用域</strong>，ES5之前都不存在这个概念，但比较重要，说直白一点，块级作用域修复了我们尊敬的艾奇大哥在设计JS这门语言时留下的bug，所以还是非常有必要学习一下。本篇笔记以ES5为基础，所以不写ES6的新增内容，有兴趣可以去MDN等网站查询学习</p></blockquote><h3 id="理论知识补充（重要）"><a href="#理论知识补充（重要）" class="headerlink" title="理论知识补充（重要）"></a>理论知识补充（重要）</h3><blockquote><ul><li><p>首先来两个小题目，是较为经典的面试题</p></li><li><p><strong>test1：</strong></p><blockquote><p>var num = 10;</p><p>fun( );</p><p>function fun( ) {</p><p>​    console.log(num );</p><p>var num = 20;</p><p>}</p></blockquote></li><li><p>问控制台台打印的内容是什么？</p></li></ul></blockquote><blockquote><ul><li><p><strong>test2：</strong></p><blockquote><p>f1( );</p><p>console.log(c );</p><p>console.log(b );</p><p>console.log(a );</p><p>function f1( ) {</p><p>​    var a = b = c = 9;</p><p>​    console.log(a );</p><p>​    console.log(b );</p><p>​    console.log(c );</p><p>}</p></blockquote></li><li><p>问控制台台打印的内容是什么？</p></li></ul></blockquote><blockquote><p><strong>JS的预解析：</strong></p><ul><li>JS代码由浏览器中的JS解析器来执行，JS解析器在解释代码时分为两步：<strong>预解析</strong>和代码执行</li><li>什么是预解析：<ul><li>JS引擎会把JS里所有的<code>var</code>和<code>function</code>提升到<strong>当前作用域</strong>的最前面优先解析，然后再按照书写顺序自上而下解析代码</li></ul></li><li>变量预解析（变量提升）：<ul><li>将所有变量的声明提升到当前作用域最前面，但是<strong>只提升声明操作，不提升赋值操作</strong></li></ul></li><li>函数提升：<ul><li>将所有的函数声明调到最前面优先解析，但是不调用函数。调用必须写在函数表达式下。</li></ul></li></ul></blockquote><blockquote><p>题目都做出来了吗？一起来看看结果是不是如你所想：</p><ul><li><p>key1：</p><blockquote><p>undefined</p></blockquote></li><li><p>因为在代码解析过程中，<code>fun()</code>函数内的<code>var num</code>声明被提升到了函数最上层，声明变量但不赋值的情况下，变量值默认为<code>undefined</code>(我前面有写哦，不信回看 第二节 2.2的内容)，所以解析的真实代码为：</p><blockquote><p>var num;</p><p>function fun( ) { };</p><p>num = 10;</p><p>function fun( ) {</p><p>​    var num; // 此时num声明但没有赋值</p><p>​    console.log(num ); // 打印内容为undefined</p><p>​    num = 20;</p><p>}</p></blockquote></li></ul></blockquote><blockquote><ul><li><p>key2：</p><blockquote><p>9<br>9<br>9<br>9<br>9</p><p>error // 报错</p></blockquote></li><li><p>这就涉及到艾奇大佬设计JavaScript时留下的bug了，且听我道来</p></li><li><p>这道题目中的函数f1( )内有一段代码<code>var a = b = c = 9;</code>在<strong>JS的解析中</strong>，并不是解析为：<code>var a = 9; var b = 9; var c = 9;</code>，而是被解析为：<code>var a = 9; b = 9; c = 9;</code>而在函数中的b和c未使用<code>var</code>声明直接赋值，那么b和c就是两个全局变量（这个我也在前面讲过的哟，不信还是回看第二节的2.2~），所以被解析的真实代码为:</p><blockquote><p>function f1( ) { };</p><p>f1( ); // 调用函数</p><blockquote><p>function f1( ) {</p><p>​    var a;</p><p>​    a = 9;</p><p>​    b = 9; // 此时的b为全局变量，全局可调用</p><p>​    c = 9; // 此时的c为全局变量，全局可调用</p><p>​    console.log(a ); // 9</p><p>​    console.log(b ); // 9</p><p>​    console.log(c ); // 9</p><p>}</p></blockquote><p>console.log(c ); // 9</p><p>console.log(b ); // 9</p><p>console.log(a ); // error，a被声明在函数中，所以a是一个局部变量，在外部不可以使用，所以报错</p></blockquote></li></ul></blockquote><h3 id="七、对象Object"><a href="#七、对象Object" class="headerlink" title="七、对象Object"></a>七、对象Object</h3><ul><li>对象是一个具体的事物，在JS中，对象是一组无序的相关属性和方法的集合，所有事物都是对象，例如：字符串、数值、数组、函数等。</li><li>对象有属性和方法<ul><li>属性：<strong>事物的特征</strong>，在对象中用<strong>属性</strong>来表示（常用名词）</li><li>方法：<strong>事物的行为</strong>，在对象中用<strong>方法</strong>表示。（常用动词）</li></ul></li></ul><h4 id="7-1-创建对象的三种方式（现阶段）"><a href="#7-1-创建对象的三种方式（现阶段）" class="headerlink" title="7.1 创建对象的三种方式（现阶段）"></a>7.1 创建对象的三种方式（现阶段）</h4><ol><li><p>用字面量创建：用花括号<code>{}</code>包裹，里面包含了表达这个具体对象的属性和方法</p><ul><li><p><code>var obj = { }; // 创建了一个空对象</code></p></li><li><p>具体使用方法：</p><ul><li><blockquote><p>var object = {</p><p>​    uname: EagleH, // 属性</p><p>​    age: 3,</p><p>​    sex: ‘男’,</p><p>​    SayHi: funciton( ) { // 方法</p><p>​        console.log(‘Hi~’);</p><p>​    }</p><p>}</p></blockquote></li></ul></li><li><p><strong>注意：</strong></p><ul><li>里面的属性或者方法采用键值对的形式，属性名：属性值。</li><li>多个属性或方法中间用英文逗号<code>,</code>隔开（最后一个不跟）</li><li>方法冒号后面跟一个<strong>匿名函数</strong></li><li>调用对象的属性：<ul><li><code>对象名.属性名</code></li><li><code>对象名['属性名']</code></li><li>两者都行，比如<code>object.age</code>或者<code>object[age]</code></li></ul></li><li>调用对象的方法：<ul><li><code>对象名.方法名</code></li><li>如：<code>object.SayHi()</code></li><li>注意小括号</li></ul></li></ul></li></ul></li><li><p>利用new关键字创建：</p><ul><li><code>var obj = new Object(); // 创建了一个空对象，注意O为大写</code></li><li>追加属性：<ul><li><code>obj.uname = EagleH;</code></li><li><code>obj.age = 3;</code></li></ul></li><li>追加方法：<ul><li><code>obj.SayHi = function() {}</code></li></ul></li><li><strong>注意：</strong><ul><li>利用等号赋值的方法添加对象的属性和方法</li><li>每个属性和方法之间用<code>;</code>隔开</li></ul></li></ul></li><li><p>利用<strong>构造函数</strong>创建：利用函数的方法重复创建<strong>多个对象</strong></p><ul><li><p>构造函数封装的是对象而不是普通代码</p></li><li><p>封装的是共同的属性和方法</p></li><li><p>语法： </p><ul><li><blockquote><p>function 构造函数名( ) {</p><p>​    this.属性1 = 属性值1；</p><p>​    this.属性2 = 属性值2；</p><p>​    this.方法 = function( ) {</p><p>​    } </p><p>}</p></blockquote></li></ul></li><li><p>调用构造函数创建对象：</p><ul><li><code>new 构造函数名();</code></li></ul></li><li><p><strong>注意：</strong></p><ul><li>构造函数名的首字母要大写（代码规范，不是强制要求）</li><li>构造函数不需要return，也可以返回值</li><li>调用构造函数必须使用new关键字</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'EagleH'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ol><blockquote><p>构造函数与对象的区别：</p><ul><li>构造函数，如Sta( )，抽取了对象的公共部分，封装到函数里，泛指某一大类</li><li>创建对象，如new Star( )，特质某一个，通过new关键字创建对象也称对象实例化。</li></ul></blockquote><h4 id="7-2-new-关键字"><a href="#7-2-new-关键字" class="headerlink" title="7.2 new 关键字"></a>7.2 new 关键字</h4><ul><li>new构造函数可以在内存中创建一个空的对象</li><li>this就会指向这个空对象</li><li>执行构造函数里的代码，添加属性和方法</li><li>返回对象</li></ul><h4 id="7-3-遍历对象"><a href="#7-3-遍历对象" class="headerlink" title="7.3 遍历对象"></a>7.3 遍历对象</h4><ul><li><p>ES5中用<code>for...in...</code>来对数组或者对象的属性进行循环操作</p></li><li><p>语法：<code>for(变量 in 对象) { }</code></p></li><li><p>示例：</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// k变量，输出得到的是属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出的是k属性的属性值</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="7-4-小结"><a href="#7-4-小结" class="headerlink" title="7.4 小结"></a>7.4 小结</h4><ul><li>合理利用对象可以让代码更清晰</li><li>对象为<strong>复杂数据类型</strong>Object</li><li>对象的本质：一组无序的相关属性和方法的集合</li><li>构造函数泛指某一大类</li><li>对象实例特质某一个</li><li><code>for..in..</code>用于对对象的属性和方法进行循环操作</li></ul><h3 id="八、JS内置对象"><a href="#八、JS内置对象" class="headerlink" title="八、JS内置对象"></a>八、JS内置对象</h3><ul><li><p>JS语言中自带的一些对象，供开发者使用，提供了一些常用的或是最基本且必要的功能（属性和方法），可帮助快速开发。</p></li><li><p>在JS中的对象分为三大类</p><ul><li>自定义对象</li><li>内置对象</li><li>浏览器对象</li></ul></li><li><p>自定义对象和内置对象为JS的基础内容，属于ECMAScript，而浏览器对象为JS独有</p></li><li><p>查阅文档：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li><li>Mozilla开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括HTML、CSS和万维网及HTML5应用的API</li></ul></li></ul><h4 id="8-1-Math-数学对象"><a href="#8-1-Math-数学对象" class="headerlink" title="8.1 Math()数学对象"></a>8.1 Math()数学对象</h4><ul><li><p>不是一个构造函数，所以不需要用new关键字来调用，而是直接使用里面的属性和方法即可</p></li><li><p>常用的属性和方法：</p><blockquote><p><code>Math.PI</code>：圆周率</p><p><code>Math.max()</code>：数组中最大的数（括号内应全为数字，若括号内没有值，则返回<code>-infinity</code>，如果有非数字的值，则返回<code>NaN</code>）</p><p><code>Math.floor()</code>：向下取整</p><p><code>Math.ceil()</code>：向上取整</p><p><code>Math.round()</code>：四舍五入取整（就近取整，<code>.5</code>比较特殊，<code>Math.round(1.5) = 2</code>但是<code>Math.round(-5) = -1</code>）</p><p><code>Math.abs()</code>：取绝对值（隐式转换，“1”的绝对值为1）</p><p><code>Math,random()</code>：返回一个随机小数，范围在[0, 1)之间，左闭右开，该方法括号内不能有参数。</p></blockquote></li></ul><h4 id="8-2-Date-事件对象"><a href="#8-2-Date-事件对象" class="headerlink" title="8.2 Date()事件对象"></a>8.2 Date()事件对象</h4><ul><li><p>是一个构造函数，所以必须用new来调用和创建</p></li><li><p>声明：<code>var date = new Date(); // 括号内没有参数，则返回当前事件给date变量</code></p></li><li><p><code>Date()</code>参数的常用写法：</p><ul><li>数字型：<code>2021, 1, 1</code>  <strong>注意：返回的月份是2月，因为月份计算从0开始</strong></li><li>字符串型：<code>"2021-1-1 08:00:00"</code></li></ul></li><li><p>日期的格式化：</p><ul><li><blockquote><p><code>getFullYear();</code>：获取当前年份</p><p><code>getMonth();</code>：获取当前月份（0~11），所以实际月份需要+1</p><p><code>getDate();</code>：获取当前为几号</p><p><code>getDay();</code>：获取今天星期几周日0~周六6）</p><p><code>getHours();</code>：获取当前时</p><p><code>getMinutes();</code>：当前分</p><p><code>getSeconds();</code>：当前秒</p></blockquote></li><li><p><strong>注意：使用格式化方法前需要声明时间对象</strong></p></li></ul></li><li><p>获取日期总的毫秒数（时间戳）</p><ul><li>Date()对象总的毫秒数是基于1970年1月1日开始的毫秒数（时间戳，独一无二）</li><li>获取方法：<ul><li><code>valueOf();</code></li><li><code>getTime();</code></li><li>用<code>+new</code>的声明方式</li></ul></li><li>第三种最常用<ul><li>示例：<code>var date = +new Date(); // date中保存的就是当前的时间戳</code></li></ul></li><li>HTML5还新增了一种：<ul><li><code>Date.now();</code></li><li>更加简单，但是需要考虑兼容性</li></ul></li></ul></li></ul><h4 id="8-3-Array-数组对象"><a href="#8-3-Array-数组对象" class="headerlink" title="8.3 Array()数组对象"></a>8.3 Array()数组对象</h4><ul><li>话不多说直接来<ul><li><code>var arr1 = new Array(); // 创建了一个空数组</code></li><li><code>var arr2 = new Array(2); // 创建了一个长度为2的空数组</code></li><li><code>var arr3 = new Array(2, 3); // 创建了一个数组内容为[2, 3]的数组（有内容啦~）</code></li></ul></li></ul><h5 id="8-3-1-检测是否为数组"><a href="#8-3-1-检测是否为数组" class="headerlink" title="8.3.1 检测是否为数组"></a>8.3.1 检测是否为数组</h5><ul><li><p><code>instanceof</code>运算符，用于检测是否为数组</p><ul><li><p>示例：</p><blockquote><p>var arr = [ ];</p><p>console.log(arr instanceof Array);</p></blockquote></li><li><p>打印内容为true，表示arr是一个数组。</p></li></ul></li><li><p><code>Array.isArray(参数);</code> 方法，用于判断<code>参数</code>是否为数组（<strong>该方法为HTML5新增</strong>）</p></li></ul><h5 id="8-3-2-添加和删除数组元素"><a href="#8-3-2-添加和删除数组元素" class="headerlink" title="8.3.2 添加和删除数组元素"></a>8.3.2 添加和删除数组元素</h5><ul><li><p><code>push()</code>：在<strong>数组末尾</strong>添加一个或多个数组元素，参数为所添加的元素</p><ul><li><blockquote><p>var arr = [1, 2, 3];</p><p>arr.push(4, 5);</p><p>console.log(arr);</p></blockquote></li><li><p>打印内容为<code>[1, 2, 3, 4, 5]</code></p></li><li><p><code>push()</code>的返回值为新数组的长度</p></li></ul></li><li><p><code>unshift()</code>：在<strong>数组开头</strong>添加一个或多个数组元素，参数为所添加的元素</p><ul><li><blockquote><p>var arr = [1, 2, 3];</p><p>arr.unshift(4, 5);</p><p>console.log(arr);</p></blockquote></li><li><p>打印内容为<code>[4, 5, 1, 2, 3]</code></p></li><li><p><code>unshift()</code>的返回值为新数组的长度</p></li></ul></li><li><p><code>pop()</code>：删除<strong>数组末尾</strong>的一个元素（括号内不跟参数）</p><ul><li>返回值为被删除的元素</li></ul></li><li><p><code>shift()</code>：删除<strong>数组开头</strong>的第一个元素（无参数）</p><ul><li>返回值为被删除的元素</li></ul></li></ul><h5 id="8-3-3-数组排序"><a href="#8-3-3-数组排序" class="headerlink" title="8.3.3 数组排序"></a>8.3.3 数组排序</h5><ul><li><p><code>reverse()</code>：将数组进行翻转（<code>[1, 2, 3]</code>变成<code>[3, 2, 1]</code>）</p></li><li><p><code>sort()</code>：讲数组进行冒泡排序</p><ul><li><blockquote><p>该排序方式有一定的问题，他根据元素最左边的一位数字来排序，话不多说看例子</p><blockquote><p>var arr = [1, 30, 12, 18, 5, 9, 42, 99];</p><p>var nArr = arr.sort();</p><p>console.log(nArr);</p></blockquote><p>打印结果为：<code>[1, 12, 18, 30, 42, 5, 9, 99]</code></p></blockquote></li><li><blockquote><p>解决方案（记住即可）：</p><ul><li><code>arr.sort(function(a, b) {return a - b;})</code>升序排列</li><li><code>arr.sort(function(a, b) {return b - a;})</code>降序排列</li></ul></blockquote></li></ul></li></ul><h5 id="8-3-4-数组索引方法"><a href="#8-3-4-数组索引方法" class="headerlink" title="8.3.4 数组索引方法"></a>8.3.4 数组索引方法</h5><ul><li><p><code>indexOf(数组元素);</code>返回数组索引号</p><ul><li><p>若有相同元素，则返回找到的第一个的索引号，若找不到，返回<code>-1</code></p></li><li><blockquote><p>var arr = [‘red’, ‘green’, ‘blue’];</p><p>console.log(arr.indexOf(‘green’));</p></blockquote></li><li><p>打印内容为<code>1</code>(‘green’的索引号)</p></li></ul></li><li><p><code>lastindexOf(数组元素);</code>：与<code>indexOf();</code>用法相同，区别在于<strong>从末尾开始</strong>往前查找</p></li></ul><h5 id="8-3-5-数组转换为字符串"><a href="#8-3-5-数组转换为字符串" class="headerlink" title="8.3.5 数组转换为字符串"></a>8.3.5 数组转换为字符串</h5><ul><li><code>toString() // 逗号分隔，不可更改</code></li><li><code>join(分隔符) // 默认逗号分隔，可更改，常用'-'和'&amp;'</code></li></ul><h5 id="8-3-6-数组的拼接、截取和批量删除"><a href="#8-3-6-数组的拼接、截取和批量删除" class="headerlink" title="8.3.6 数组的拼接、截取和批量删除"></a>8.3.6 数组的拼接、截取和批量删除</h5><ul><li><p>数组的拼接：<code>concat();</code></p><ul><li><p>该方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组</p></li><li><blockquote><p>var array1 = [‘a’, ‘b’, ‘c’];<br>var array2 = [‘d’, ‘e’, ‘f’];<br>var array3 = array1.concat(array2);</p><p>console.log(array3);</p></blockquote></li><li><p>打印内容为：<code>["a", "b", "c", "d", "e", "f"]</code></p></li></ul></li><li><p>数组的截取：<code>slice(begin, end);</code></p><ul><li><p>该方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p></li><li><blockquote><blockquote><p>var animals = [‘ant’, ‘bison’, ‘camel’, ‘duck’, ‘elephant’];</p><p>console.log(animals.slice(2));</p></blockquote><p>打印内容为：<code>["camel", "duck", "elephant"]</code></p><blockquote><p>console.log(animals.slice(2, 4));</p></blockquote><p>打印内容为：<code>["camel", "duck"]</code></p><blockquote><p>console.log(animals.slice(1, 5));</p></blockquote><p>打印内容为：<code>["bison", "camel", "duck", "elephant"]</code></p></blockquote></li></ul></li><li><p><strong>数组的批量删除：<code>splice(开始， 个数);</code></strong></p><ul><li><p>该方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会<strong>改变原数组。</strong></p></li><li><blockquote><blockquote><p>const months = [‘Jan’, ‘March’, ‘April’, ‘June’];<br>months.splice(1, 0, ‘Feb’);<br>console.log(months);</p></blockquote><p>打印内容为：<code>["Jan", "Feb", "March", "April", "June"]</code></p><blockquote><p>months.splice(4, 1, ‘May’);<br>console.log(months);</p></blockquote><p>打印内容为：<code>["Jan", "Feb", "March", "April", "May"]</code></p></blockquote></li></ul></li></ul><h4 id="8-4-字符串对象"><a href="#8-4-字符串对象" class="headerlink" title="8.4 字符串对象"></a>8.4 字符串对象</h4><blockquote><p><strong>字符串对象的不可变性：</strong></p><p>字符串内的值不可改变，开发者对其进行重新赋值，实质上只是在内存中重新开辟了新空间，然后将变量名指向了新的空间并赋值。<strong>原空间和值仍然存在</strong>，所以尽量减少拼接字符串和修改字符串，因为浏览器要不断地开辟新空间，会降低性能。</p><p><strong>注意：</strong>字符串对象的所有方法都不会改变本身（不可变性），而是在完成操作以后生成新的字符串，将变量名指向。</p></blockquote><ul><li><p>根据字符串中的字符位置返回下标：</p><ul><li><p><code>indexOf('要检查的字符', [起始位置]);</code> // 用法和数组差不多 </p></li><li><p><code>lastindexOf();也一样</code></p></li><li><p>中括号<code>[]</code>包裹的表示可选参数，可写可不写，默认从头开始</p></li><li><blockquote><p>常见面试题test：</p><p><code>var str = 'abcoefoxyozzopp';</code></p><p>编写代码查找并返回<code>o</code>出现的次数和位置</p></blockquote></li></ul></li><li><p><strong>根据位置返回字符：</strong></p><ul><li><code>charAt(index ); // index为索引号，返回字符</code></li><li><code>charCodeAt(index); // 返回字符的ASCII码（常用于判断用户按键按下）</code></li><li><code>str[index]; // 返回字符（H5新增，考虑兼容性）</code></li></ul></li><li><p><strong>字符串操作方法：</strong></p><ul><li><code>concat(字符串1, 字符串2...); // 拼接字符串，但是使用+拼接更为常见</code></li><li><code>substr(start, lenght); // 从start(索引号)开始，截取length个字符(较为常用)</code></li><li><code>slice(start, end); // 从start开始取，end结束，end取不到</code></li><li><code>substring(start, end); // 与slice相同，但是不接受负值</code></li></ul></li><li><p>替换字符串：</p><ul><li><code>replace(被替换的字符, 替换的字符)</code></li><li>仅替换匹配到的第一个字符，若要全部替换或者多个替换，可以使用循环</li></ul></li><li><p>字符串转为数组：</p><ul><li><p><code>split(分隔符);</code>与<code>jion()</code>相反</p></li><li><blockquote><blockquote><p>str = ‘red&amp;blue&amp;yellow’;</p><p>console.log(str.split(‘&amp;’));</p></blockquote><p>打印内容为：<code>["red", "blue", "yellow"]</code></p></blockquote></li></ul></li><li><p>其他常用方法：</p><ul><li>转为大写：<code>toUpperCase();</code></li><li>转为小写：<code>toLowerCase();</code></li></ul></li></ul><blockquote><p>JS中堆和栈空间分配的区别：</p><ul><li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等，其操作方式类似于数据结构中的栈，简单数据类型就是保存在栈里的；</li><li>堆（操作系统）：储存复杂数据类型（对象），一般由程序员分配释放，若程序员不分配释放，由垃圾回收机制回收，引用数据类型就是保存在堆里的。</li></ul></blockquote><blockquote><p>JS终末的叭叭叭：<br>这篇笔记里只写了ECMAScript5的一些基本知识，不涉及到ES6，而JS中的DOM和BOM打算另起一篇笔记写一下，方便查看，否则全部写到一起我觉得不方便阅读，也不方便取舍哈哈哈（我身边有的人就是不学DOM直接看框架，虽然困难，但是也能够过得去）</p><p>okk~es5的一些基础内容我觉得我都写到了，如果发现有什么遗漏，可以告诉我我来补充</p></blockquote><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5C3新增学习笔记</title>
      <link href="2021/02/12/h5c3-xin-zeng-xue-xi-bi-ji/"/>
      <url>2021/02/12/h5c3-xin-zeng-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这部分内容是在看视频学习HTML和CSS后紧跟着讲解的H5C3的新增部分，与前两者相同，也是在学习过程中手写到笔记本上的笔记内容，所以内容上可能会有所欠缺，欢迎指正。况且现在互联网如此之发达，只要想学，并且付诸行动，就没有学不好的，加油啊~</p></blockquote><h1 id="HTML5新增特性"><a href="#HTML5新增特性" class="headerlink" title="HTML5新增特性"></a>HTML5新增特性</h1><h3 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h3><blockquote><p>针对以前的不足，增加了许多新的标签、表单和属性。</p><p>（新特性都有兼容性问题，基本是<code>IE9+</code>以上版本的浏览器才支持，若不考虑兼容的问题，可以大量使用<strong>其实就目前而言，都2021年了，大多数情况下完全不需要考虑H5C3这部分的兼容问题</strong>）</p></blockquote><h3 id="一、新增的语义化标签"><a href="#一、新增的语义化标签" class="headerlink" title="一、新增的语义化标签"></a>一、新增的语义化标签</h3><ul><li><code>&lt;header&gt;&lt;/header&gt;</code>：头部标签</li><li><code>&lt;nav&gt;&lt;/nav&gt;</code>：导航标签</li><li><code>&lt;article&gt;&lt;/article&gt;</code>：内容标签</li><li><code>&lt;section&gt;&lt;/section&gt;</code>：定义文档某个区域</li><li><code>&lt;aside&gt;&lt;/aside&gt;</code>：侧边栏标签</li><li><code>&lt;footer&gt;&lt;/footer&gt;</code>：尾部标签</li></ul><blockquote><p>注意：</p><ul><li>语义化标准主要是针对搜索引擎</li><li>这些新标签可以多次使用</li><li>在<code>IE9+</code>版本的浏览器中，需要把这些转化为块级元素</li><li>移动端更喜欢使用，并且没有兼容性问题</li></ul></blockquote><h3 id="二、新增的多媒体标签"><a href="#二、新增的多媒体标签" class="headerlink" title="二、新增的多媒体标签"></a>二、新增的多媒体标签</h3><h4 id="2-1-视频标签-lt-video-gt"><a href="#2-1-视频标签-lt-video-gt" class="headerlink" title="2.1 视频标签<video>"></a>2.1 视频标签<code>&lt;video&gt;</code></h4><ul><li><p>目前仅支持<code>MP4,WebM,Ogg</code>三种格式，更推荐<code>MP4</code></p></li><li><p>语法：<code>&lt;video src="文件地址url" controls="controls"&gt; &lt;/video&gt;</code></p></li><li><p><strong>照顾兼容性写法</strong>：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> // mp4格式    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> // ogg格式    您的浏览器不支持video标签 // 都不支持的情况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>常见的属性：</p><ul><li><code>autoplay</code>：<ul><li>属性值：<code>autoplay</code></li><li>描述：视频自动播放（谷歌浏览器需要添加<code>muted</code>才能有效）</li></ul></li><li><code>controls</code>：<ul><li>属性值：<code>controls</code></li><li>描述：显示播放控件</li></ul></li><li><code>width/height</code>：<ul><li>属性值：像素<code>px</code></li><li>描述：设置宽高</li></ul></li><li><code>loop</code>：<ul><li>属性值：<code>loop</code></li><li>描述：循环播放</li></ul></li><li><code>preload</code>：<ul><li>属性值：<code>auto</code>:视频预加载、<code>none</code>:不预加载</li><li>描述：是否预加载视频（若设置了<code>autoplay</code>，则此属性可无视）</li></ul></li><li><code>src</code>：<ul><li>属性值：<code>url</code></li><li>描述：视频的地址<code>url</code></li></ul></li><li><code>poster</code>：<ul><li>属性值：<code>imgurl</code></li><li>描述：等待画面的图片</li></ul></li><li><code>muted</code>：<ul><li>属性值：<code>muted</code></li><li>描述：静音</li></ul></li></ul></li></ul><h4 id="2-2-音频-lt-audio-gt"><a href="#2-2-音频-lt-audio-gt" class="headerlink" title="2.2 音频<audio>"></a>2.2 音频<code>&lt;audio&gt;</code></h4><ul><li><p>目前仅支持<code>MP3,Wav,Ogg</code>三种格式，更推荐<code>MP3</code></p></li><li><p>语法：<code>&lt;audio src="文件地址url" controls="controls"&gt; &lt;/audio&gt;</code></p></li><li><p>照顾兼容性写法：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> // mp3格式    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> // ogg格式    您的浏览器不支持audio标签 // 都不支持的情况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>常见的属性：</p><ul><li><code>autoplay</code>：<ul><li>属性值：<code>autoplay</code></li><li>描述：自动播放（谷歌浏览器）</li></ul></li><li><code>controls</code>：<ul><li>属性值：<code>controls</code></li><li>描述：显示控件</li></ul></li><li><code>loop</code>：<ul><li>属性值：<code>loop</code></li><li>描述：是否循环播放</li></ul></li><li><code>src</code>：<ul><li>属性值：<code>url</code></li><li>描述：音频地址<code>url</code></li></ul></li><li><code>muted</code>：<ul><li>属性值：<code>muted</code></li><li>描述：静音</li></ul></li></ul></li></ul><h4 id="2-3-多媒体视频小结"><a href="#2-3-多媒体视频小结" class="headerlink" title="2.3 多媒体视频小结"></a>2.3 多媒体视频小结</h4><ul><li>音频<code>&lt;audio&gt;</code>和视频<code>&lt;video&gt;</code>使用基本相同</li><li>浏览器支持情况不同（推荐音频<code>.mp3</code>/视频<code>.mp4</code>）</li><li>谷歌浏览器把<code>autoplay</code>禁止了（视频通过添加<code>muted</code>可以实现自动播放，音频不可以，只能以后考<code>JavaScript</code>）</li><li><code>&lt;video&gt;</code>是重点，常用设置：自动播放，不显示空间，循环和设置大小尺寸</li></ul><h3 id="三、新增的-lt-input-gt-类型（type属性的类型）"><a href="#三、新增的-lt-input-gt-类型（type属性的类型）" class="headerlink" title="三、新增的<input>类型（type属性的类型）"></a>三、新增的<code>&lt;input&gt;</code>类型（<code>type</code>属性的类型）</h3><ul><li><pre class=" language-html"><code class="language-html">type="email":限制用户输入必须为email类型     "url":限制用户输入必须为url地址类型     "date":限制用户输入必须为日期类型     "time":限制用户输入必须为时间类型     "month":限制用户输入必须为月份类型     "week":限制用户输入必须为周类型     "number":限制用户输入必须为数字类型     "tel":手机号（数字）     "search":搜索框     "color":生成一个颜色选择表单</code></pre></li><li><p><strong>注意：</strong></p><ul><li>验证时前面必须添加<code>&lt;form&gt;</code>表单域</li><li>最后用<code>&lt;input&gt;</code>的<code>&lt;submit&gt;</code>提交按钮验证表单</li></ul></li></ul><h3 id="四、新增的表单属性"><a href="#四、新增的表单属性" class="headerlink" title="四、新增的表单属性"></a>四、新增的表单属性</h3><ul><li><code>&lt;required&gt;</code><ul><li>属性值：<code>required</code></li><li>描述：限制表单内容不能为空</li></ul></li><li><code>&lt;placeholder&gt;</code><ul><li>属性值：<code>提示文字</code></li><li>描述：提示信息，存在的默认值将不显示</li></ul></li><li><code>&lt;autofocus&gt;</code><ul><li>属性值：<code>autofocus</code></li><li>描述：自动聚焦，页面加载完成自动聚焦到指定表单</li></ul></li><li><code>&lt;autocomplete&gt;</code><ul><li>属性值：<code>off/on</code></li><li>描述：当用户输入时，会跳出曾经输入且成功提交的内容选项可供选择（表单需要由<code>name</code>属性），默认打开。</li></ul></li><li><code>&lt;multiple&gt;</code><ul><li>属性值：<code>multiple</code></li><li>描述：可以多选文件提交。（用于<code>input:file</code>中多选上传）</li></ul></li></ul><h1 id="CSS3新增特性"><a href="#CSS3新增特性" class="headerlink" title="CSS3新增特性"></a>CSS3新增特性</h1><h3 id="CSS3新增"><a href="#CSS3新增" class="headerlink" title="CSS3新增"></a>CSS3新增</h3><blockquote><p>兼容性问题，<code>ie9+</code>版本浏览器才能支持，移动端优于PC端</p></blockquote><h3 id="一、CSS新增选择器"><a href="#一、CSS新增选择器" class="headerlink" title="一、CSS新增选择器"></a>一、CSS新增选择器</h3><h4 id="1-1-属性选择器"><a href="#1-1-属性选择器" class="headerlink" title="1.1 属性选择器"></a>1.1 属性选择器</h4><ul><li><p>根据元素特定的属性来选择元素，可以不用借助于类或者id</p></li><li><pre class=" language-css"><code class="language-css">E[att] // 选择具有att属性的E元素E[att=<span class="token string">"val"</span>] // 选择具有att属性且值为val的E元素E[att^=<span class="token string">"val"</span>] // 选择具有att属性且值为val开头的E元素E[att$=<span class="token string">"val"</span>] // 选择具有att属性且值以val结尾的E元素E[att*=<span class="token string">"val"</span>] // 选择具有att属性且值中含有val的E元素</code></pre></li><li><p><strong>注：属性选择器与类/伪类选择器权重一样，都是<code>(0,0,1,0)</code>。</strong></p></li></ul><h4 id="1-2-结构伪类选择器"><a href="#1-2-结构伪类选择器" class="headerlink" title="1.2 结构伪类选择器"></a>1.2 结构伪类选择器</h4><ul><li><p>根据文档结构来选择，常用于根据父元素里面的子元素</p></li><li><pre class=" language-css"><code class="language-css"><span class="token property">E</span><span class="token punctuation">:</span>first-child // 父元素中的第一个子元素E<span class="token property">E</span><span class="token punctuation">:</span>last-child // 父元素中的最后一个子元素E<span class="token property">E</span><span class="token punctuation">:</span>nth-child // 父元素中的第n个子元素E<span class="token property">E</span><span class="token punctuation">:</span>first-of-type // 指定类型所有E元素中的第一个E元素<span class="token property">E</span><span class="token punctuation">:</span>last-of-type // 指定类型所有E元素中的最后一个E元素<span class="token property">E</span><span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> // 指定类型所有E元素中的第n个E元素</code></pre></li><li><p><strong>注：</strong></p><ul><li><p><code>n</code>可以是数字，关键字，或者公式</p></li><li><p>如果是数字，就是选择第<code>n</code>个子元素，从<code>1</code>开始</p></li><li><p>如果是关键字，<code>even</code>偶数，<code>odd</code>奇数</p></li><li><p>如果是公式，常见如下（从<code>0</code>开始每次<code>+1</code>，第0个和超出的会被忽略）：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token number">2</span>n // 偶数=even<span class="token number">2</span>n+<span class="token number">1</span> // 奇数=odd<span class="token number">5</span>n // <span class="token number">5</span>的倍数n+<span class="token number">5</span> // 从<span class="token number">5</span>开始（包括<span class="token number">5</span>）-n+<span class="token number">5</span> // 前<span class="token number">5</span>个（包括<span class="token number">5</span>）</code></pre></li><li><p><code>of</code>类和<code>child</code>用法相似，但读取方式不同</p><ul><li><code>child</code>类会排列所有盒子，先看序号再看标签，都对应才会操作</li><li><code>of</code>类会先看标签，同类标签排序再看序号</li><li>其他n的用法也相同</li></ul></li></ul></li></ul></li></ul><h4 id="1-3-伪元素选择器"><a href="#1-3-伪元素选择器" class="headerlink" title="1.3 伪元素选择器"></a>1.3 伪元素选择器</h4><ul><li>利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构</li><li><code>::before</code>：在元素内部的前面插入内容</li><li><code>::after</code>：在元素内部的后面插入内容</li><li><strong>注意：</strong><ul><li>before和after创建一个元素，但属于行内元素</li><li>新建的元素在文档树中找不到，成为伪元素</li><li>语法：<code>element::before{ }</code></li><li>before和after必须有content属性（用引号写内容）</li><li>before在父元素内容的前面创建，after则是在后面</li><li>伪元素选择器和标签选择器一样，权重为(0,0,0,1)</li></ul></li></ul><h3 id="二、新增盒子模型"><a href="#二、新增盒子模型" class="headerlink" title="二、新增盒子模型"></a>二、新增盒子模型</h3><ul><li>可以通过<code>box-sizing</code>来制定盒子模型，有两个属性值：<ul><li><code>content-box</code>：<ul><li>默认的为<code>box-sizing: content-box;</code></li><li>盒子大小为<code>width+ padding+ border</code></li></ul></li><li><code>border-box</code>：<ul><li><code>box-sizing: border-box;</code></li><li>盒子大小为固定的<code>width</code>（自动计算）</li></ul></li></ul></li><li>改变为CSS3的盒子模型(<code>border-box</code>)后，<code>padding</code>和<code>border</code>就不会在撑大盒子里（如果需要可以写入<code>*</code>里）</li></ul><h3 id="三、新增filter和calc属性"><a href="#三、新增filter和calc属性" class="headerlink" title="三、新增filter和calc属性"></a>三、新增<code>filter</code>和<code>calc</code>属性</h3><ul><li>CSS3的滤镜<code>filter</code>：<ul><li>将模糊或颜色偏移等效果应用于元素</li><li>语法：<code>filter: 函数();</code></li><li>示例：<code>filter: blur(5px);</code>blur模糊处理，值越大越模糊</li></ul></li><li><code>calc</code>计算函数：<ul><li>让你声明CSS属性时执行一些计算</li><li>语法：<code>width: calc( 100% - 80px)</code></li><li>可以使用的计算符号有：<code>+ - * /</code></li><li><strong>注意：计算符号两边必须添加空格，否则无法生效</strong></li></ul></li></ul><h3 id="四、CSS过渡（重点）"><a href="#四、CSS过渡（重点）" class="headerlink" title="四、CSS过渡（重点）"></a>四、CSS过渡（重点）</h3><ul><li>在不使用JS和Flash情况下，元素从一种样式变为另一种样式时添加效果，从一个样式慢慢过渡到另一种样式。（常与<code>:hover</code>一起使用）</li><li>语法：<code>transition: 属性 花费时间 运动曲线 何时开始;</code></li><li>属性值：<ul><li>属性：要变化的CSS属性，宽高/背景色/内外边距都可以，若想要都变化过渡，写个<code>all</code>就行</li><li>花费时间：单位必须写，为秒。如<code>0.5s</code></li><li>运动曲线：默认为<code>ease</code>（可以省略）<ul><li><code>linear</code>：匀速</li><li><code>ease</code>：逐渐减速</li><li><code>ease-in</code>：加速</li><li><code>ease-out</code>：减速</li><li><code>ease-in-out</code>：先加后减</li></ul></li><li>何时开始：单位必须写（秒），可以设置延时触发，默认为<code>0s</code>（可选）</li></ul></li><li><strong>注意：谁要过渡给谁添加<code>transition</code>。（多个属性用<code>“，”</code>分隔）</strong></li></ul><h3 id="五、CSS3的2D转换"><a href="#五、CSS3的2D转换" class="headerlink" title="五、CSS3的2D转换"></a>五、CSS3的2D转换</h3><ul><li>转换（<code>transform</code>）可实现元素的位移、旋转和缩放效果（变形）<ul><li>移动（<code>translate</code>）</li><li>旋转（<code>rotate</code>）</li><li>缩放（<code>scale</code>）</li></ul></li><li>二维坐标系：2D转换时改变标签在二维平面上的位置和形状</li></ul><h4 id="5-1-translate移动"><a href="#5-1-translate移动" class="headerlink" title="5.1 translate移动"></a>5.1 translate移动</h4><ul><li><p>语法：<code>transform: translate(x, y);</code>或者分开写<code>transform: translateX(n);transform: translateY(n);</code></p></li><li><p>定义2D转换中的移动，沿着X和Y轴移动元素</p></li><li><p>优点：不会影响其他元素位置</p></li><li><p>translate中的百分比是相对于自身元素的<code>translate:(50%, 50%);</code></p></li><li><p>对行内标签没有效果</p></li><li><blockquote><p><strong>小技巧：实现盒子水平和垂直居中</strong></p><p>{</p><p>  position：absolute；</p><p>  top: 50%;</p><p>  left: 50%;</p><p>  height: 200px</p><p>  weight: 200px;</p><p> transform: translate(-50%, -50%);</p><p>}</p></blockquote></li></ul><h4 id="5-2-rotate选旋转"><a href="#5-2-rotate选旋转" class="headerlink" title="5.2 rotate选旋转"></a>5.2 rotate选旋转</h4><ul><li><p>语法：<code>transform: rotate(角度);</code></p></li><li><p><code>rotate</code>括号里填写旋转的角度，单位是<code>deg</code>，示例：<code>transform: rotate(45deg);</code></p></li><li><p>角度为正时，顺时针旋转，角度为负时，逆时针旋转</p></li><li><p>默认旋转的中心点时<strong>元素中心点</strong></p></li><li><p>手动设置转换中心点：</p><ul><li>语法：<code>transform-origin: x y;</code></li><li>注意x与y中间用空格隔开</li><li>x和y默认转换的中心点时元素的中心点<code>（50% 50%）</code></li><li>除了百分比外，也可以给x和y设置像素或者方位名词（<code>top/bottom/left/right</code>）</li></ul></li></ul><h4 id="5-3-scale缩放"><a href="#5-3-scale缩放" class="headerlink" title="5.3 scale缩放"></a>5.3 scale缩放</h4><ul><li>语法：<code>transform: scale(x, y);</code></li><li><code>x = y = 1</code>时，宽高放大为1一倍，等于没有放大</li><li><code>transform: scale(2, 2);</code>放大2倍</li><li>优势：可以设置转换中心点缩放，不影响其他盒子</li></ul><h4 id="5-4-2D转换的综合写法"><a href="#5-4-2D转换的综合写法" class="headerlink" title="5.4 2D转换的综合写法"></a>5.4 2D转换的综合写法</h4><ul><li>同时使用多个转换，格式为：<code>transform: translate() rotate() scale();</code></li><li>变换顺序会影响其他效果（比如旋转会改变坐标方向，在进行移动时方向可能有问题）</li><li>当同时又位移和其他属性时，位移写在最前面（尽量规避前一个问题）</li></ul><h3 id="六、CSS3动画"><a href="#六、CSS3动画" class="headerlink" title="六、CSS3动画"></a>六、CSS3动画</h3><ul><li>动画（animation）可以通过多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果，相比过渡，动画可以实现更多变化，更多控制，连续自动播放等效果</li><li>基本使用步骤<ul><li>先定义动画</li><li>再调用动画</li></ul></li></ul><h4 id="6-1-Keyframes定义动画"><a href="#6-1-Keyframes定义动画" class="headerlink" title="6.1 Keyframes定义动画"></a>6.1 <code>Keyframes</code>定义动画</h4><ul><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">// 动画开头    100% </span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> // 动画结尾<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>使用动画：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#1296db</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> 动画名称<span class="token punctuation">;</span> // 调用动画    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 持续时间； // 持续时长<span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="6-2-动画序列"><a href="#6-2-动画序列" class="headerlink" title="6.2 动画序列"></a>6.2 动画序列</h4><ul><li><code>0%</code>是动画的开始，<code>100%</code>是动画的完成</li><li>在<code>@keyframes</code>中规定某项CSS样式，就能创建从当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种洋式的效果，可以改变任意多的样式和次数</li><li>请用百分比来规定变化发生的事件，或<code>"form" "to"</code>(与<code>0% 100%</code>等效)</li></ul><h4 id="6-3-动画常用属性"><a href="#6-3-动画常用属性" class="headerlink" title="6.3 动画常用属性"></a>6.3 动画常用属性</h4><ul><li><code>@keyframes</code>：规定动画</li><li><code>animation</code>：所有动画属性的简写属性（除<code>animation-play-state</code>外）</li><li><code>animation-name</code>：规定<code>@keyframes</code>动画的名称</li><li><code>animation-duration</code>：完成一个动画周期需要花费的时间</li><li><code>animation-timing-function</code>：规定动画的速度曲线，默认是<code>ease</code></li><li><code>animation-delay</code>：动画延时开启，默认为0</li><li><code>animation-iteration-count</code>：播放次数，默认为1，另一个属性值为<code>infinite</code>（无限循环）</li><li><code>animation-direction</code>：是否在下一个周期逆向播放（<code>normal</code>：否；<code>alternate</code>：逆向）</li><li><code>animation-play-state</code>：动画运行或暂停，默认为<code>running</code>（播放），还有<code>paused</code>（暂停）</li><li><code>animation-fill-mode</code>：动画结束后的状态（<code>forwards</code>：保持当前状态；<code>backwards</code>：回到初始状态）</li></ul><h4 id="6-4-动画的简写方式"><a href="#6-4-动画的简写方式" class="headerlink" title="6.4 动画的简写方式"></a>6.4 动画的简写方式</h4><ul><li><p>语法：<code>animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 结束状态;</code></p></li><li><p>不需要的属性值可以省略</p></li><li><p>速度曲线的细节：</p><ul><li><blockquote><p>属性：animation-timing-function</p><p>属性值：</p><p>​                linear     匀速</p><p>​                ease    默认，低速开始-&gt;加速-&gt;减速-&gt;低速停止</p><p>​                ease-in    低速开始，加速</p><p>​                ease-out    低速结束，减速</p><p>​                ease-in-out    低速开始和结束</p><p>​                steps( )    制定了函数中的间隔数量（步长，一步一步，不连续）</p></blockquote></li></ul></li></ul><h3 id="七、CSS的3D转换"><a href="#七、CSS的3D转换" class="headerlink" title="七、CSS的3D转换"></a>七、CSS的3D转换</h3><ul><li>特点：近大远小；物体后面遮挡不可见<ul><li>3D位移：<code>translate3d(x, y, z);</code></li><li>3D旋转：<code>rotate3d(x, y, z);</code></li><li>透视：<code>perspective</code></li><li>3D呈现：<code>transform-style</code></li></ul></li></ul><h4 id="7-1-translate3d"><a href="#7-1-translate3d" class="headerlink" title="7.1 translate3d( )"></a>7.1 translate3d( )</h4><ul><li>用法与2D移动差不多，只是多了一个translateZ( );</li><li>其中translateZ里的值一般使用px为单位</li></ul><h4 id="7-2-perspective"><a href="#7-2-perspective" class="headerlink" title="7.2 perspective"></a>7.2 perspective</h4><ul><li>在2D平面产生近大远小的视觉效果</li><li>想在网页中产生3D效果需要透视属性</li><li>模拟人类视觉效果，可以认安排一只眼睛去看</li><li>透视也成为视距，即人的眼睛到屏幕的距离</li><li>单位为px，透视越小，物体越大</li><li><strong>注意：透视写在被观察的父盒子上面</strong></li></ul><h4 id="7-3-rotate3d"><a href="#7-3-rotate3d" class="headerlink" title="7.3 rotate3d( )"></a>7.3 rotate3d( )</h4><ul><li>可以沿x, y, z或者自定以方向旋转</li><li>旋转方向：左手法则（负值则反方向）</li></ul><h4 id="7-4-transform-style"><a href="#7-4-transform-style" class="headerlink" title="7.4 transform-style"></a>7.4 transform-style</h4><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat; </code>子元素不开启3d空间（默认）</li><li><code>transform-style: preserve-3d;</code> 开启</li><li>代码写在父级盒子上，但影响的是子级盒子</li><li><strong>这个属性很重要哦</strong></li></ul><h1 id="课外拓展"><a href="#课外拓展" class="headerlink" title="课外拓展"></a>课外拓展</h1><h3 id="课外知识拓展"><a href="#课外知识拓展" class="headerlink" title="课外知识拓展"></a>课外知识拓展</h3><h3 id="一、浏览器私有前缀"><a href="#一、浏览器私有前缀" class="headerlink" title="一、浏览器私有前缀"></a>一、浏览器私有前缀</h3><ul><li><p>浏览器私有前缀是为了兼容老版本的写法，新版本无需添加</p></li><li><p>私有前缀：</p><ul><li><code>-moz-</code>：代表Firefox私有属性</li><li><code>-ms-</code>：代表Ie私有属性</li><li><code>-webkit-</code>：代表Safari，Chrome私有属性</li><li><code>-o-</code>：代表Opera私有属性</li></ul></li><li><p>提倡的写法(以<code>border-radius</code>为例)：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">-o-border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></code></pre></li></ul></li></ul><h3 id="二、网站TDK三大标签SEO优化"><a href="#二、网站TDK三大标签SEO优化" class="headerlink" title="二、网站TDK三大标签SEO优化"></a>二、网站TDK三大标签SEO优化</h3><ul><li>SEO（Search Engine Optimization）汉译为搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。</li><li>目的：对网站进行深度的优化，使其提高搜索排名</li><li>页面必须有三大标签来复合SEO优化：<ul><li><code>title</code>：<ul><li>网站标题（重要，不可替代）</li><li>建议：<strong>网站名（产品名）-网站的介绍（少于30字较佳）</strong></li></ul></li><li><code>description</code>：<ul><li>网站说明（简要说明网站是做什么的）</li><li>建议：description作为网站的总体业务和主题概括，多采用””我们是…”，”我们提供…”，”xxx网站作为…”，”电话：010-…”之类。 </li></ul></li><li><code>keyword</code>：<ul><li>关键字（页面关键字，搜索引擎关注点之一）</li><li>建议：最好限制6-8个关键字，关键字之间用英文逗号<code>,</code>隔开，关键字越靠前，权重越高</li></ul></li></ul></li><li>LOGO SEO优化：<ol><li>logo里首先放一个h1标签，目的是为了提权，显示重要性</li><li>h1里放一个链接，可以返回首页</li><li>链接里放文字（网站名称），但文字不显示<ul><li>方法一：<code>text-indent</code>移动到盒子外（<code>text-indent: -99999px;</code>），然后<code>overflow: hidden;</code></li><li>方法二：直接给<code>font-size:0;</code></li></ul></li><li>给链接一个<code>title</code>属性。（鼠标放在logo上就可以看到提示文本）</li></ol></li></ul><blockquote><p><strong>日常叭叭叭</strong>：</p><p>由于笔者也是一名刚刚入门的小白，对于学习时的很多内容可能并不太了解，所以具体有些小技巧没有运用的很熟练，如果经过验证后证实有问题，可以联系我修改，谢谢啦~</p></blockquote><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="2021/02/11/css-xue-xi-bi-ji/"/>
      <url>2021/02/11/css-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：这些笔记都是之前学习时写在笔记本上或者记录在markdown文件上的，现在学习搭建了一个自己的个人博客，所以将学习笔记都一点点写在个人博客上，作为自己个人博客的起步内容，同时也正好复习一遍WEB前端的基础学习内容，可能有些不正确的地方，或者有些重点被疏忽了，亦或者学习的时候觉得有的没有记录下来，欢迎大佬补充，小白是需要大佬调教的哈哈哈哈。</p></blockquote><h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><h3 id="一、CSS层叠样式表"><a href="#一、CSS层叠样式表" class="headerlink" title="一、CSS层叠样式表"></a>一、CSS层叠样式表</h3><ul><li><p>作用：美化页面，布局页面，堪称网页的美容师</p></li><li><p><strong>弊端</strong>：HTML比较单纯，只关注内容的语义，可以做简单的样式，但是复杂的就无法实现。</p></li><li><blockquote><p>CSS也是一门标记语言，主要用于设置HTML页面中的<strong>文本内容（字体、大小、对齐方式等）</strong>、<strong>图片的外形（宽高、边框样式、边距等）</strong>以及<strong>版面的布局和外观显示样式</strong>。</p></blockquote></li><li><p><strong>价值</strong>：由HTML专注去做结构呈现，由CSS做样式表现，实现<strong>结构（HTML）</strong>与<strong>样式（CSS）</strong>相分离</p></li><li><p>语法规范：</p><ul><li>选择器 + 样式（一条或多条申明，用<code>{ }</code>包含）<ul><li>选择器：用于指定CSS样式的HTML标签</li><li>样式：属性和属性值以键值对的形式进行声明</li></ul></li><li>示例：<br><code>h1 { color: red; font-size: 16px;}</code><ul><li><strong>以分号结尾</strong></li></ul></li></ul></li></ul><ul><li><p>代码风格（<strong>不是强制规定，而是为符合实际开发的书写方式</strong>）：</p><ul><li><p>样式格式书写：</p><ul><li><p>紧凑型格式 ：</p><ul><li> <code>h1 { color: red; font-size: 16px;}</code></li></ul></li><li><p>展开型格式（<strong>推荐</strong>）：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>样式大小写：推荐使用<strong>小写</strong>输入代码，特殊情况除外</p></li><li><p>空格规范：</p><ul><li>属性值前保留空格<ul><li><code>color: pink</code>(pink前保留)</li></ul></li><li>选择器和大括号中间保留空格<ul><li><code>h1 {##: ###}</code>(h1后面保留)</li></ul></li></ul></li></ul></li></ul><h3 id="二、CSS基础选择器"><a href="#二、CSS基础选择器" class="headerlink" title="二、CSS基础选择器"></a>二、CSS基础选择器</h3><ul><li>选择器的作用：根据不同的需求把不同的标签选出来。</li><li>选择器的分类：基础选择器和复合选择器</li></ul><h4 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h4><ul><li><p>用HTML的标签名作为选择器，为其指定统一的CSS样式。</p></li><li><p>示例：<code>div {}</code> 、<code>span {}</code>、<code>label {}</code>等</p></li><li><blockquote><p><strong>注：</strong>会将某一类的标签全部选择出来，快速但无法实现差异化</p></blockquote></li></ul><h4 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h4><ul><li><p>可以单独选择一个或者几个标签</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">.类名a </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li><li><p>会将所有拥有<code>类名a</code>的HTML元素修改为<code>{ }</code>内的样式</p></li><li><p>结构内用<code>class</code>属性来调用类名</p><ul><li><code>&lt;div class="类名a"&gt; 内容 &lt;/div&gt;</code></li></ul></li></ul></li><li><p>类名的命名要求：</p><ul><li>不要使用纯数字、中文等命名，尽量使用英文字母</li><li>命名要有语义，能让人看明白</li><li><strong>命名约定俗称的规范可查阅</strong>：web前端开发手册</li></ul></li><li><p>多类名的使用方式：</p><ul><li>可以给<code>class</code>的属性值填写多个类名，中间用<strong>空格</strong>隔开<ul><li><code>&lt;div class="类名a 类名b"&gt;</code></li></ul></li><li>可以将相同的样式放入同一个类，方便修改</li></ul></li></ul><h4 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h4><ul><li><p>HTML元素以<code>id</code>属性来设置id选择器，在CSS中用<code>#</code>来定义</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#id</span>名a </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li><li><p>将元素的<code>id</code>属性值设置为id名即可进行修改样式</p><ul><li><code>&lt;div id="id名a"&gt; 内容 &lt;/div&gt;</code></li></ul></li></ul></li><li><p><strong>注：元素的<code>id</code>属性具有唯一性，不可调用多个</strong></p></li></ul><h4 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4 通配符选择器"></a>2.4 通配符选择器</h4><ul><li><p>用<code>*</code>定义，选取页面中所有的元素（标签）</p></li><li><p>语法：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>注：通配符选择器不需要调用，自动给全部元素修改，仅特殊情况下使用</strong></p></li></ul><h3 id="三、CSS字体属性"><a href="#三、CSS字体属性" class="headerlink" title="三、CSS字体属性"></a>三、CSS字体属性</h3><ul><li>用于定义<strong>字体系列</strong>、<strong>大小</strong>、<strong>粗细</strong>和<strong>文字样式</strong>（如加粗、斜体等）</li></ul><h4 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h4><ul><li>用<code>font-family</code>属性定义字体系列<ul><li><code>p { font-family: "Microsoft YaHei";}</code></li></ul></li><li>条件允许下才能使用特殊字体，尽量使用系统默认的字体。</li><li>各种字体之间用英文逗号<code>,</code>隔开。<ul><li><code>p { font-family: Courier, monospace;}</code></li></ul></li><li>一般情况下，若有空格隔开的多字节字体，用引号包裹<ul><li><code>p { font-family: "Microsoft YaHei"}</code></li></ul></li><li>定义多个字体系列时，计算机优先选择前面的，从前向后</li><li>常见的字体：<ul><li><code>"Microsoft YaHei"</code>：微软雅黑，计算机默认</li><li><code>tahoma</code></li><li><code>arial</code></li><li><code>"Hiragino SansGb"</code>：苹果系统中比较好看的字体</li></ul></li></ul><h4 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h4><ul><li>用<code>font-size</code>设置字体的大小<ul><li><code>p { font-size: 16px;}</code></li></ul></li><li><code>px</code>（像素）是网页最常用的单位</li><li>谷歌浏览器默认字体大小为<code>16px</code></li><li>不同的浏览器默认字体大小可能不同，实际开发中尽量给一个固定的大小</li><li>可以在<code>body</code>给整个页面指定字体大小</li></ul><h4 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h4><ul><li>使用<code>font-weight</code>设置字体的粗细</li><li>属性值：<ul><li><code>{font-weight = 100;}</code>~`{font-weight = 900;}`（<strong>不跟单位</strong>）</li><li><code>normal</code>：不加粗，等于数值<code>400</code></li><li><code>bold</code>：加粗，等于数值<code>700</code></li></ul></li></ul><h4 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h4><ul><li>用<code>font-style</code>设置文字的样式</li><li>常用属性值：<ul><li><code>normal</code>：正常</li><li><code>italic</code>：斜体</li></ul></li></ul><h4 id="3-5-字体属性的复合写法"><a href="#3-5-字体属性的复合写法" class="headerlink" title="3.5 字体属性的复合写法"></a>3.5 字体属性的复合写法</h4><ul><li>简写形式，更节省代码</li><li>写法：<ul><li><code>body { font: font-style font-weight font-size font-family;}</code></li><li>顺序不可打乱，否则无法使用</li><li>不需要的属性可以省略，但是简写形式必须保留<code>font-size</code>和<code>font-family</code>这两个属性</li><li>示例：<code>body { font: italic 700 16px "Microsoft YaHei";}</code></li></ul></li></ul><h3 id="四、CSS文本样式"><a href="#四、CSS文本样式" class="headerlink" title="四、CSS文本样式"></a>四、CSS文本样式</h3><ul><li><p>可定义文本的外观，如<strong>颜色</strong>、<strong>对齐方式</strong>、<strong>装饰文本</strong>、<strong>文本缩进</strong>等</p></li><li><p>文本颜色：</p><ul><li><code>div { color: black;}</code></li><li>属性值表示方法：<ol><li>预设颜色，如<code>red</code>、<code>blue</code>等</li><li><strong>十六进制表示法，如<code>#ff0000</code>、<code>#1296db</code></strong></li><li>RBG制，如<code>rgb(255, 0, 0)</code>或<code>rgb(100%, 0% ,0%)</code></li></ol></li></ul></li></ul><ul><li>文本对齐方式：<ul><li><code>text-align</code>用于设置文本内容的<strong>水平对齐</strong></li><li><code>div { text-align: center;}</code></li><li>常用属性值：<ul><li><code>left</code>：左对齐（默认）</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中对齐</li></ul></li></ul></li></ul><ul><li>装饰文本：<ul><li><code>text-decoration</code>用于添加装饰，可以给文本设置下划线、删除线等</li><li><code>div { text-decoration: underline;}</code></li><li>常用属性值：<ul><li><code>none</code>：默认无装饰</li><li><code>underline</code>：下划线</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：删除线</li></ul></li></ul></li></ul><ul><li>文本缩进：<ul><li><code>test-indent</code>用于给文本添加首行缩进，通常为<strong>段落首行</strong></li><li><code>p { text-indent: 10px;}</code></li><li>属性值表示方法：<ol><li><code>10px</code>：精确单位（像素）</li><li><code>2em</code>：em表示法，<code>1em</code>表示当前元素的一个文字大小，根据字体大小改变（常用）</li></ol></li></ul></li></ul><ul><li>行间距：<ul><li><code>line-height</code>用于设置行间距，即<strong>行高</strong></li><li><code>p { line-height: 20px}</code></li><li>属性值表示规范：<ul><li>最低为文字大小的像素，低于文字大小则没有任何变化。</li><li>高于文字大小的像素，会上下均分。</li></ul></li></ul></li></ul><blockquote><p><strong>小技巧：让单行文字垂直居中的方法</strong></p><p>文字的行高 = 边框的高度</p><p>height = 40px;</p><p>line-height = 40px;</p></blockquote><h3 id="五、CSS的引入方式："><a href="#五、CSS的引入方式：" class="headerlink" title="五、CSS的引入方式："></a>五、CSS的引入方式：</h3><ul><li>主要分为三种方式：<ul><li>行内样式表（行内式、内联式）</li><li>内部样式表（内部式、嵌入式）</li><li>外部样式表（外部式）</li></ul></li></ul><h4 id="5-1-行内样式表"><a href="#5-1-行内样式表" class="headerlink" title="5.1 行内样式表"></a>5.1 行内样式表</h4><ul><li>在元素标签内部的<code>style</code>属性中设定CSS样式，便于简单修改</li><li>示例：<code>&lt;div style="color:red; font-size:16px;"&gt; 内容 &lt;/div&gt;</code></li><li><code>style</code>本身就是标签的一个属性</li><li>在双引号中间使用，写法符合<code>CSS规范</code></li><li>仅控制当前标签的样式</li><li>由于书写繁琐，且未实现结构与样式相分离，<strong>不推荐</strong>大量使用，只对某一元素做简单修改时使用</li></ul><h4 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h4><ul><li>写到HTML页面内部，将CSS代码抽取放入<code>&lt;style&gt;&lt;/style&gt;</code>标签中</li><li><code>&lt;style&gt;</code>标签理论上可以放在文档的任何位置，但一般都会放在文档的<code>&lt;head&gt;</code>或者<code>&lt;body&gt;</code>中</li><li>通过此方法，可以方便控制<strong>整个页面</strong>的元素样式</li><li>优点：代码结构清晰，实现结构与样式部分分离</li><li>缺点：并没有完全分离，且整个HTML页面可能会因此而写的很长</li></ul><h4 id="5-3-外部样式表（推荐）"><a href="#5-3-外部样式表（推荐）" class="headerlink" title="5.3 外部样式表（推荐）"></a>5.3 外部样式表（推荐）</h4><ul><li>实际开发中都是使用外部样式表，适用于样式较多时，单独编写<code>.css</code>文件，之后引入到HTML中使用</li><li>步骤：<ol><li>新建一个<code>.css</code>为后缀的样式文件，将CSS样式代码写入</li><li>在HTML页面中，使用<code>&lt;link&gt;</code>标签引入该CSS文件<ul><li><code>&lt;link rel="stylesheet" href=".css文件的路径"&gt;</code></li></ul></li></ol></li></ul><h3 id="六、CSS复合选择器"><a href="#六、CSS复合选择器" class="headerlink" title="六、CSS复合选择器"></a>六、CSS复合选择器</h3><ul><li>建立在基础选择器之上，对基础选择器进行组合形成</li><li>特点：<ul><li>可以更准确、更高效的选择目标元素（标签）</li><li>有两个或多个基础选择器，通过不同方式组合而成</li><li>常用包括：后代选择器、子选择器、并集选择器等</li></ul></li></ul><h4 id="6-1-后代选择器（重要）"><a href="#6-1-后代选择器（重要）" class="headerlink" title="6.1 后代选择器（重要）"></a>6.1 后代选择器（重要）</h4><ul><li>又称包含选择器，可以选择父元素里的子元素</li><li>语法：<ul><li><code>元素1 元素2 {样式声明;}</code></li><li>会选择<code>元素1</code>里的所有<code>元素2</code></li><li><code>元素1</code>和<code>元素2</code>之间用空格隔开</li><li><code>元素1</code>为父级元素，<code>元素2</code>为子级元素，最终选择的为<code>元素2</code></li><li><code>元素2</code>可以为儿子，也可以为孙子，只要是<code>元素1</code>的后代即可</li><li><code>元素1</code>和<code>元素2</code>可以是<strong>任意的基础选择器</strong></li></ul></li></ul><h4 id="6-2-子选择器"><a href="#6-2-子选择器" class="headerlink" title="6.2 子选择器"></a>6.2 子选择器</h4><ul><li>只能选择作为某个元素的最近一级的子元素（<strong>选亲儿子</strong>）</li><li>语法：<ul><li><code>元素1&gt;元素2 {样式声明;}</code></li><li>会选择<code>元素1</code>里的所有直接后代子<code>元素2</code></li><li>用大于号<code>&gt;</code>隔开</li><li><code>元素2</code>必须是亲儿子，否则无法选择</li></ul></li></ul><h4 id="6-3-并集选择器"><a href="#6-3-并集选择器" class="headerlink" title="6.3 并集选择器"></a>6.3 并集选择器</h4><ul><li><p>可以选择多组标签，为他们同时定义相同的样式（集体声明）</p></li><li><p>语法：</p><ul><li><p><code>元素1, 元素2 {集体声明；}</code></p></li><li><p>会选择<code>元素1</code>和<code>元素2</code></p></li><li><p>两个元素用英文逗号<code>,</code>隔开</p></li><li><p>语法规范：并集选择器竖着写</p><ul><li><p>示例：</p></li><li><pre class=" language-css"><code class="language-css"><span class="token selector">元素1,元素2,元素3 </span><span class="token punctuation">{</span>    集体声明<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li></ul><h3 id="七、伪类选择器"><a href="#七、伪类选择器" class="headerlink" title="七、伪类选择器"></a>七、伪类选择器</h3><ul><li>向某类选择器添加特殊效果。用冒号<code>:</code>表示</li><li>种类：链接伪类选择器、结构伪类选择器、表单伪类选择器等</li></ul><h4 id="7-1-链接伪类选择器"><a href="#7-1-链接伪类选择器" class="headerlink" title="7.1 链接伪类选择器"></a>7.1 链接伪类选择器</h4><ul><li><code>a: link</code>：选择所有未被访问的链接</li><li><code>a: visited</code>：选择所有已访问过的链接</li><li><code>a: hover</code>：选择鼠标指针位于的链接</li><li><code>a: active</code>：选择活动链接（鼠标按下未弹起）</li><li><strong>注意</strong>：<ul><li>为了确保生效，在使用多个时，请按照<code>link</code>、<code>visited</code>、<code>hover</code>、<code>active</code>（<code>LVHA</code>）的顺序声明</li><li>因为a链接有默认的样式，所以需要单独指定一个</li></ul></li></ul><h4 id="7-2-focus伪类选择器"><a href="#7-2-focus伪类选择器" class="headerlink" title="7.2 :focus伪类选择器"></a>7.2 <code>:focus</code>伪类选择器</h4><ul><li>用于选取获得焦点的表单元素</li><li>一般情况<code>&lt;input&gt;</code>类表单元素才能获取</li><li>语法：<ul><li><code>input:focus { background-color: yellow;}</code></li></ul></li></ul><h3 id="八、CSS元素显示模式"><a href="#八、CSS元素显示模式" class="headerlink" title="八、CSS元素显示模式"></a>八、CSS元素显示模式</h3><ul><li>元素以什么方式进行展示（例如默认状态下，一行只能放置一个<code>&lt;div&gt;</code>，但可以同时存在很多个<code>&lt;span&gt;</code>）</li><li>HTML一般分为块级元素和行内元素</li><li>块级元素：<ul><li><code>&lt;h1&gt;~&lt;h6&gt;、&lt;div&gt;、&lt;p&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等</li><li>特点：<ol><li>独占一行</li><li>高度宽度外边距以及内边距<strong>可控制</strong></li><li>宽度默认时容器(父级元素)的100%</li><li>是一个容器盒子，可以放行内元素或者块元素</li><li>注意：<ul><li>文字类元素不能使用块元素</li><li><code>&lt;div&gt;</code>不能放入<code>&lt;p&gt;</code>中，<code>&lt;p&gt;</code>内部不可以存放块元素</li><li>同理<code>&lt;h1&gt;~&lt;h6&gt;</code>内部也不能</li></ul></li></ol></li></ul></li><li>行内元素<ul><li><code>&lt;a&gt;、&lt;strong&gt;、&lt;u&gt;、&lt;del&gt;、&lt;span&gt;、&lt;ins&gt;、&lt;b&gt;、&lt;i&gt;</code>等</li><li>特点：<ol><li>相邻的会显示在一行上</li><li>高、宽直接设置是无效的</li><li>默认宽度为内容宽度</li><li>行内元素只能存放<strong>文本</strong>和其他<strong>行内元素</strong></li><li>注意：<ul><li>链接里不能放链接</li><li><code>&lt;a&gt;</code>里可以放块元素，但是给<code>&lt;a&gt;</code>转换一下块级模式更安全</li></ul></li></ol></li></ul></li><li>特殊情况：行内块元素<ul><li><code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>等</li><li>同时具有块级元素和行内元素的特点</li><li>特点：<ol><li>相邻行内块元素会展示在同一行上，但它们之间会有一点空白缝隙，一行可以显示多个（行内元素特点）</li><li>默认宽度就是她本身内容的宽度（行内元素特点）</li><li>高度、宽度、内外边距都可以直接修改（块级元素特点）</li></ol></li></ul></li><li>★元素显示模式的转换<ul><li>当一个模式的元素需要另一个模式的特性时，可以进行模式转换</li><li>转换为块元素：<code>display: block;</code></li><li>转换为行内元素：<code>display: inline;</code></li><li>转换为行内块元素：<code>display: inline-block;</code></li></ul></li></ul><h3 id="九、CSS背景样式"><a href="#九、CSS背景样式" class="headerlink" title="九、CSS背景样式"></a>九、CSS背景样式</h3><ul><li>可以给页面元素添加背景样式</li><li>可以设置背景颜色、背景图片、背景图片平铺、背景图片位置等属性</li></ul><h4 id="9-1-背景颜色"><a href="#9-1-背景颜色" class="headerlink" title="9.1 背景颜色"></a>9.1 背景颜色</h4><ul><li><code>background-color: red;</code></li><li>属性值：<ul><li><code>transparent</code>：透明（默认）</li><li>各种颜色</li></ul></li></ul><blockquote><p><strong>背景色半透明：</strong></p><ul><li><code>background: rgba(255, 0, 0, 0.3);</code></li><li>最后一个取值介于<code>0~1</code>之间，表示透明度（<code>alpha</code>）</li><li>习惯可以将<code>0.3</code>的<code>0</code>去掉，写成<code>.3</code>也可以</li><li>只让盒子的背景色半透明，盒子内容不受影响</li><li>为<code>CSS3</code>新增，<code>IE9+</code>版本才能使用</li></ul></blockquote><h4 id="9-2-背景图片"><a href="#9-2-背景图片" class="headerlink" title="9.2 背景图片"></a>9.2 背景图片</h4><ul><li><code>background-image: none;</code></li><li>非常便于控制位置</li><li>属性值：<ul><li><code>none</code>：默认无背景图片</li><li><code>"url"</code>：图片地址</li></ul></li></ul><h4 id="9-3-背景平铺"><a href="#9-3-背景平铺" class="headerlink" title="9.3 背景平铺"></a>9.3 背景平铺</h4><ul><li><code>background-repeat: repeat;</code></li><li>背景色在图片下方</li><li>属性值：<ul><li><code>repeat</code>：平铺（默认）</li><li><code>no-repeat</code>：不平铺</li><li><code>repeat-x</code>：横向平铺</li><li><code>repeat-y</code>：纵向平铺</li></ul></li></ul><h4 id="9-4-背景图片位置"><a href="#9-4-背景图片位置" class="headerlink" title="9.4 背景图片位置"></a>9.4 背景图片位置</h4><ul><li><p><code>background-position: x y;</code></p></li><li><p>用于改变背景图片的相对位置</p></li><li><p>属性值：</p><ul><li>方位名词：<code>top/center/bottom/left/right</code>等</li><li>精确单位：百分数/浮点数和单位组成</li></ul></li><li><p><strong>注意：</strong></p><ol><li>参数时方位名词<ul><li>若指定的两个值都是方位名词，则两个值前后顺序无要求</li><li>若只指定了一个方位名词，另一个省略，则另一个默认为center</li></ul></li><li>参数是精确单位<ul><li>第一个为x坐标，第二个为y坐标，顺序严格要求</li><li>若只设定了一个数值，那么该数值一定是x坐标，y坐标默认居中</li></ul></li><li>参数是混合单位<ul><li>若两个值一个是方位名词，一个是精确坐标，前一个为x，后一个为y</li></ul></li></ol></li></ul><h4 id="9-5-背景图像固定（背景附着）"><a href="#9-5-背景图像固定（背景附着）" class="headerlink" title="9.5 背景图像固定（背景附着）"></a>9.5 背景图像固定（背景附着）</h4><ul><li><code>background-attachment: scroll;</code></li><li>设置背景图像是否固定或者随着页面其他内容滚动（可用于做视差滚动效果）</li><li>常用属性值：<ul><li><code>scroll</code>：滚动（默认）</li><li><code>fixed</code>：固定</li></ul></li></ul><h4 id="9-6-背景设置的复合写法："><a href="#9-6-背景设置的复合写法：" class="headerlink" title="9.6 背景设置的复合写法："></a>9.6 背景设置的复合写法：</h4><ul><li><code>background: background-color background-image background-repeat background-attachment background-position;</code></li><li>以上为约定俗成的顺序，没有硬性规定</li><li>示例：<code>background: red url(xx/xx/xx.img) no-repeat fixed 0 0;</code></li></ul><h3 id="十、CSS三大特性"><a href="#十、CSS三大特性" class="headerlink" title="十、CSS三大特性"></a>十、CSS三大特性</h3><ol><li><p>层叠性：各同一选择器设置相同属性样式，则后一个样式会覆盖另一个冲突的样式。（主要解决样式冲突问题）</p><ul><li>样式冲突，遵循就近原则，那个样式距离结构近就做哪个</li><li>样式不冲突则不会层叠</li></ul></li><li><p>继承性：子标签会继承父标签的某些样式，如文本颜色和字号</p><ul><li>恰当使用继承性可以简化代码</li><li>可继承的样式：<code>text-</code>、<code>font-</code>、<code>line-</code>这些开头的和<code>color</code>元素</li><li>特殊：行高的解成，若行高写的不是具体的像素而实倍数，则继承倍数，<ul><li>行高 = 倍数 × 当前字体像素</li></ul></li></ul></li><li><p>优先级：同一个元素指定多个选择器，就产生优先级</p><ul><li>选择器相同，执行层叠性（都在大的里）</li><li>选择器不同，则根据选择器权重执行</li><li>权重由4种数字组成，但不会有进位</li><li>判断等级为从左到右，永远大于！</li><li><strong>继承</strong>的权重最低，无论父级权重多高，继承永远为0</li></ul></li><li><p>选择器权重表：</p><blockquote><p>↓ 继承或*              (0，0，0，0)</p><p>↓ 标签选择器        (0，0，0，1)</p><p>↓ 类/伪类选择器   (0，0，1，0)</p><p>↓ id选择器            (0，1，0，0)</p><p>↓ 行内样式style     (1，0，0，0)</p><p>↓ <code>!improtant</code>            无限大（写在CSS的属性值里）</p><p>权重优先级的叠加问题：若为复合选择器，则有权重叠加，需要计算(会叠加，但是永不进位)</p><p>示例：</p><p><code>div ul li {}</code> -&gt; (0,0,0,3)</p><p><code>.nav ul li {}</code> -&gt; (0,0,1,2)</p><p><code>a:hover {}</code> -&gt; (0,0,1,1)</p><p><code>.nav a {}</code> -&gt; (0,0,1,1) </p></blockquote></li></ol><h3 id="十一、盒子模型"><a href="#十一、盒子模型" class="headerlink" title="十一、盒子模型"></a>十一、盒子模型</h3><ul><li>看透网页布局的本质：利用CSS摆盒子<ul><li>先准备好相关的网页元素，基本都是Box</li><li>利用CSS设置好样式，摆放到相应位置</li><li>往盒子里装内容</li></ul></li><li>盒子模型（Box-Model）的组成：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、<strong>实际内容</strong></li></ul><h4 id="11-1-Border"><a href="#11-1-Border" class="headerlink" title="11.1 Border"></a>11.1 Border</h4><ul><li>可以设置元素边框的<strong>宽度（粗细）</strong>、<strong>样式</strong>和<strong>颜色</strong></li><li>语法：<code>border: border-width border-style border-color</code></li><li><code>border-width</code>：可设置粗细，单位为<code>px</code></li><li><code>border-style</code>：设置样式<ul><li>属性值：<ul><li><code>none</code>：无边框（默认）</li><li><code>solid</code>：实线边框</li><li><code>dashed</code>：虚线边框</li><li><code>hidden</code>：隐藏边框（IE不可用）</li><li><code>double</code>：双实线边框</li><li><code>dotted</code>：点线边框</li></ul></li></ul></li><li><code>border-color</code>：设置颜色</li><li>border的复合写法（简写）：<code>border: 1px solid red;</code> 没有顺序要求</li><li>border的分开写法：<code>border-top、border-bottom、border-left、border-right</code></li><li><strong>注意：边框会影响盒子的实际大小</strong><ul><li>内容为200*200，边框为10px</li><li>则盒子实际大小为220*220</li><li>所以开发中测量时不测边框，若测量则适当减去</li></ul></li></ul><blockquote><p>表格细线边框：border-collapse控制相邻单元格边框</p><p>语法：<code>border-collapse: collapse; //边框合并</code></p></blockquote><h4 id="11-2-Padding"><a href="#11-2-Padding" class="headerlink" title="11.2 Padding"></a>11.2 Padding</h4><ul><li>设置内边距，即内容与边框的距离（上下左右同样适用）</li><li>语法：<code>padding-top/bottom/left/right = 5px;</code></li><li>padding的复合写法（简写）：<ol><li><code>padding: 5px;</code> 一个值，代表上下左右都5px</li><li><code>padding: 5px 10px;</code>两个值，代表上下5px， 左右10px</li><li><code>padding: 5px 10px 15px;</code>三个值，代表上5px， 左右10px， 下15px</li><li><code>padding: 5px 10px 15px 20px;</code> 四个值，代表上5px， 右10px，下15px，左20px</li></ol></li><li><strong>注意：padding可以实现内容与边框之间有内边距</strong><ul><li>但同时<code>padding</code>也会影响盒子大小（会撑大盒子），所以实际开发中也要做适当减小内容大小</li><li>如果盒子本身没有指定<code>width/height</code>属性，此时<code>padding</code>就不会撑开盒子</li><li>当子级标签没有指定<code>width/height</code>，则添加<code>padding</code>时，不会超过父级标签的宽度</li></ul></li></ul><h4 id="11-3-Margin"><a href="#11-3-Margin" class="headerlink" title="11.3 Margin"></a>11.3 Margin</h4><ul><li>设置外边距，即控制盒子与盒子之间的距离（上下左右同样适用）</li><li>语法：<code>margin-top/right/bottom/left: 30px;</code></li></ul><blockquote><p>典型应用：可以使块级盒子水平居中对齐</p><p>条件：1.盒子必须制定了宽度（<code>width</code>）</p><p>​            2.盒子左右边距外边距设置为<code>auto</code>即可</p><p><strong>注意：以上方法是让块级元素水平居中</strong></p><p>​            <strong>若要行内元素或者行内块元素水平居中，给其父元素添加<code>text-align:center</code>即可</strong></p></blockquote><blockquote><p><strong>嵌套块元素垂直外边距的塌陷问题</strong>：对于两个嵌套关系的块级元素，父元素上有外边距同时子元素上也有外边距，此时父元素会塌陷较大的边距值。（子元素上的外边距大于父元素的，则父元素会产生子元素相同外边距）</p><p>解决方案：1.为父元素定义上边框</p><p>​                    2.为父元素定义上内边距</p><p>​                    3.为父元素添加<code>overflow: hidden;</code>（<strong>不会让盒子变大</strong>）</p></blockquote><blockquote><p><strong>清除内外边距：</strong>网页元素很多都有默认的内外边距，不同浏览器的默认值也不同，因此在布局以前，首先要清除一下</p><p>常用方法：</p><ul><li>{</li></ul><p>​    padding: 0;  /* 清除内边距 */</p><p>​    margin: 0;  /* 清除外边距 */</p><p>}</p><p><strong>这也是我们CSS文件的第一条代码（行内元素尽量只设置左右的内边距！）</strong></p></blockquote><h4 id="11-4-（重点）圆角边框"><a href="#11-4-（重点）圆角边框" class="headerlink" title="11.4 （重点）圆角边框"></a>11.4 （重点）圆角边框</h4><ul><li><code>border-radius: length;</code></li><li>属性值：<ul><li>像素</li><li>百分比</li></ul></li><li>radius半径原理：<ul><li>以length为半径的圆与盒子四个角的重合部分形成圆角边框，像素越大，弧角越大</li></ul></li></ul><blockquote><p><strong>Tips：</strong></p><ol><li>参数值可以为数值或百分比</li><li>如果是正方形，想要个圆，数值修改为hight的一半，或写50%</li><li>如果是个举行，设置为高度的一半</li><li>该数值属性为简写属性，可以跟四个数值，以此为左上、右上、右下、左下顺序</li></ol></blockquote><h4 id="11-5-（重点）盒子阴影"><a href="#11-5-（重点）盒子阴影" class="headerlink" title="11.5 （重点）盒子阴影"></a>11.5 （重点）盒子阴影</h4><ul><li><code>box-shadow: h-shadow v-shadow blur spread color inset;</code></li><li><code>h-shadow</code>：必须写，水平阴影位置，允许负值</li><li><code>v-shadow</code>：必须写，垂直阴影位置，允许负值</li><li><code>blur</code>：可选，模糊距离</li><li><code>spread</code>：可选，阴影尺寸</li><li><code>color</code>：可选，阴影颜色</li><li><code>inset</code>：可选，将外部阴影（<code>outset</code>）改为内部阴影</li><li>其中：阴影默认时外阴影（<code>outset</code>），可以改成内阴影（<code>inset</code>），但绝对不可以写<code>outset</code>，否则阴影失效，阴影不占用空间，不会排挤其他盒子</li></ul><h4 id="11-6-文字阴影"><a href="#11-6-文字阴影" class="headerlink" title="11.6 文字阴影"></a>11.6 文字阴影</h4><ul><li><code>text-shadow: h-shadow v-shadow blur color;</code></li><li>以上属性类似于<code>box-shadow</code></li></ul><h3 id="十二、浮动Float"><a href="#十二、浮动Float" class="headerlink" title="十二、浮动Float"></a>十二、浮动Float</h3><ul><li><p>一个完整的PC网页的布局方式：标准流、浮动、定位</p></li><li><p>结：有许多布局效果，标准流无法实现，可以用浮动实现，浮动可以改变元素标签的默认排列方式。</p></li><li><blockquote><p>so：网页布局第一准则：多个块级元素纵向排列找标准流，横向排列找浮动</p></blockquote></li><li><p>浮动float用于创建浮动框，将其移动到一边，直到左边缘或者右边缘以及包含块或另一个浮动框的边缘。</p><ul><li>语法：<code>选择器 {float: 属性值;}</code></li><li>属性值：<ul><li>none：不动</li><li>left：左浮</li><li>right：右浮</li></ul></li></ul></li><li><p>浮动的特性：</p><ul><li>浮动元素会脱离标准流（脱标）</li><li>浮动元素会在一行内显示并元素顶部对齐（装不下另起一行）</li><li>浮动元素会具有行内块元素的特性</li><li>不再保留原先的位置。（会起飞，下面的位置会有新元素）</li></ul></li><li><p>浮动元素与标准流父级元素搭配使用：</p><ul><li>为了约束浮动元素的位置，采用以下策略：</li><li>先用标准流的父元素排列上下位置，之后用内部的子元素采取浮动排列左右位置，符合网页布局第一准则。</li></ul></li><li><p>浮动布局的注意点：</p><ul><li>浮动和标准流的父盒子搭配（用标准流的父元素排列上下位置，之后用内部的子元素采取浮动排列左右位置）</li><li>一个盒子里面有多个盒子，若其中一个浮动了，其他兄弟也应当浮动，以免发生问题（浮动的盒子只会影响后面的标准流，不影响前面的标准流盒子）</li></ul></li></ul><h3 id="十三、清除浮动"><a href="#十三、清除浮动" class="headerlink" title="十三、清除浮动"></a>十三、清除浮动</h3><blockquote><p><strong>为什么要清楚浮动？</strong></p><p>由于父级盒子很多情况下不方便给高度，但子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子的位置。</p><p><strong>清除浮动的本质！</strong></p><ul><li>清除浮动元素造成的影响</li><li>清除浮动后，父级就会根据浮动的子盒子检测高度自动更改高度。</li></ul></blockquote><ul><li>清除浮动： <code>选择器 {clear: 属性值};</code></li><li>属性值：<ul><li><code>left</code>：清除左侧浮动的影响</li><li><code>right</code>：清除右侧浮动的影响</li><li><code>both</code>：同时清除两侧的浮动</li></ul></li></ul><blockquote><p>实际开发中几乎只用<code>{clear: both;}</code></p><p>tips：清除浮动的策略时闭合浮动（关门让你浮动，不允许到外面去）</p></blockquote><ul><li><p>清除浮动的方法：</p><ul><li><p>额外标签法（隔墙法）：在浮动的子元素后面添加一个新标签，并给该标签设置<code>{clear: both; }</code></p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="tt">内容&lt;/div>&lt;style><span class="token class">.tt</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>或者<code>&lt;div style="clear: both;"&gt;内容&lt;/div&gt;</code></p></li><li><p><strong>注意：添加的标签元素必须是块元素</strong></p></li></ul></li><li><p>父元素添加<code>overflow</code>属性</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tt"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>tt <span class="token punctuation">{</span>    overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p><strong>注意：无法显示溢出部分</strong></p></li></ul></li><li><p>父元素添加<code>:after</code>伪元素（<strong>结构更简单，推荐使用</strong>）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="clearfix">    &lt;div>内容&lt;/div>&lt;/div>&lt;style><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>给需要清除浮动的元素添加<code>.clearfix</code>类</p></li></ul></li><li><p>给父级元素添加双伪元素（<strong>推荐</strong>）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="clearfix">    &lt;div>内容&lt;/div>&lt;/div>&lt;style><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li></ul></li></ul></li><li><p>清除浮动的条件：</p><ul><li>父级没高度</li><li>子盒子浮动了</li><li>影响后面布局了</li></ul></li></ul><blockquote><p><strong>CSS开发小知识：</strong></p><ul><li>CSS属性的书写顺序<ul><li>建议遵循以下顺序（自上而下，不强制规定）：<ul><li>布局定位属性：<code>desplay/position/float/clear/visibility/overflow等</code></li><li>自身属性：<code>width/height/margin/padding/border/background等</code></li><li>文本属性：<code>color/font/text-decoration/text-align/vertical-align等</code></li><li>其他属性：<code>content/cursor/border-radius/box-shadow等</code></li></ul></li></ul></li><li>页面布局整体思路<ol><li>确定页面的版心（可视区），可测量得知（中间一大块的宽度）。</li><li>分析页面中的行模块，以及每个行模块中的列模块（第一准则）。</li><li>一行中的列模块经常用浮动布局，确定列的大小和位置（第二位置）。</li><li>制作HTML结构，现有结构后有样式，结构最重要。</li><li>先理清布局结构，在写代码（经验）。</li></ol></li><li>制作导航栏注意：<ul><li>实际开发中不会直接用<code>&lt;a&gt;</code>标签，而是用<code>li标签包裹a标签</code>的形式(<code>&lt;li&gt;&lt;a href="#"&gt;&lt;/li&gt;</code>)</li><li><code>li+a</code>语义更清晰</li><li><strong>直接用<code>&lt;a&gt;</code>，易被搜索引擎辨别为有堆砌关键字嫌疑，有降权风险，从而影响网页排名。</strong></li></ul></li></ul></blockquote><h3 id="十四、CSS定位"><a href="#十四、CSS定位" class="headerlink" title="十四、CSS定位"></a>十四、CSS定位</h3><ul><li><p>可以让盒子自由的在某个盒子内移动或固定在屏幕上，并且可以压住其他盒子。（将盒子定在某一位置，即摆放盒子，按定位的方式移动盒子）</p></li><li><blockquote><p>定位 = 定位模式 + 边偏移</p></blockquote></li></ul><h4 id="14-1-定位模式"><a href="#14-1-定位模式" class="headerlink" title="14.1 定位模式"></a>14.1 定位模式</h4><ul><li>通过CSS的<code>position</code>属性设置</li><li>属性值：<ul><li><code>static</code>：静态定位</li><li><code>relative</code>：相对定位</li><li><code>absolute</code>：绝对定位</li><li><code>fixed</code>：固定定位</li></ul></li></ul><h5 id="14-1-1-静态定位static"><a href="#14-1-1-静态定位static" class="headerlink" title="14.1.1 静态定位static"></a>14.1.1 静态定位static</h5><ul><li>语法：<code>选择器 {position: static;}</code></li><li>默认定位，即无定位</li><li>static按照标准流特性摆放盒子，没有偏移，很少使用</li></ul><h5 id="14-1-2-相对定位relative"><a href="#14-1-2-相对定位relative" class="headerlink" title="14.1.2 相对定位relative"></a>14.1.2 相对定位relative</h5><ul><li>语法：<code>选择器 {position: relative;}</code></li><li>相对于原位置来移动</li><li>移动时参照自己原来的位置，原来标准流位置继续占有，不脱标</li><li>典型应用：给绝对定位当”爹“</li></ul><h5 id="14-1-3-绝对定位absolute"><a href="#14-1-3-绝对定位absolute" class="headerlink" title="14.1.3 绝对定位absolute"></a>14.1.3 绝对定位absolute</h5><ul><li>语法：<code>选择器 {position: absolute;}</code></li><li>相对于最近的有定位的祖先元素移动位置</li><li>如果没有祖先元素，或者祖先元素没有定位，则以浏览器为准定位</li><li>若祖先元素有定位（相对、绝对、固定），则以最近一级有定位祖先元素为准定位</li><li>绝对定位不在占有原先位置（脱标）</li></ul><blockquote><p>布局口诀：<strong>子绝父相</strong>，即子元素用<code>absolute</code>，父元素用<code>relative</code>（大多数情况适用）</p></blockquote><h5 id="14-1-4-固定定位fixed"><a href="#14-1-4-固定定位fixed" class="headerlink" title="14.1.4 固定定位fixed"></a>14.1.4 固定定位fixed</h5><ul><li>语法：<code>选择器 {position: fixed;}</code></li><li>固定于浏览器可视区的某个位置</li><li>以浏览器可视窗口为参照点移动元素（与父元素无关）</li><li>脱标，不占有原来的标准流位置</li></ul><blockquote><p>Tips：让元素固定定位于版心右侧</p><ul><li>小算法：<ol><li>让盒子（固定定位）<code>left: 50%</code>（走到浏览器版心的一半）</li><li>让该盒子再走<code>margin-left: 版心宽度的一半;</code>即可</li></ol></li></ul></blockquote><h5 id="14-1-5-粘性定位sticky"><a href="#14-1-5-粘性定位sticky" class="headerlink" title="14.1.5 粘性定位sticky"></a>14.1.5 粘性定位sticky</h5><ul><li><p>语法：<code>选择器 {position: sticky;}</code></p></li><li><p>可以认为是相对定位和固定定位的混合</p></li><li><p>以浏览器可视区域作为参照点移动（fixed特点）</p></li><li><p>占有原先的位置，不脱标（relative特点）</p></li><li><p>必须添加<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>中的一个才会有效</p></li></ul><h4 id="14-2-边偏移"><a href="#14-2-边偏移" class="headerlink" title="14.2 边偏移"></a>14.2 边偏移</h4><ul><li>盒子移动的最终位置，分四个属性：<code>top</code>,<code>right</code>,<code>bottom</code>,<code>right</code></li><li><code>top: 80px; </code>-&gt; 顶端偏移量，元素相对于父元素上边线的距离为<code>80px</code></li><li><code>left: 70px;</code>-&gt; 左侧偏移量，元素相对于父元素左边线的距离<code>70px</code></li><li><code>right: 60px;</code>-&gt; 右侧偏移量，元素相对于父元素右边线的距离<code>60px</code></li><li><code>bottom: 50px;</code>-&gt; 底部偏移量，元素相对于父元素下边线的距离<code>50px</code></li></ul><h4 id="14-3-定位的叠放次序"><a href="#14-3-定位的叠放次序" class="headerlink" title="14.3 定位的叠放次序"></a>14.3 定位的叠放次序</h4><ul><li>使用定位布局时，可能出现盒子重叠与理想状态不一致的现象，可以用<code>z-index</code>属性来解决</li><li>语法： <code>选择器 {z-index: 9;}</code></li><li>属性值：<ul><li>可以为正、负、0、auto</li><li>auto为自动默认，值越大越靠外层。</li><li>值相同时按照盒子的先后顺序，后来居上</li><li><strong>数值不可以带单位！</strong></li></ul></li></ul><blockquote><p><strong>定义的拓展知识</strong></p><ol><li><p>绝对定位absolute盒子水平居中：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>选择器 </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token function">-</span><span class="token punctuation">(</span>盒子宽度的一半<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre></li><li><p>垂直居中同理</p></li></ul></li><li><p>定位的特殊性质：</p><ul><li>行内元素添加<code>absolute</code>或者<code>fixed</code>后，可以设置宽高</li><li>块级元素添加<code>absolute</code>或者<code>fixed</code>后，默认大小为内容大小（不给宽高的前提下）</li></ul></li><li><p>脱标的盒子不会触发外边距塌陷（浮动，绝对定位，相对定位）</p></li><li><p>绝对定位/相对定位脱标与浮动的脱标有所不同：</p><ul><li>定位的脱标：压住盒子和部分文字内容</li><li>浮动的脱标：指挥完全压住盒子，但不会压住盒子的内容（文字环绕）</li></ul></li></ol></blockquote><h3 id="十五、元素的显示与隐藏"><a href="#十五、元素的显示与隐藏" class="headerlink" title="十五、元素的显示与隐藏"></a>十五、元素的显示与隐藏</h3><ul><li>display属性（<strong>应用广泛，重要</strong>）：<ul><li>用于设置一个元素如何显示，也可以将元素进行隐藏</li><li>语法：<code>选择器 {display: none;}</code></li><li>属性值：<ul><li><code>none</code>：隐藏元素，且不占有原位置（脱标）</li><li><code>block</code>：显示元素，将元素转为块级元素</li></ul></li></ul></li><li>visibility：<ul><li>指定一个元素可见还是隐藏</li><li>语法：<code>选择器 {visibility: visible;}</code></li><li>属性值：<ul><li><code>visible</code>：元素可见</li><li><code>hidden</code>：元素隐藏，保留原位置（不脱标）</li></ul></li></ul></li><li>overflow溢出<ul><li>内容溢出元素框时操作设定</li><li>语法：<code>选择器 {overflow: hidden;}</code></li><li>属性值：<ul><li><code>visible</code>：显示</li><li><code>hidden</code>：隐藏</li><li><code>scroll</code>：滚动条显示</li><li><code>auto</code>：自动选择(在<code>visible</code>和<code>scroll</code>中)</li></ul></li><li><strong>注意：有定位的盒子慎用<code>overflow:hidden;</code>因为会将超出的内容全部隐藏</strong></li></ul></li></ul><h3 id="十六、CSS提高部分"><a href="#十六、CSS提高部分" class="headerlink" title="十六、CSS提高部分"></a>十六、CSS提高部分</h3><h4 id="16-1-CSS精灵技术sprites（精灵图、雪碧图）"><a href="#16-1-CSS精灵技术sprites（精灵图、雪碧图）" class="headerlink" title="16.1 CSS精灵技术sprites（精灵图、雪碧图）"></a>16.1 CSS精灵技术sprites（精灵图、雪碧图）</h4><ul><li>优势：有效减少服务器接收和发送请求的次数，提高页面的加载速度</li><li>核心原理：将网页中的一些小的背景图片整合到一张大图中，这样服务器只需要请求一次即可</li><li>Sprites精灵图的使用：<ul><li>主要针对背景图像</li><li>整合的大图城卫精灵图或者雪碧图（雪碧包装上写的英文就是sprites）</li><li>移动背景图位置，可以用<code>background-position</code></li><li>移动的距离就是图片的x和y坐标（<strong>以左上角为远点，x轴向右为正方向，y轴向下为正方向</strong>）</li><li>一般情况下，图片向左/向上都是负值</li><li><strong>图片的大小和位置需要精确测量</strong></li></ul></li></ul><h4 id="16-2-字体图标"><a href="#16-2-字体图标" class="headerlink" title="16.2 字体图标"></a>16.2 字体图标</h4><ul><li><p>显示网页中的一些通用、常用的小图标（展示的是图标，本质是字体）</p></li><li><p>优势：</p><ul><li>轻量级：本质是字体，小，减少服务器请求数据（字体由浏览器自己渲染，不需要向服务器请求）</li><li>灵活性：因为本质是文字，所以可以通过CSS修改颜色、阴影和透明效果等等</li><li>兼容性：几乎支持所有的浏览器</li></ul></li><li><p><strong>注意</strong>：字体图标只对部分小图片有着提升和优化，无法完全取代<strong>精灵技术</strong></p></li><li><p>字体图标的使用：</p><ul><li><p>字体图标是网页中常见的小图标，可以在网上下载</p><ul><li>字体图标下载<ul><li><a href="https://icomoon.io/">icomoon</a></li><li><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li></ul></li></ul></li><li><p>字体图标下载使用流程（<strong>icomoon为例</strong>）：</p><ol><li><p>将解压出的<code>fonts</code>文件夹复制到<code>HTML根目录</code>下（内涵兼容的4种字体，不可乱动）</p></li><li><p>字体声明：在<code>&lt;style&gt;</code>中复制压缩包里的<code>style.css</code>的第一大段代码，即声明（注意路径问题）</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?cjoxil')</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?cjoxil#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.ttf?cjoxil')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.woff?cjoxil')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.svg?cjoxil#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>打开解压出的文件里的demo.html文件，将图片后的”口“小方框复制到要使用的位置（”口“即字体图标）</p></li><li><p>在<code>&lt;style&gt;</code>标签里给引用字体图标的元素指定字体，即第二步中声明代码里的第一条</p><ul><li><code>选择器 {font-family: 'icomoon';}</code></li></ul></li></ol><blockquote><p><strong>字体图标不够用了怎么办？怎么添加新的？</strong></p><ol><li>将旧文件夹中的<code>selected.json</code>文件上传到<code>icomoon主页</code> -&gt; <code>右上角ICOMOONAPP</code> -&gt; <code>左上角Import Icons</code>中去（选Y）</li><li>选择需要增加的字体图标（旧图标仍然存在）</li><li>重新下载下面的压缩包 -&gt; 解压替换原文件夹，并将里面新的fonts文件夹复制到HTML根目录替换即可</li></ol></blockquote></li></ul></li></ul><h4 id="16-3-CSS用户界面样式"><a href="#16-3-CSS用户界面样式" class="headerlink" title="16.3 CSS用户界面样式"></a>16.3 CSS用户界面样式</h4><ul><li>更改用户的鼠标样式</li><li>表单轮廓</li><li>防止表单域拖拽</li></ul><h5 id="16-3-1-鼠标样式"><a href="#16-3-1-鼠标样式" class="headerlink" title="16.3.1 鼠标样式"></a>16.3.1 鼠标样式</h5><ul><li>语法：<code>li {cursor: pointer;}</code></li><li>设置或检索在对象上移动的鼠标指针采用何种光标形状</li><li>属性值：<ul><li><code>default</code>：小白（默认样式）</li><li><code>pointer</code>：小手</li><li><code>move</code>：移动十字架</li><li><code>text</code>：文本框（I）</li><li><code>not-allowed</code>：禁止</li></ul></li></ul><h5 id="16-3-2-轮廓线"><a href="#16-3-2-轮廓线" class="headerlink" title="16.3.2 轮廓线"></a>16.3.2 轮廓线</h5><ul><li>语法：<code>input {outline: none;}</code></li><li>常用属性值：<ul><li><code>none</code>/<code>0</code>：去除轮廓线</li></ul></li></ul><h5 id="16-3-3-表单域防拖拽"><a href="#16-3-3-表单域防拖拽" class="headerlink" title="16.3.3 表单域防拖拽"></a>16.3.3 表单域防拖拽</h5><ul><li>语法：<code>textarea {resize: none;}</code></li></ul><h5 id="16-3-4-vertical-align应用"><a href="#16-3-4-vertical-align应用" class="headerlink" title="16.3.4 vertical-align应用"></a>16.3.4 <code>vertical-align应用</code></h5><ul><li>语法：<code>vertical-align: baseline;</code></li><li>用于设置图片或表单与文字<strong>垂直对齐</strong></li><li>常用属性值：<ul><li><code>baseline</code>：元素放在父元素基线上</li><li><code>top</code>：顶端与行中最高元素顶端对齐</li><li><code>middle</code>：此元素放在父元素中部对齐</li><li><code>bottom</code>：顶端与行中最低元素的顶端对齐</li></ul></li><li><strong>注意：只针对行内元素和行内块元素有效</strong></li></ul><h4 id="16-4-图片底部有空白缝隙解决方法："><a href="#16-4-图片底部有空白缝隙解决方法：" class="headerlink" title="16.4 图片底部有空白缝隙解决方法："></a>16.4 图片底部有空白缝隙解决方法：</h4><ul><li>给图片添加<code>vertical-align: middle/bottom/top;</code>等即可(<strong>推荐方案</strong>)</li><li>把元素转换为块元素：<code>display: block;</code></li></ul><h4 id="16-5-溢出的文字用省略号显示"><a href="#16-5-溢出的文字用省略号显示" class="headerlink" title="16.5 溢出的文字用省略号显示"></a>16.5 溢出的文字用省略号显示</h4><ul><li><p>单行文本溢出省略号显示：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token punctuation">{</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> // 强制一行内显示    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  //超出部分文字隐藏    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  // 隐藏部分省略号代替<span class="token punctuation">}</span></code></pre></li></ul></li><li><p>多行文本溢出省略号显示：</p><ul><li><pre class=" language-css"><code class="language-css"><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> // 溢出部分隐藏    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> // 用省略号代替    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span> // 弹性伸缩盒子模型显示    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> // 限制一个块元素显示的文本行数为<span class="token number">2</span>行    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span> // 检索伸缩盒子子元素的排列方式<span class="token punctuation">}</span></code></pre></li></ul></li><li><p><strong>兼容性：适合webkit浏览器或移动端</strong>（尽量让后端人员去写）</p></li></ul><h3 id="十七、CSS常见的布局技巧"><a href="#十七、CSS常见的布局技巧" class="headerlink" title="十七、CSS常见的布局技巧"></a>十七、CSS常见的布局技巧</h3><ul><li><code>margin</code>的负值运用：<ul><li>运用margin负值消除2倍边框的问题</li><li>运用定位解决边框被压住的问题（相对定位）</li><li>若周围盒子都有定位，可用<code>z-index</code>提层</li></ul></li><li>文字围绕浮动元素：<ul><li>浮动元素不会压住文字，巧妙运动可以实现文字围绕浮动元素的效果，布局更轻松</li></ul></li><li>行内块元素巧用：<ul><li>对父元素添加<code>text-align: center;</code> 可以实现水平居中子元素（先转为行内块元素）</li></ul></li></ul><blockquote><p><strong>~最后的叭叭~</strong></p><ul><li>CSS初始化<ul><li>不同浏览器对有些标签的默认值不同，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，需要对CSS初始化，重设浏览器的样式（也称<code>CSS reset</code>）</li></ul></li><li>Unicode编码字体：<ul><li>把中文名称字体用相应的Unicode编码代替，可以有效避免浏览器解释CSS代码时出现乱码的问题</li><li>黑体：\9ED1\4F53</li><li>宋体：\5B8B\4F53</li><li>微软雅黑：\5FAE\8F6F\96C5\9ED1</li></ul></li></ul></blockquote><p>————————————————————无情的分割线——————————————————————-</p><blockquote><p>EagleH有话说：<br>这篇笔记是在学习CSS时记在笔记本上的，花时间将它整理到了博客上，内容上可能有所欠缺，而且本文以及另一篇HTML的笔记里，是不包含HTML5和CSS3的新增部分，H5C3的学习笔记会单独更新出来~~~~~</p></blockquote><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="2021/02/10/html-xue-xi-bi-ji/"/>
      <url>2021/02/10/html-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：作为一名即将毕业的普通大四学生，面对未来一片迷茫，回想一下大学四年下来，似乎除了享受无边无际的大学生活，随着时间流逝，在最后关头即将毕业才发现自己一无所有。面临毕业即失业的问题，花时间认真思考了一下自己的未来和兴趣，在做毕业设计的过程中，发现自己对所学专业的工作并不是非常喜欢，反而偶然接触到了前端，在学习过程中感觉时间飞快，最终选择了从web前端入手，趁着自己还年轻，还保有学习的热情，以及浓密的头发，开启了一名小白踏足IT的求学之路</p></blockquote><h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-1-什么是计算机语言"><a href="#1-1-什么是计算机语言" class="headerlink" title="1.1 什么是计算机语言"></a>1.1 什么是计算机语言</h4><ul><li>计算机语言是人与计算机进行通讯的语言</li><li>计算机语言分为三大类：<ul><li>机器语言：由“<code>0</code>”和“<code>1</code>”构成的二进制编码，供计算机阅读和识别</li><li>汇编语言：控制计算机的指令，有固定的格式和词汇（英文缩写）</li><li>高级语言：供开发者学习，灵活运用指令控制计算机实现需求的语言（<code>C</code>，<code>C++</code>，<code>JAVA</code>，<code>Python</code>，<code>PHP</code>，<code>JavaScript </code>等）</li></ul></li></ul><h4 id="1-2-什么是Web网页"><a href="#1-2-什么是Web网页" class="headerlink" title="1.2 什么是Web网页"></a>1.2 什么是Web网页</h4><ul><li><p>网页的基本组成：通常由<strong>图片</strong>、<strong>文字</strong>、<strong>音频</strong>等元素构成，常以<code>.html</code>或者<code>.htm</code>文件格式的形式存在</p></li><li><p>HTML：<strong>超文本标记语言</strong>，用于创建网页，可加入多种元素，也可以添加超链接。</p></li><li><p>常用的浏览器：</p><ul><li>IE</li><li>火狐（FireFox）</li><li>谷歌（Chrome）</li><li>Safari</li><li>Opera</li></ul></li></ul><h4 id="1-3-Web标准"><a href="#1-3-Web标准" class="headerlink" title="1.3 Web标准"></a>1.3 Web标准</h4><ul><li>Web标准的三大组成部分：<ul><li><strong>结构</strong>（Structure）：用于对<strong>网页元素</strong>进行整理和分类</li><li><strong>表现</strong>（Presentation）：用于设置网页元素的<strong>版式</strong>、<strong>颜色</strong>、<strong>大小</strong>等外观样式</li><li><strong>行为</strong>（Behavior）：网页模型的<strong>定义</strong>以及<strong>交互</strong>的编写</li></ul></li></ul><h3 id="二、HTML标签"><a href="#二、HTML标签" class="headerlink" title="二、HTML标签"></a>二、HTML标签</h3><h4 id="2-1-书写规范"><a href="#2-1-书写规范" class="headerlink" title="2.1 书写规范"></a>2.1 书写规范</h4><ul><li>所有标签都应当写在 <code>&lt; &gt;</code> 之中，且大部分标签都应当成对出现，成为<strong>双标签</strong>，一些特殊标签单独出现，成为<strong>单标签</strong><br>双标签如：<code>&lt;html&gt;&lt;/html&gt;</code> 、<code>&lt;head&gt;&lt;/head&gt;</code> 等<br>单标签如：<code>&lt;input /&gt;</code>、<code>&lt;br /&gt;</code>等</li></ul><h4 id="2-2-标签关系"><a href="#2-2-标签关系" class="headerlink" title="2.2 标签关系"></a>2.2 标签关系</h4><ul><li><p>包含关系：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>并列关系</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="2-3-基本结构"><a href="#2-3-基本结构" class="headerlink" title="2.3 基本结构"></a>2.3 基本结构</h4><ul><li><code>&lt;html&gt;&lt;/html&gt;</code>HTML标签<br>页面中最大的标签，称为根标签</li><li><code>&lt;head&gt;&lt;/head&gt;</code>文档头部标签<br>注意：在head标签中一定要设置<strong>title</strong>标签</li><li><code>&lt;title&gt;&lt;/title&gt;</code>文档标题标签<br>让页面拥有一个属于自己的标题</li><li><code>&lt;body&gt;&lt;/body&gt;</code>文档主体标签<br>包含文档的所有内容，页面内容都在<strong>body</strong>中</li></ul><h3 id="三、-基本标签"><a href="#三、-基本标签" class="headerlink" title="三、 基本标签"></a>三、 基本标签</h3><h4 id="3-1-标题标签"><a href="#3-1-标题标签" class="headerlink" title="3.1 标题标签"></a>3.1 标题标签</h4><p>HTML提供了六种标签，重要性最强依次下降，都为<strong>双标签</strong></p><ul><li><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="3-2-段落标签-lt-p-gt-lt-p-gt"><a href="#3-2-段落标签-lt-p-gt-lt-p-gt" class="headerlink" title="3.2 段落标签<p></p>"></a>3.2 <strong>段落标签</strong><code>&lt;p&gt;&lt;/p&gt;</code></h4><ul><li><p>将文字分成段落</p></li><li><p>特点：</p><ul><li><p>双标签</p></li><li><p>文本会根据窗口大小自动换行</p></li><li><p>段落之间保有空隙</p></li></ul></li></ul><h4 id="3-3-换行标签-lt-br-gt"><a href="#3-3-换行标签-lt-br-gt" class="headerlink" title="3.3 换行标签<br />"></a>3.3 <strong>换行标签</strong><code>&lt;br /&gt;</code></h4><ul><li>特点：<ul><li>单标签</li><li>只是另起一行，没有间隙</li></ul></li></ul><h4 id="3-4-文本格式化标签"><a href="#3-4-文本格式化标签" class="headerlink" title="3.4 文本格式化标签"></a>3.4 文本格式化标签</h4><p>  为文本设置<strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>等效果</p><ul><li><strong>加粗</strong><ul><li><code>&lt;strong&gt;&lt;/strong&gt;</code>或者<code>&lt;b&gt;&lt;/b&gt;</code></li></ul></li><li><em>倾斜</em><ul><li><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></li></ul></li><li><u>下划线</u><ul><li><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></li></ul></li><li><s>删除线</s><ul><li><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></li></ul></li><li>注意：都推荐使用前者，<strong>语义</strong>突出更强烈</li></ul><h4 id="3-5-盒子标签"><a href="#3-5-盒子标签" class="headerlink" title="3.5 盒子标签"></a>3.5 盒子标签</h4><ul><li><code>&lt;div&gt;&lt;/div&gt;</code><br>类似于大盒子，独占一行，后面无法跟随内容</li><li><code>&lt;span&gt;&lt;/span&gt;</code><br>小盒子，一行可以放置多个</li><li>没有语义，仅用于装内容</li></ul><h4 id="3-6-图像标签"><a href="#3-6-图像标签" class="headerlink" title="3.6 图像标签"></a>3.6 图像标签</h4><ul><li><code>&lt;img src="URL"&gt; </code></li><li><code>src </code>为图像标签的路径属性<ul><li>相对路径：图片相对于HTML页面文件的位置<ul><li>同一级：位于相同文件夹</li><li>上一级：位于HTML的上一级文件夹</li><li>下一级：位于HTML的下一级文件夹</li></ul></li><li>绝对路径：目录下的绝对位置，可以直接找到</li></ul></li><li>其他属性<ul><li><code>alt</code> 替换文本，当图像无法正常显示时可用文字替换</li><li><code>title </code>提示文本，用于显示文字提示</li><li><code>width/height</code> 图像宽度/高度，仅设置一个可以实现等比例缩放</li><li><code>border </code>图像边框粗细，一般采用CSS修改</li></ul></li><li>注意：其他属性必须写在<code>src</code>后面，采用<strong>键值对</strong>的形式，且每个属性之间必须保留空格</li></ul><h4 id="3-7-超链接标签"><a href="#3-7-超链接标签" class="headerlink" title="3.7 超链接标签"></a>3.7 超链接标签</h4><ul><li><code>&lt;a href="跳转目标URL" target="目标打开方式"&gt;文本或图像\&lt;/a&gt;</code></li><li>属性：<ul><li><code>href</code>：目标地址，<strong>必须属性</strong>，标签应用后可进行超链接动作</li><li><code>target</code>：链接打开方式<ul><li><code>_self </code>为默认值，在同一个网页界面打开</li><li><code>_blank</code>，新窗口打开</li></ul></li></ul></li><li>超链接分类<ul><li>外部链接：用于链接外部网站，<code>href</code>属性值以<code>http://</code>开头</li><li>内部链接：网站内部页面之间的链接，直接链接名称即可</li><li>空链接：没有确定的链接目标时，以空链接形式代替，<code>href="#"</code></li><li>下载链接：<code>href</code>内容为文件或者压缩包时，跳转链接会下载该文件</li><li>网页元素链接：对网页中的各种元素添加超链接</li><li>锚点链接：可以快速定位到页面中的某个位置<ul><li>第一步：在<code>href</code>属性中设置为<code>#</code>名字的形式，如<code>&lt;a href="#two"&gt;第三集&lt;/a&gt;</code></li><li>第二部：给目标位置添加一个<code>id</code>属性，如<code>&lt;h3 id="two"&gt;</code></li></ul></li></ul></li></ul><h4 id="3-8-注释"><a href="#3-8-注释" class="headerlink" title="3.8 注释"></a>3.8 注释</h4><ul><li><code>&lt;!--注释文本--&gt;</code></li><li>内容给程序员看，内容不执行并且不会显示到页面当中</li></ul><h4 id="3-9-特殊字符：一些字符不方便使用，用以下代码代替"><a href="#3-9-特殊字符：一些字符不方便使用，用以下代码代替" class="headerlink" title="3.9 特殊字符：一些字符不方便使用，用以下代码代替"></a>3.9 特殊字符：一些字符不方便使用，用以下代码代替</h4><ul><li>空格（ ）：<code>&amp;nbsp; </code> <strong>常用</strong></li><li>小于号（&lt;）: <code>&amp;lt;</code>  <strong>常用</strong></li><li>大于号（&gt;）: <code>&amp;gt;</code>  <strong>常用</strong></li><li>与号（&amp;）: <code>&amp;amp;</code></li><li>人民币（￥）: <code>&amp;yen;</code></li><li>版权（©）:<code> &amp;copy;</code></li><li>注册商标（®）: <code>&amp;reg;</code></li><li>摄氏度（°）: <code>&amp;deg;</code></li><li>正负号（±）:<code> &amp;plusmn;</code></li><li>乘号（×）: <code>&amp;times;</code></li><li>除号（÷）: <code>&amp;divide;</code></li><li>平方（²）: <code>&amp;sup2;</code></li><li>立方（³）: <code>&amp;sup3;</code></li></ul><h4 id="3-10-表格标签"><a href="#3-10-表格标签" class="headerlink" title="3.10 表格标签"></a>3.10 表格标签</h4><ul><li><p>用于显示和展示数据，使可阅读性更好、更清晰。</p></li><li><p>基本语法：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>                     //用于定义表格的标签  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                    //定义表格中的行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    //定义每行中的每个单元格        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><code>&lt;th&gt;&lt;/th&gt;</code>表示HTML表格的<strong>表头部分</strong>，以显示特殊，会<strong>剧中加粗</strong></p></li><li><p>表格属性（<strong>不常用，以后用css修改</strong>）：</p><ul><li><code>align</code>：表格对齐方式，属性值有：<code>left(靠左对齐)</code>，<code>center(居中对齐)</code>，<code>right(靠右对齐)</code></li><li><code>border</code> ：规定边框有无，属性值有：<code>1</code>或<code> " "</code></li><li><code>cellpadding</code>：单元格沿边与内容之间的空白，默认<strong>1像素</strong></li><li><code>cellspacing</code>：单元格之间的空白，默认<strong>2像素</strong></li><li><code>width</code>：表格宽度（属性值为<strong>百分比</strong>或者<strong>像素</strong>）</li></ul></li><li><p>表格结构标签（<strong>放在<code>&lt;table&gt;&lt;/table&gt;</code>之间</strong>）：</p><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>表头区域</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>表体区域</li></ul></li><li><p>合并单元格：</p><ul><li>方式：<ul><li>跨行合并：<code>rowspan = "合并的个数"</code></li><li>跨列合并：<code>colspan = "合并的个数"</code></li></ul></li><li>目标单元格：<ul><li>跨行：最上面写入合并代码</li><li>跨列：最左面写入合并代码</li></ul></li></ul></li></ul><h4 id="3-11-列表标签"><a href="#3-11-列表标签" class="headerlink" title="3.11 列表标签"></a>3.11 列表标签</h4><ul><li><p>主要用于排列布局，特点：整齐、整洁、有序、使用自由方便</p></li><li><p><strong>无序列表</strong></p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     //表示无序列表，以项目符号呈现列表项，内部只能放置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        // 定义列表项，各列表之间没有顺序之分，内部可放元素    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><ul><li><p>有序列表</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                     //表示有序列表，排列艺术字显示，内部只放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p><strong>自定义列表</strong></p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>                    //定义描述列表，内部只放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>定义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>            //定义项目/名字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        //描述该项目/名字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>为并列关系，内部都可以放元素</p></li></ul></li><li><p>注意：</p><ol><li>学会何时使用无序列表、自定义列表（标题+说明 时使用自定义）</li><li>无序列表和自定义列表的代码写法</li><li>布局方式用css操作</li></ol></li></ul><h4 id="3-12-表单标签"><a href="#3-12-表单标签" class="headerlink" title="3.12 表单标签"></a>3.12 表单标签</h4><ul><li><p>用于收集用户信息</p></li><li><p>表单域：包含表单元素的区域，用<code>&lt;form&gt;</code>定义，包含以下属性：</p><ul><li><code>&lt;action&gt;</code>：接收和处理表单的服务器<code>&lt;url&gt;</code></li><li><code>&lt;method&gt;</code>：表单提交方式，分<code>get</code>和<code>post</code></li><li><code>&lt;name&gt;</code>：指定表单名称，区分多个表单</li></ul></li><li><p>表单控件/元素：</p><ul><li><p><code>input</code>输入：<code>&lt;input&gt;</code>为单标签，type属性值指定控件类型</p></li><li><p><code>select</code>下拉：为了节约空间，从多个中选一个</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>一对select中至少包含一对<code>&lt;option&gt;</code>，且当某个<code>selected = "selected"</code>时即为默认选项</p></li></ul></li><li><p><code>textarea</code>文本域：需要输入大量文本内容时使用</p><ul><li><code>&lt;textarea&gt;内容&lt;/textarea&gt;</code></li></ul></li></ul></li></ul><h4 id="3-13-表单标签拓展"><a href="#3-13-表单标签拓展" class="headerlink" title="3.13 表单标签拓展"></a>3.13 表单标签拓展</h4><ul><li><code>&lt;input&gt;</code>拓展</li></ul><ol><li>input的type属性值：<ul><li><code>text</code>：文本框，输入内容可见</li><li><code>password</code>：密码框，输入内容不可见</li><li><code>radio</code>：单选按钮，可实现单选，需要有<code>name</code>属性</li><li><code>checkbox</code>：多选按钮，可实现多选</li><li><code>submit</code>：提交按钮，将表单提交到服务器</li><li><code>reset</code>：重置表单的所有元素</li><li><code>button</code>：点击按钮，不提交数据，只做动作</li><li><code>file</code>：定义输入字段和浏览器按钮，共文件上传使用</li></ul></li><li><code>name</code>属性值：程序员自起，用于区分数据</li><li><code>value</code>：自定义，规定元素的值</li><li><code>checked</code>：属性值为checked，规定首次加载时自动被选中</li><li><code>maxlength</code>：值为正整数，规定输入的内容最大的长度</li></ol><ul><li>注意：<code>name</code>和<code>value</code>是供内部人员使用，用户无法知晓，所以每个<code>&lt;input&gt;</code>都应当有用这两个属性</li></ul><h4 id="3-14-lt-label-gt-标签"><a href="#3-14-lt-label-gt-标签" class="headerlink" title="3.14 <label>标签"></a>3.14 <code>&lt;label&gt;</code>标签</h4><ul><li><p>input的元素定义标注，改善用户体验</p></li><li><p>绑定一个表单元素，点击到文本时自动定位到元素中</p></li><li><p>语法：</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名字aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p><code>id</code>和<code>for</code>相对应即可</p></li></ul></li></ul><h3 id="四、查阅文档"><a href="#四、查阅文档" class="headerlink" title="四、查阅文档"></a>四、查阅文档</h3><p>推荐网站：</p><ul><li><p><a href="https://www.baidu.com/">百度</a></p></li><li><p><strong>推荐</strong><a href="https://www.w3school.com.cn/">W3C</a></p></li><li><p><strong>权威</strong><a href="https://developer.mozilla.org/zh-CN/">MDN</a></p><p>对于不懂得相关代码，或者要学习其他的前端知识，都可以在以上网站中进行搜索和查询</p></li></ul><blockquote><p>我是EagleH，一个正处于前端起步阶段的IT小白~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业季我想说的话</title>
      <link href="2021/02/09/gan-kun-wei-ding-ni-wo-jie-shi-hei-ma/"/>
      <url>2021/02/09/gan-kun-wei-ding-ni-wo-jie-shi-hei-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="乾坤未定-你我皆是黑马"><a href="#乾坤未定-你我皆是黑马" class="headerlink" title="乾坤未定 你我皆是黑马"></a>乾坤未定 你我皆是黑马</h1><p>大学生活绚烂纷扰，等到临近毕业终日忙于毕业设计，才知道大学四年没有提前铺垫是多么可惜。大四过半，整日没有课程，却学的比以往更加认真，手头毕业设计是大学的最终考验，却也是就业前的最后希望。</p><p>像我这样的人，高中“应试教育”压迫出来的积极性随着大学生活的“放养”逐渐消磨殆尽，张嘴便是本来以前如何，只是现在怎样。搪塞他人，也是麻醉自己。</p><p>这些天，因为一些原因，开始审视自己，开始抱怨自己，开始自暴自弃。直到最近看到了一段视频，里面有段独白我印象颇深：</p><blockquote><p>“Unless they lead to good actions. Nobody ever had their life change by somebody hoping.</p></blockquote><p>所以在忙毕业设计之余，想写点东西激励自己，想不到好名字，就引用喜欢的一句话来做标题：</p><blockquote><p>乾坤未定，你我皆是黑马。</p></blockquote><p>没有人是生来就所向披靡，优秀的人之所以优秀，因为他们付出了配得上优秀的努力。同样是十余年的寒窗苦读，不论曾经走马观花还是披风戴雨，你怎能就此甘拜下风！本来可以很了不起，生命不息，时间还有余力，现在也来得及。总是喜欢在嘴上挂着：“认真你就输了。”其实一直认真你就赢了，毕竟放弃不难，但是坚持超酷。</p><p>可能绝大部分人都会被“天生我材必有用”洗脑，总有推文说：每个人都有自己的价值。其实对于我们来说，我们的价值高低，在遭遇诱惑的一瞬间就即将被决定。你可能会遭遇低谷，面临绝境，但你应该庆幸不会更糟，如果事与愿违，请相信人生一定另有安排。如果没有人扶你，那请你自己爬起来，只要迈向阳光，黑暗就永远跟不上你。</p><p>从现在开始，尝试着慢慢改变，不需一蹴而就，但求步步为营。不要担心看不到进步，人生在为你铭刻生平，凡事到最后必定是皆大欢喜，如果没有，那一定是没有到最后。因为，无论多么崇峻的高山，总是会为攀登的人留下一条山脊。</p><p>人生的痛苦有两种，一种是自律的痛苦，一种是后悔的痛苦。每天起床闹钟提前一点，每天游戏时间少花一点，每天出去多运动一点，每天饭吃的更准时一点，每天自律一点，每天就能变得更好不止一点。</p><p>不要在对自己说我想做这个我想做那个我想做什么什么！<br>问问自己，你为什么还没做呢？</p><p>不要再想着等我有了什么我就能做什么，也不要想着等到了什么日子我就去做什么，人生不等，时间不等，岁月不等，他们也不等。</p><p>正如视频里我喜欢的那段独白：</p><blockquote><p>除非付诸行动，否则空口无凭，没有人能通过祈祷和妄想来改变人生。</p></blockquote><p>加油吧，为家庭拼搏的打工人。<br>​加油吧，为增添履历的实习生。<br>​加油吧，为忙毕业和求职的自己。<br>​也加油吧，正在享受大学生活，正在求学路上的读书人。</p><p>​愿诸位，<br>​逢山开路，遇水架桥，历尽千帆，苦尽甘来！</p><blockquote><p>我是EagleH，一个想让自己变得更好的社会新生~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随便写写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
